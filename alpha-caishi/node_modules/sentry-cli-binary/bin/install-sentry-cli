#!/usr/bin/env node

var os = require('os');
var fs = require('fs');
var assert = require('assert');
var path = require('path');
var platform = os.platform();
var ProgressBar = require('progress');
var https = require('https');
var arch = os.arch();
var spawn = require('child_process').spawn;

// downloadUrl vars
var releasesUrl = 'https://github.com/getsentry/sentry-cli/releases/download/';
var version = require('../package.json').version;
var binaryPrefix = '/sentry-cli-';

// output vars
var outputPath;
if (platform === 'win32') {
  outputPath = __dirname + '\\sentry-cli.exe';
} else {
  outputPath = __dirname + '/../sentry-cli';
}

var downloadUrl = null;

// macOS
if (platform === 'darwin') {
  downloadUrl = releasesUrl + version + binaryPrefix + 'Darwin-x86_64';
// Windows
} else if (platform === 'win32') {
  downloadUrl = releasesUrl + version + binaryPrefix + 'Windows-i686.exe';
// Linux
} else {
  if (arch.indexOf('64') > -1) {
    downloadUrl = releasesUrl + version + binaryPrefix + 'Linux-x86_64';
  } else {
    downloadUrl = releasesUrl + version + binaryPrefix + 'Linux-i686';
  }
}

if (downloadUrl === null) {
  console.log('error: your platform and architecture (' + platform + '-' + arch + ') is unsupported.');
  process.exit(1);
}

// Download the binary from the response
function downloadBinary(res) {
  var fn = downloadUrl.match(/.*\/(.*?)$/)[1];
  var total = parseInt(res.headers['content-length'], 10);
  var pct = -1;
  var downloaded = 0;
  var progress = null;
  var isYarn = false;
  if (process.stdout.isTTY) {
    progress = new ProgressBar('fetching ' + fn +' :bar :percent :etas', {
      complete: "█",
      incomplete: "░",
      width: 20,
      total: total
    });
  } else if ((process.env.npm_config_user_agent || '').match(/yarn/)) {
    isYarn = true;
  }
  var download = fs.createWriteStream(outputPath, {
    mode: Number.parseInt('0755', 8)
  });
  res.pipe(download);
  res.on('data', function(chunk) {
    downloaded += chunk.length;
    if (process.stdout.isTTY) {
      progress.tick(chunk.length);
    } else if (isYarn) {
      var newPct = Math.round(downloaded / total * 100);
      if (newPct !== pct) {
        pct = newPct;
        process.stdout.write('fetching ' + fn + ' ' + pct + '%\n');
      }
    }
  });
  download.on('error', function(err) {
    console.log(err);
    process.exit(1);
  });
  download.on('close', function() {
    var output = "";
    var child = spawn(outputPath, ['--version'], {
      stdio: ['pipe', 'pipe', process.stderr],
    });
    child.stdout.on('data', function(data) {
      output += data;
    });
    child.on('close', function(code) {
      if (code != 0) {
        console.log('Something went wrong!');
        console.error(output);
        process.exit(1);
      } else {
        if (output.trim() !== 'sentry-cli ' + version) {
          console.error('Warning! Unexpected sentry-cli version: ' +
                        output.trim().split(' ')[1] +
                        ', expected ' + version + '!');
        }
        process.exit(0);
      }
    });
  });
}

// Count redirects, just in case we get a loop.
// Pretty sure this can't happen with the github releases URL
var redirectCt = 0;
function handleResponse(res) {
  if (res.statusCode === 302) {
    redirectCt++;
    if (redirectCt > 10) {
      console.log('error: Too many redirects!');
      process.exit(1);
    }
    https.get(res.headers['Location'] || res.headers['location'], handleResponse)
      .on('error', function(err) {
        console.log(err);
        process.exit(1);
      });
  } else if (res.statusCode >= 200 && res.statusCode < 300) {
    downloadBinary(res);
  } else {
    console.log('Received ' + res.statusCode + ': ' + res.statusMessage);
    process.exit(1);
  }
}

function shouldDownloadScript() {
  return !fs.existsSync(outputPath);
}

// Start download
if (shouldDownloadScript()) {
  https.get(downloadUrl, handleResponse)
    .on('error', function(err) {
      console.log(err);
      process.exit(1);
    });
}
