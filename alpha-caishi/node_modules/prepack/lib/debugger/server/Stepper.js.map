{"version":3,"sources":["../../../src/debugger/server/Stepper.js"],"names":["Stepper","filePath","line","column","_stepStartData","ast","currentStackSize","loc","source","start","StepIntoStepper","isAstLocationChanged","StepOverStepper","stackSize","_startStackSize"],"mappings":";;;;;;;qjBAAA;;;;;;;;;AAWA;;AACA;;AACA;;;;;;;;;;;;IAEaA,O,WAAAA,O;AACX,mBAAYC,QAAZ,EAA8BC,IAA9B,EAA4CC,MAA5C,EAA4D;AAAA;;AAC1D,SAAKC,cAAL,GAAsB;AACpBH,gBAAUA,QADU;AAEpBC,YAAMA,IAFc;AAGpBC,cAAQA;AAHY,KAAtB;AAKD;;;;+BAGUE,G,EAAgBC,gB,EAAmC;AAC5D,+BAAU,KAAV,EAAiB,kCAAjB;AACD;;;yCAEoBD,G,EAAgB;AACnC;AACA,UAAI,CAAC,qBAAYA,GAAZ,CAAL,EAAuB,OAAO,KAAP;AACvB,UAAIE,MAAMF,IAAIE,GAAd;AACA,UAAI,CAACA,GAAL,EAAU,OAAO,KAAP;AACV,UAAIN,WAAWM,IAAIC,MAAnB;AACA,UAAIN,OAAOK,IAAIE,KAAJ,CAAUP,IAArB;AACA,UAAIC,SAASI,IAAIE,KAAJ,CAAUN,MAAvB;AACA,UAAI,CAACF,QAAL,EAAe,OAAO,KAAP;AACf,UAAI,KAAKG,cAAT,EAAyB;AACvB,YACEH,aAAa,KAAKG,cAAL,CAAoBH,QAAjC,IACAC,SAAS,KAAKE,cAAL,CAAoBF,IAD7B,IAEAC,WAAW,KAAKC,cAAL,CAAoBD,MAHjC,EAIE;AACA,iBAAO,KAAP;AACD;AACF,OARD,MAQO;AACL,eAAO,KAAP;AACD;AACD,aAAO,IAAP;AACD;;;;;;IAGUO,e,WAAAA,e;;;AACX,2BAAYT,QAAZ,EAA8BC,IAA9B,EAA4CC,MAA5C,EAA4D;AAAA;;AAAA,6HACpDF,QADoD,EAC1CC,IAD0C,EACpCC,MADoC;AAE3D;;AAED;;;;;+BACWE,G,EAAgBC,gB,EAAmC;AAC5D,aAAO,KAAKK,oBAAL,CAA0BN,GAA1B,CAAP;AACD;;;;EARkCL,O;;IAWxBY,e,WAAAA,e;;;AACX,2BAAYX,QAAZ,EAA8BC,IAA9B,EAA4CC,MAA5C,EAA4DU,SAA5D,EAA+E;AAAA;;AAAA,mIACvEZ,QADuE,EAC7DC,IAD6D,EACvDC,MADuD;;AAE7E,WAAKW,eAAL,GAAuBD,SAAvB;AAF6E;AAG9E;;;;+BAGUR,G,EAAgBC,gB,EAAmC;AAC5D,UAAI,CAAC,KAAKK,oBAAL,CAA0BN,GAA1B,CAAL,EAAqC,OAAO,KAAP;AACrC,UAAIC,oBAAoB,KAAKQ,eAA7B,EAA8C;AAC5C;AACA;AACA;AACA;AACA;AACA,eAAO,IAAP;AACD;AACD,aAAO,KAAP;AACD;;;;EAlBkCd,O","file":"Stepper.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\nimport type { SourceData } from \"./../common/types.js\";\nimport { IsStatement } from \"./../../methods/is.js\";\nimport { BabelNode } from \"babel-types\";\nimport invariant from \"./../common/invariant.js\";\n\nexport class Stepper {\n  constructor(filePath: string, line: number, column: number) {\n    this._stepStartData = {\n      filePath: filePath,\n      line: line,\n      column: column,\n    };\n  }\n  _stepStartData: SourceData;\n\n  isComplete(ast: BabelNode, currentStackSize: number): boolean {\n    invariant(false, \"Abstract method, please override\");\n  }\n\n  isAstLocationChanged(ast: BabelNode) {\n    // we should only step to statements\n    if (!IsStatement(ast)) return false;\n    let loc = ast.loc;\n    if (!loc) return false;\n    let filePath = loc.source;\n    let line = loc.start.line;\n    let column = loc.start.column;\n    if (!filePath) return false;\n    if (this._stepStartData) {\n      if (\n        filePath === this._stepStartData.filePath &&\n        line === this._stepStartData.line &&\n        column === this._stepStartData.column\n      ) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n    return true;\n  }\n}\n\nexport class StepIntoStepper extends Stepper {\n  constructor(filePath: string, line: number, column: number) {\n    super(filePath, line, column);\n  }\n\n  // Override\n  isComplete(ast: BabelNode, currentStackSize: number): boolean {\n    return this.isAstLocationChanged(ast);\n  }\n}\n\nexport class StepOverStepper extends Stepper {\n  constructor(filePath: string, line: number, column: number, stackSize: number) {\n    super(filePath, line, column);\n    this._startStackSize = stackSize;\n  }\n  _startStackSize: number;\n\n  isComplete(ast: BabelNode, currentStackSize: number): boolean {\n    if (!this.isAstLocationChanged(ast)) return false;\n    if (currentStackSize <= this._startStackSize) {\n      // two cases here:\n      // if current stack length < starting stack length, the program must have\n      // hit an exception so this stepper is no longer relevant\n      // if current stack length === starting stack length, the program returned\n      // to the same stack depth, so a step over is complete\n      return true;\n    }\n    return false;\n  }\n}\n"]}