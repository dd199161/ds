{"version":3,"sources":["../../../src/debugger/server/BreakpointManager.js"],"names":["BreakpointManager","_breakpointMaps","Map","ast","loc","source","location","filePath","lineNum","start","line","colNum","column","breakpoint","_findStoppableBreakpoint","getBreakpoint","enabled","breakpoints","_doBreakpointsAction","_addBreakpoint","bind","bp","breakpointMap","get","set","addBreakpoint","columnNum","undefined","_removeBreakpoint","removeBreakpoint","_enableBreakpoint","enableBreakpoint","_disableBreakpoint","disableBreakpoint","action"],"mappings":"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","file":"BreakpointManager.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { PerFileBreakpointMap } from \"./PerFileBreakpointMap.js\";\nimport { Breakpoint } from \"./Breakpoint.js\";\nimport type { Breakpoint as BreakpointType } from \"./../common/types.js\";\nimport { BabelNode } from \"babel-types\";\nimport { IsStatement } from \"./../../methods/is.js\";\n\n// Storing BreakpointStores for all source files\nexport class BreakpointManager {\n  constructor() {\n    this._breakpointMaps = new Map();\n  }\n  _breakpointMaps: Map<string, PerFileBreakpointMap>;\n\n  getStoppableBreakpoint(ast: BabelNode): void | Breakpoint {\n    if (!IsStatement(ast)) return;\n    if (ast.loc && ast.loc.source) {\n      let location = ast.loc;\n      let filePath = location.source;\n      if (filePath === null) return;\n      let lineNum = location.start.line;\n      let colNum = location.start.column;\n      // Check whether there is a breakpoint we need to stop on here\n      let breakpoint = this._findStoppableBreakpoint(filePath, lineNum, colNum);\n      if (breakpoint === null) return;\n      return breakpoint;\n    }\n  }\n\n  // Try to find a breakpoint at the given location and check if we should stop on it\n  _findStoppableBreakpoint(filePath: string, lineNum: number, colNum: number): null | Breakpoint {\n    let breakpoint = this.getBreakpoint(filePath, lineNum, colNum);\n    if (breakpoint && breakpoint.enabled) {\n      return breakpoint;\n    }\n    return null;\n  }\n\n  addBreakpointMulti(breakpoints: Array<BreakpointType>) {\n    this._doBreakpointsAction(breakpoints, this._addBreakpoint.bind(this));\n  }\n\n  _addBreakpoint(bp: BreakpointType) {\n    let breakpointMap = this._breakpointMaps.get(bp.filePath);\n    if (!breakpointMap) {\n      breakpointMap = new PerFileBreakpointMap(bp.filePath);\n      this._breakpointMaps.set(bp.filePath, breakpointMap);\n    }\n    breakpointMap.addBreakpoint(bp.line, bp.column);\n  }\n\n  getBreakpoint(filePath: string, lineNum: number, columnNum: number = 0): void | Breakpoint {\n    let breakpointMap = this._breakpointMaps.get(filePath);\n    if (breakpointMap) return breakpointMap.getBreakpoint(lineNum, columnNum);\n    return undefined;\n  }\n\n  removeBreakpointMulti(breakpoints: Array<BreakpointType>) {\n    this._doBreakpointsAction(breakpoints, this._removeBreakpoint.bind(this));\n  }\n\n  _removeBreakpoint(bp: BreakpointType) {\n    let breakpointMap = this._breakpointMaps.get(bp.filePath);\n    if (breakpointMap) breakpointMap.removeBreakpoint(bp.line, bp.column);\n  }\n\n  enableBreakpointMulti(breakpoints: Array<BreakpointType>) {\n    this._doBreakpointsAction(breakpoints, this._enableBreakpoint.bind(this));\n  }\n\n  _enableBreakpoint(bp: BreakpointType) {\n    let breakpointMap = this._breakpointMaps.get(bp.filePath);\n    if (breakpointMap) breakpointMap.enableBreakpoint(bp.line, bp.column);\n  }\n\n  disableBreakpointMulti(breakpoints: Array<BreakpointType>) {\n    this._doBreakpointsAction(breakpoints, this._disableBreakpoint.bind(this));\n  }\n\n  _disableBreakpoint(bp: BreakpointType) {\n    let breakpointMap = this._breakpointMaps.get(bp.filePath);\n    if (breakpointMap) breakpointMap.disableBreakpoint(bp.line, bp.column);\n  }\n\n  _doBreakpointsAction(breakpoints: Array<BreakpointType>, action: BreakpointType => void) {\n    for (let bp of breakpoints) {\n      action(bp);\n    }\n  }\n}\n"]}