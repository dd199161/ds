{"version":3,"sources":["../../../../src/debugger/common/channel/MessageMarshaller.js"],"names":["MessageMarshaller","_lastRunRequestID","requestID","messageType","breakpoints","JSON","stringify","reason","filePath","line","column","result","kind","STOPPED_RESPONSE","DEBUGGER_ATTACHED","PREPACK_RUN_COMMAND","BREAKPOINT_ADD_COMMAND","STACKFRAMES_COMMAND","stackframes","STACKFRAMES_RESPONSE","frameId","SCOPES_COMMAND","scopes","SCOPES_RESPONSE","variablesReference","VARIABLES_COMMAND","variables","VARIABLES_RESPONSE","STEPINTO_COMMAND","STEPOVER_COMMAND","expression","evalArgs","undefined","EVALUATE_COMMAND","evalResult","EVALUATE_RESPONSE","message","parts","split","length","parseInt","isNaN","command","args","runArgs","_unmarshallBreakpointsArguments","slice","join","stackFrameArgs","_unmarshallScopesArguments","_unmarshallVariablesArguments","stepIntoArgs","stepOverArgs","_unmarshallEvaluateArguments","id","arguments","responseString","parse","breakpoint","hasOwnProperty","varRef","dbgResult","resultString","PREPACK_READY_RESPONSE","_unmarshallReadyResult","BREAKPOINT_ADD_ACKNOWLEDGE","_unmarshallBreakpointsAddResult","_unmarshallStoppedResult","_unmarshallStackframesResult","_unmarshallScopesResult","_unmarshallVariablesResult","_unmarshallEvaluateResult","dbgResponse","e","frames","Array","isArray","frame","scope","variable"],"mappings":"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","file":"MessageMarshaller.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\nimport { DebugMessage } from \"./DebugMessage.js\";\nimport type {\n  Breakpoint,\n  BreakpointsArguments,\n  ScopesArguments,\n  Stackframe,\n  DebuggerResponse,\n  StackframeResult,\n  BreakpointsAddResult,\n  StoppedResult,\n  ReadyResult,\n  Scope,\n  ScopesResult,\n  Variable,\n  VariablesArguments,\n  VariablesResult,\n  DebuggerRequest,\n  DebuggerRequestArguments,\n  RunArguments,\n  StackframeArguments,\n  StepIntoArguments,\n  StepOverArguments,\n  StoppedReason,\n  EvaluateArguments,\n  EvaluateResult,\n} from \"./../types.js\";\nimport invariant from \"./../invariant.js\";\nimport { DebuggerError } from \"./../DebuggerError.js\";\n\nexport class MessageMarshaller {\n  constructor() {\n    this._lastRunRequestID = 0;\n  }\n  _lastRunRequestID: number;\n\n  marshallBreakpointAcknowledge(requestID: number, messageType: string, breakpoints: Array<Breakpoint>): string {\n    return `${requestID} ${messageType} ${JSON.stringify(breakpoints)}`;\n  }\n\n  marshallStoppedResponse(reason: StoppedReason, filePath: string, line: number, column: number): string {\n    let result: StoppedResult = {\n      kind: \"stopped\",\n      reason: reason,\n      filePath: filePath,\n      line: line,\n      column: column,\n    };\n    return `${this._lastRunRequestID} ${DebugMessage.STOPPED_RESPONSE} ${JSON.stringify(result)}`;\n  }\n\n  marshallDebuggerStart(requestID: number): string {\n    return `${requestID} ${DebugMessage.DEBUGGER_ATTACHED}`;\n  }\n\n  marshallContinueRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.PREPACK_RUN_COMMAND}`;\n  }\n\n  marshallSetBreakpointsRequest(requestID: number, breakpoints: Array<Breakpoint>): string {\n    return `${requestID} ${DebugMessage.BREAKPOINT_ADD_COMMAND} ${JSON.stringify(breakpoints)}`;\n  }\n\n  marshallStackFramesRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.STACKFRAMES_COMMAND}`;\n  }\n\n  marshallStackFramesResponse(requestID: number, stackframes: Array<Stackframe>): string {\n    return `${requestID} ${DebugMessage.STACKFRAMES_RESPONSE} ${JSON.stringify(stackframes)}`;\n  }\n\n  marshallScopesRequest(requestID: number, frameId: number): string {\n    return `${requestID} ${DebugMessage.SCOPES_COMMAND} ${frameId}`;\n  }\n\n  marshallScopesResponse(requestID: number, scopes: Array<Scope>): string {\n    return `${requestID} ${DebugMessage.SCOPES_RESPONSE} ${JSON.stringify(scopes)}`;\n  }\n\n  marshallVariablesRequest(requestID: number, variablesReference: number): string {\n    return `${requestID} ${DebugMessage.VARIABLES_COMMAND} ${variablesReference}`;\n  }\n\n  marshallVariablesResponse(requestID: number, variables: Array<Variable>): string {\n    return `${requestID} ${DebugMessage.VARIABLES_RESPONSE} ${JSON.stringify(variables)}`;\n  }\n\n  marshallStepIntoRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.STEPINTO_COMMAND}`;\n  }\n\n  marshallStepOverRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.STEPOVER_COMMAND}`;\n  }\n\n  marshallEvaluateRequest(requestID: number, frameId: void | number, expression: string): string {\n    let evalArgs: EvaluateArguments = {\n      kind: \"evaluate\",\n      expression: expression,\n    };\n    if (frameId !== undefined) {\n      evalArgs.frameId = frameId;\n    }\n    return `${requestID} ${DebugMessage.EVALUATE_COMMAND} ${JSON.stringify(evalArgs)}`;\n  }\n\n  marshallEvaluateResponse(requestID: number, evalResult: EvaluateResult): string {\n    return `${requestID} ${DebugMessage.EVALUATE_RESPONSE} ${JSON.stringify(evalResult)}`;\n  }\n\n  unmarshallRequest(message: string): DebuggerRequest {\n    let parts = message.split(\" \");\n    // each request must have a length and a command\n    invariant(parts.length >= 2, \"Request is not well formed\");\n    // unique ID for each request\n    let requestID = parseInt(parts[0], 10);\n    invariant(!isNaN(requestID), \"Request ID must be a number\");\n    let command = parts[1];\n    let args: DebuggerRequestArguments;\n    switch (command) {\n      case DebugMessage.PREPACK_RUN_COMMAND:\n        this._lastRunRequestID = requestID;\n        let runArgs: RunArguments = {\n          kind: \"run\",\n        };\n        args = runArgs;\n        break;\n      case DebugMessage.BREAKPOINT_ADD_COMMAND:\n        args = this._unmarshallBreakpointsArguments(requestID, parts.slice(2).join(\" \"));\n        break;\n      case DebugMessage.STACKFRAMES_COMMAND:\n        let stackFrameArgs: StackframeArguments = {\n          kind: \"stackframe\",\n        };\n        args = stackFrameArgs;\n        break;\n      case DebugMessage.SCOPES_COMMAND:\n        args = this._unmarshallScopesArguments(requestID, parts[2]);\n        break;\n      case DebugMessage.VARIABLES_COMMAND:\n        args = this._unmarshallVariablesArguments(requestID, parts[2]);\n        break;\n      case DebugMessage.STEPINTO_COMMAND:\n        this._lastRunRequestID = requestID;\n        let stepIntoArgs: StepIntoArguments = {\n          kind: \"stepInto\",\n        };\n        args = stepIntoArgs;\n        break;\n      case DebugMessage.STEPOVER_COMMAND:\n        this._lastRunRequestID = requestID;\n        let stepOverArgs: StepOverArguments = {\n          kind: \"stepOver\",\n        };\n        args = stepOverArgs;\n        break;\n      case DebugMessage.EVALUATE_COMMAND:\n        args = this._unmarshallEvaluateArguments(requestID, parts.slice(2).join(\" \"));\n        break;\n      default:\n        throw new DebuggerError(\"Invalid command\", \"Invalid command from adapter: \" + command);\n    }\n    invariant(args !== undefined);\n    let result: DebuggerRequest = {\n      id: requestID,\n      command: command,\n      arguments: args,\n    };\n    return result;\n  }\n\n  _unmarshallBreakpointsArguments(requestID: number, responseString: string): BreakpointsArguments {\n    let breakpoints = JSON.parse(responseString);\n    for (const breakpoint of breakpoints) {\n      invariant(breakpoint.hasOwnProperty(\"filePath\"), \"breakpoint missing filePath property\");\n      invariant(breakpoint.hasOwnProperty(\"line\"), \"breakpoint missing line property\");\n      invariant(breakpoint.hasOwnProperty(\"column\"), \"breakpoint missing column property\");\n      invariant(!isNaN(breakpoint.line));\n      invariant(!isNaN(breakpoint.column));\n    }\n    let result: BreakpointsArguments = {\n      kind: \"breakpoint\",\n      breakpoints: breakpoints,\n    };\n    return result;\n  }\n\n  _unmarshallScopesArguments(requestID: number, responseString: string): ScopesArguments {\n    let frameId = parseInt(responseString, 10);\n    invariant(!isNaN(frameId));\n    let result: ScopesArguments = {\n      kind: \"scopes\",\n      frameId: frameId,\n    };\n    return result;\n  }\n\n  _unmarshallVariablesArguments(requestID: number, responseString: string): VariablesArguments {\n    let varRef = parseInt(responseString, 10);\n    invariant(!isNaN(varRef));\n    let result: VariablesArguments = {\n      kind: \"variables\",\n      variablesReference: varRef,\n    };\n    return result;\n  }\n\n  _unmarshallEvaluateArguments(requestID: number, responseString: string): EvaluateArguments {\n    let evalArgs = JSON.parse(responseString);\n    invariant(evalArgs.hasOwnProperty(\"kind\"), \"Evaluate arguments missing kind field\");\n    invariant(evalArgs.hasOwnProperty(\"expression\"), \"Evaluate arguments missing expression field\");\n    if (evalArgs.hasOwnProperty(\"frameId\")) invariant(!isNaN(evalArgs.frameId));\n    return evalArgs;\n  }\n\n  unmarshallResponse(message: string): DebuggerResponse {\n    try {\n      let parts = message.split(\" \");\n      let requestID = parseInt(parts[0], 10);\n      invariant(!isNaN(requestID));\n      let messageType = parts[1];\n      let dbgResult;\n      let resultString = parts.slice(2).join(\" \");\n      if (messageType === DebugMessage.PREPACK_READY_RESPONSE) {\n        dbgResult = this._unmarshallReadyResult();\n      } else if (messageType === DebugMessage.BREAKPOINT_ADD_ACKNOWLEDGE) {\n        dbgResult = this._unmarshallBreakpointsAddResult(resultString);\n      } else if (messageType === DebugMessage.STOPPED_RESPONSE) {\n        dbgResult = this._unmarshallStoppedResult(resultString);\n      } else if (messageType === DebugMessage.STACKFRAMES_RESPONSE) {\n        dbgResult = this._unmarshallStackframesResult(resultString);\n      } else if (messageType === DebugMessage.SCOPES_RESPONSE) {\n        dbgResult = this._unmarshallScopesResult(resultString);\n      } else if (messageType === DebugMessage.VARIABLES_RESPONSE) {\n        dbgResult = this._unmarshallVariablesResult(resultString);\n      } else if (messageType === DebugMessage.EVALUATE_RESPONSE) {\n        dbgResult = this._unmarshallEvaluateResult(resultString);\n      } else {\n        invariant(false, \"Unexpected response type\");\n      }\n\n      let dbgResponse: DebuggerResponse = {\n        id: requestID,\n        result: dbgResult,\n      };\n      return dbgResponse;\n    } catch (e) {\n      throw new DebuggerError(\"Invalid command\", e.message);\n    }\n  }\n\n  _unmarshallStackframesResult(resultString: string): StackframeResult {\n    let frames = JSON.parse(resultString);\n    invariant(Array.isArray(frames), \"Stack frames is not an array\");\n    for (const frame of frames) {\n      invariant(frame.hasOwnProperty(\"id\"), \"Stack frame is missing id\");\n      invariant(frame.hasOwnProperty(\"fileName\"), \"Stack frame is missing filename\");\n      invariant(frame.hasOwnProperty(\"line\"), \"Stack frame is missing line number\");\n      invariant(frame.hasOwnProperty(\"column\"), \"Stack frame is missing column number\");\n      invariant(frame.hasOwnProperty(\"functionName\"), \"Stack frame is missing function name\");\n    }\n    let result: StackframeResult = {\n      kind: \"stackframe\",\n      stackframes: frames,\n    };\n    return result;\n  }\n\n  _unmarshallScopesResult(resultString: string): ScopesResult {\n    let scopes = JSON.parse(resultString);\n    invariant(Array.isArray(scopes), \"Scopes is not an array\");\n    for (const scope of scopes) {\n      invariant(scope.hasOwnProperty(\"name\"), \"Scope is missing name\");\n      invariant(scope.hasOwnProperty(\"variablesReference\"), \"Scope is missing variablesReference\");\n      invariant(scope.hasOwnProperty(\"expensive\"), \"Scope is missing expensive\");\n    }\n    let result: ScopesResult = {\n      kind: \"scopes\",\n      scopes: scopes,\n    };\n    return result;\n  }\n\n  _unmarshallVariablesResult(resultString: string): VariablesResult {\n    let variables = JSON.parse(resultString);\n    invariant(Array.isArray(variables), \"Variables is not an array\");\n    for (const variable of variables) {\n      invariant(variable.hasOwnProperty(\"name\"));\n      invariant(variable.hasOwnProperty(\"value\"));\n      invariant(variable.hasOwnProperty(\"variablesReference\"));\n    }\n    let result: VariablesResult = {\n      kind: \"variables\",\n      variables: variables,\n    };\n    return result;\n  }\n\n  _unmarshallEvaluateResult(resultString: string): EvaluateResult {\n    let evalResult = JSON.parse(resultString);\n    invariant(evalResult.hasOwnProperty(\"kind\"), \"eval result missing kind property\");\n    invariant(evalResult.kind === \"evaluate\", \"eval result is the wrong kind\");\n    invariant(evalResult.hasOwnProperty(\"displayValue\", \"eval result missing display value property\"));\n    invariant(evalResult.hasOwnProperty(\"type\", \"eval result missing type property\"));\n    invariant(evalResult.hasOwnProperty(\"variablesReference\", \"eval result missing variablesReference property\"));\n    return evalResult;\n  }\n\n  _unmarshallBreakpointsAddResult(resultString: string): BreakpointsAddResult {\n    let breakpoints = JSON.parse(resultString);\n    invariant(Array.isArray(breakpoints));\n    for (const breakpoint of breakpoints) {\n      invariant(breakpoint.hasOwnProperty(\"filePath\"), \"breakpoint missing filePath property\");\n      invariant(breakpoint.hasOwnProperty(\"line\"), \"breakpoint missing line property\");\n      invariant(breakpoint.hasOwnProperty(\"column\"), \"breakpoint missing column property\");\n      invariant(!isNaN(breakpoint.line));\n      invariant(!isNaN(breakpoint.column));\n    }\n\n    let result: BreakpointsAddResult = {\n      kind: \"breakpoint-add\",\n      breakpoints: breakpoints,\n    };\n    return result;\n  }\n\n  _unmarshallStoppedResult(resultString: string): StoppedResult {\n    let result = JSON.parse(resultString);\n    invariant(result.kind === \"stopped\");\n    invariant(result.hasOwnProperty(\"reason\"));\n    invariant(result.hasOwnProperty(\"filePath\"));\n    invariant(result.hasOwnProperty(\"line\"));\n    invariant(!isNaN(result.line));\n    invariant(result.hasOwnProperty(\"column\"));\n    invariant(!isNaN(result.column));\n    return result;\n  }\n\n  _unmarshallReadyResult(): ReadyResult {\n    let result: ReadyResult = {\n      kind: \"ready\",\n    };\n    return result;\n  }\n}\n"]}