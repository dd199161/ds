{"version":3,"sources":["../../src/utils/json.js"],"names":["mergeAdacentJSONTextNodes","node","visitedNodes","undefined","Set","has","add","Array","isArray","arr","length","concatString","i","child","push","key","value"],"mappings":";;;;;;;;QAcgBA,yB,GAAAA,yB;;;AADhB;AAbA;;;;;;;;;AAcO,SAASA,yBAAT,CAAmCC,IAAnC,EAA+CC,YAA/C,EAAyE;AAC9E,MAAIA,iBAAiBC,SAArB,EAAgC;AAC9BD,mBAAe,IAAIE,GAAJ,EAAf;AACD;AACD,MAAIF,aAAaG,GAAb,CAAiBJ,IAAjB,CAAJ,EAA4B;AAC1B,WAAO,YAAP;AACD;AACDC,eAAaI,GAAb,CAAiBL,IAAjB;;AAEA;AACA,MAAIM,MAAMC,OAAN,CAAcP,IAAd,CAAJ,EAAyB;AACvB;AACA,QAAIQ,MAAM,EAAV;AACA,QAAIC,SAAST,KAAKS,MAAlB;AACA,QAAIC,eAAe,IAAnB;AACA,QAAIC,IAAI,CAAC,CAAT;AACA,WAAOA,MAAMF,MAAb,EAAqB;AACnB,UAAIG,QAAQZ,KAAKW,CAAL,CAAZ;AACA,UAAI,OAAOC,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;AAC1D,YAAIF,iBAAiB,IAArB,EAA2B;AACzBA,0BAAgBE,KAAhB;AACD,SAFD,MAEO;AACLF,yBAAeE,KAAf;AACD;AACF,OAND,MAMO,IAAI,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAAjB,IAA6BA,UAAU,IAA3C,EAAiD;AACtD,YAAIF,iBAAiB,IAArB,EAA2B;AACzBF,cAAIK,IAAJ,CAASH,YAAT;AACAA,yBAAe,IAAf;AACD;AACDF,YAAIK,IAAJ,CAASd,0BAA0Ba,KAA1B,EAAiCX,YAAjC,CAAT;AACD;AACF;AACD,QAAIS,iBAAiB,IAArB,EAA2B;AACzBF,UAAIK,IAAJ,CAASH,YAAT;AACD;AACD,WAAOF,GAAP;AACD,GA1BD,MA0BO;AACL,SAAK,IAAIM,IAAT,IAAgBd,IAAhB,EAAsB;AACpB,UAAIe,QAAQf,KAAKc,IAAL,CAAZ;AACA,UAAI,QAAOC,KAAP,yCAAOA,KAAP,OAAiB,QAAjB,IAA6BA,UAAU,IAA3C,EAAiD;AAC/Cf,aAAKc,IAAL,IAAYf,0BAA4BgB,KAA5B,EAAgDd,YAAhD,CAAZ;AACD;AACF;AACF;AACD,SAAOD,IAAP;AACD","file":"json.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\ntype JSONValue = Array<JSONValue> | string | number | JSON;\ntype JSON = { [key: string]: JSONValue };\n\n// this will mutate the original JSON object\nexport function mergeAdacentJSONTextNodes(node: JSON, visitedNodes?: Set<JSON>) {\n  if (visitedNodes === undefined) {\n    visitedNodes = new Set();\n  }\n  if (visitedNodes.has(node)) {\n    return \"[Circular]\";\n  }\n  visitedNodes.add(node);\n\n  // we merge adjacent text nodes\n  if (Array.isArray(node)) {\n    // we create a new array rather than mutating the original\n    let arr = [];\n    let length = node.length;\n    let concatString = null;\n    let i = -1;\n    while (i++ < length) {\n      let child = node[i];\n      if (typeof child === \"string\" || typeof child === \"number\") {\n        if (concatString !== null) {\n          concatString += child;\n        } else {\n          concatString = child;\n        }\n      } else if (typeof child === \"object\" && child !== null) {\n        if (concatString !== null) {\n          arr.push(concatString);\n          concatString = null;\n        }\n        arr.push(mergeAdacentJSONTextNodes(child, visitedNodes));\n      }\n    }\n    if (concatString !== null) {\n      arr.push(concatString);\n    }\n    return arr;\n  } else {\n    for (let key in node) {\n      let value = node[key];\n      if (typeof value === \"object\" && value !== null) {\n        node[key] = mergeAdacentJSONTextNodes(((value: any): JSON), visitedNodes);\n      }\n    }\n  }\n  return node;\n}\n"]}