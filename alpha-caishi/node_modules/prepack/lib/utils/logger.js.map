{"version":3,"sources":["../../src/utils/logger.js"],"names":["Logger","realm","internalDebug","_hasErrors","f","defaultValue","logFailures","context","isStrict","env","$GlobalEnv","lexicalEnvironment","variableEnvironment","pushContext","oldErrorHandler","errorHandler","newErrorHandler","d","severity","handleError","result","effects","evaluateForEffects","e","logCompletion","intrinsics","undefined","popContext","res","value","console","error","constructor","name","tryQuery","Error","object","err","ToStringPartial","stack","message","nativeStack","properties","get","descriptor","$ErrorData","contextStack","loc","expressionLocation","locString","start","line","column","source","intrinsicName"],"mappings":"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","file":"logger.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm, ExecutionContext } from \"../realm.js\";\nimport { FatalError } from \"../errors.js\";\nimport { Get, InstanceofOperator } from \"../methods/index.js\";\nimport { Completion, ThrowCompletion } from \"../completions.js\";\nimport { ObjectValue, StringValue, Value } from \"../values/index.js\";\nimport { To } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\n\nexport class Logger {\n  constructor(realm: Realm, internalDebug: boolean) {\n    this.realm = realm;\n    this._hasErrors = false;\n    this.internalDebug = internalDebug;\n  }\n\n  realm: Realm;\n  _hasErrors: boolean;\n  internalDebug: boolean;\n\n  // Wraps a query that might potentially execute user code.\n  tryQuery<T>(f: () => T, defaultValue: T, logFailures: boolean): T {\n    let realm = this.realm;\n    let context = new ExecutionContext();\n    context.isStrict = realm.isStrict;\n    let env = realm.$GlobalEnv;\n    context.lexicalEnvironment = env;\n    context.variableEnvironment = env;\n    context.realm = realm;\n    realm.pushContext(context);\n    // We use partial evaluation so that we can throw away any state mutations\n    let oldErrorHandler = realm.errorHandler;\n    let newErrorHandler;\n    realm.errorHandler = newErrorHandler = d => {\n      if (d.severity === \"Information\" || d.severity === \"Warning\") return \"Recover\";\n      if (logFailures) {\n        realm.errorHandler = oldErrorHandler;\n        realm.handleError(d);\n        realm.errorHandler = newErrorHandler;\n      }\n      return \"Fail\";\n    };\n    try {\n      let result;\n      let effects = realm.evaluateForEffects(() => {\n        try {\n          result = f();\n        } catch (e) {\n          if (e instanceof Completion) {\n            if (logFailures) this.logCompletion(e);\n            result = defaultValue;\n          } else if (e instanceof FatalError) {\n            result = defaultValue;\n          } else {\n            throw e;\n          }\n        }\n        return realm.intrinsics.undefined;\n      });\n      invariant(effects[0] === realm.intrinsics.undefined);\n      return ((result: any): T);\n    } finally {\n      realm.errorHandler = oldErrorHandler;\n      realm.popContext(context);\n    }\n  }\n\n  logCompletion(res: Completion) {\n    let realm = this.realm;\n    let value = res.value;\n    if (this.internalDebug) console.error(`=== ${res.constructor.name} ===`);\n    if (\n      this.tryQuery(\n        () => value instanceof ObjectValue && InstanceofOperator(realm, value, realm.intrinsics.Error),\n        false,\n        false\n      )\n    ) {\n      let object = ((value: any): ObjectValue);\n      try {\n        let err = new FatalError(\n          this.tryQuery(() => To.ToStringPartial(realm, Get(realm, object, \"message\")), \"(unknown message)\", false)\n        );\n        err.stack = this.tryQuery(\n          () => To.ToStringPartial(realm, Get(realm, object, \"stack\")),\n          \"(unknown stack)\",\n          false\n        );\n        console.error(err.message);\n        console.error(err.stack);\n        if (this.internalDebug && res instanceof ThrowCompletion) console.error(res.nativeStack);\n      } catch (err) {\n        let message = object.properties.get(\"message\");\n        console.error(\n          message && message.descriptor && message.descriptor.value instanceof StringValue\n            ? message.descriptor.value.value\n            : \"(no message available)\"\n        );\n        console.error(err.stack);\n        if (object.$ErrorData) {\n          console.error(object.$ErrorData.contextStack);\n        }\n      }\n    } else {\n      try {\n        value = To.ToStringPartial(realm, value);\n      } catch (err) {\n        value = err.message;\n      }\n      console.error(value);\n      if (this.internalDebug && res instanceof ThrowCompletion) console.error(res.nativeStack);\n    }\n    this._hasErrors = true;\n  }\n\n  logError(value: Value, message: string) {\n    let loc = value.expressionLocation;\n    if (loc) {\n      let locString = `${loc.start.line}:${loc.start.column + 1}`;\n      if (loc.source) locString = `${loc.source}:${locString}`;\n      message = `${message}\\nat: ${locString}`;\n    } else if (value.intrinsicName) {\n      message = `${message}\\nintrinsic name: ${value.intrinsicName}`;\n    }\n\n    console.error(message);\n    this._hasErrors = true;\n  }\n\n  hasErrors() {\n    return this._hasErrors;\n  }\n}\n"]}