{"version":3,"sources":["../../src/methods/properties.js"],"names":["t","StringKey","key","value","InternalDescriptorPropertyToValue","realm","undefined","intrinsics","InternalGetPropertiesKey","P","InternalGetPropertiesMap","O","properties","symbols","InternalSetProperty","desc","map","propertyBinding","get","descriptor","object","set","recordModifiedProperty","InternalUpdatedProperty","oldDesc","generator","isIntrinsic","isLeakedObject","$GlobalObject","emitGlobalDelete","getRunningContext","isStrict","emitPropertyDelete","descValue","configurable","enumerable","writable","emitGlobalDeclaration","emitGlobalAssignment","emitDefineProperty","emitPropertyAssignment","leakDescriptor","leakValue","parentPermitsChildPropertyCreation","ownDesc","$GetOwnProperty","ownDescValue","mightHaveBeenDeleted","parent","$GetPrototypeOf","throwIfNotConcrete","PropertiesImplementation","V","Receiver","weakDeletion","existingBinding","isPartialObject","isSimpleObject","$Set","reportIntrospectionError","joinCondition","descriptor2","descriptor1","withCondition","evaluateForEffects","OrdinarySetHelper","compl1","gen1","bindings1","properties1","createdObj1","withInverseCondition","compl2","gen2","bindings2","properties2","createdObj2","joinedEffects","joinEffects","completion","composeWithSavedCompletion","applyEffects","ToBooleanPartial","existingDescriptor","binding","existingDescValue","valueDesc","$Delete","$DefineOwnProperty","CreateDataProperty","setter","Desc","obj","ObjectCreate","ObjectPrototype","getExtensible","size","success","createErrorThrowCompletion","TypeError","like","extensible","current","ValidateAndApplyPropertyDescriptor","jc","implies","createFromUnaryOp","mightNotBeTrue","ThrowIfMightHaveBeenDeleted","Object","keys","length","identical","field","dval","cval","currentValue","Properties","mightNotBeObject","mightBeObject","props","ToObject","$OwnPropertyKeys","descriptors","nextKey","propDesc","descObj","ToPropertyDescriptor","push","pair","DefinePropertyOrThrow","Throw","W","promoteEmptyToUndefined","ReferenceError","base","GetBase","IsUnresolvableReference","IsStrictReference","globalObj","Set","GetReferencedName","IsPropertyReference","HasPrimitiveBase","ToObjectPartial","succeeded","$SetPartial","GetReferencedNamePartial","referencedName","SetMutableBinding","A","DescValue","OrdinaryDefineOwnProperty","newLenDesc","assign","newLen","ToUint32","numberLen","ToNumber","RangeError","oldLenDesc","OrdinaryGetOwnProperty","oldLen","newWritable","oldLenCopy","Array","from","parseInt","x","filter","sort","reverse","deleteSucceeded","pname","getAsPropertyNameExpression","absVal","createTemporalFromBuildFunction","node","memberExpression","isIdentifier","useAbstractInterpretation","callReportPropertyAccess","D","X","kind","savedUnion","savedIndex","args","findIndex","e","realmGenerator","derive","types","values","getBuildNode","$Prototype","p","done","visited","global","index","iterator","defineNativeMethod","proto","CreateIterResultObject","add","has","isNewObject","MethodDefinition","env","strictCode","methodDef","DefineMethod","SetFunctionName","$Closure","$Key","$HasComputedName","computed","propKey","strict","body","scope","closure","GeneratorFunctionCreate","params","MakeMethod","prototype","GeneratorPrototype","originalConstructor","formalParameterList","FunctionCreate"],"mappings":"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","file":"properties.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { AbruptCompletion, PossiblyNormalCompletion } from \"../completions.js\";\nimport { construct_empty_effects, type Realm } from \"../realm.js\";\nimport type { Descriptor, PropertyBinding, PropertyKeyValue } from \"../types.js\";\nimport {\n  ArrayValue,\n  UndefinedValue,\n  NumberValue,\n  SymbolValue,\n  NullValue,\n  BooleanValue,\n  ObjectValue,\n  StringValue,\n  Value,\n  ConcreteValue,\n  AbstractValue,\n  AbstractObjectValue,\n} from \"../values/index.js\";\nimport { EvalPropertyName } from \"../evaluators/ObjectExpression\";\nimport { EnvironmentRecord, Reference } from \"../environment.js\";\nimport { FatalError } from \"../errors.js\";\nimport invariant from \"../invariant.js\";\nimport {\n  Call,\n  cloneDescriptor,\n  equalDescriptors,\n  Get,\n  GetGlobalObject,\n  GetThisValue,\n  HasSomeCompatibleType,\n  IsAccessorDescriptor,\n  IsDataDescriptor,\n  IsGenericDescriptor,\n  IsPropertyKey,\n  MakeConstructor,\n  SameValue,\n  SameValuePartial,\n} from \"../methods/index.js\";\nimport { type BabelNodeObjectMethod, type BabelNodeClassMethod, isValidIdentifier } from \"babel-types\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport { Create, Environment, Functions, Join, Leak, Path, To } from \"../singletons.js\";\nimport IsStrict from \"../utils/strict.js\";\nimport * as t from \"babel-types\";\n\nfunction StringKey(key: PropertyKeyValue): string {\n  if (key instanceof StringValue) key = key.value;\n  if (typeof key !== \"string\") {\n    // The generator currently only supports string keys.\n    throw new FatalError();\n  }\n  return key;\n}\n\nfunction InternalDescriptorPropertyToValue(realm: Realm, value: void | boolean | Value) {\n  if (value === undefined) return realm.intrinsics.undefined;\n  if (typeof value === \"boolean\") return new BooleanValue(realm, value);\n  invariant(value instanceof Value);\n  return value;\n}\n\nfunction InternalGetPropertiesKey(P: PropertyKeyValue): string | SymbolValue | void {\n  if (typeof P === \"string\") {\n    return P;\n  } else if (P instanceof StringValue) {\n    return P.value;\n  } else if (P instanceof SymbolValue) {\n    return P;\n  }\n  // otherwise, undefined\n}\n\nfunction InternalGetPropertiesMap(O: ObjectValue, P: PropertyKeyValue): Map<any, PropertyBinding> {\n  if (typeof P === \"string\" || P instanceof StringValue) {\n    return O.properties;\n  } else if (P instanceof SymbolValue) {\n    return O.symbols;\n  } else {\n    invariant(false);\n  }\n}\n\nfunction InternalSetProperty(realm: Realm, O: ObjectValue, P: PropertyKeyValue, desc: Descriptor) {\n  let map = InternalGetPropertiesMap(O, P);\n  let key = InternalGetPropertiesKey(P);\n  let propertyBinding = map.get(key);\n  if (propertyBinding === undefined) {\n    propertyBinding = { descriptor: undefined, object: O, key: key };\n    map.set(key, propertyBinding);\n  }\n  realm.recordModifiedProperty(propertyBinding);\n  propertyBinding.descriptor = desc;\n}\n\nfunction InternalUpdatedProperty(realm: Realm, O: ObjectValue, P: PropertyKeyValue, oldDesc?: Descriptor) {\n  let generator = realm.generator;\n  if (!generator) return;\n  if (!O.isIntrinsic()) return;\n  if (P instanceof SymbolValue) return;\n  if (P instanceof StringValue) P = P.value;\n  invariant(!O.isLeakedObject()); // leaked objects are never updated\n  invariant(typeof P === \"string\");\n  let propertyBinding = InternalGetPropertiesMap(O, P).get(P);\n  invariant(propertyBinding !== undefined); // The callers ensure this\n  let desc = propertyBinding.descriptor;\n  if (desc === undefined) {\n    // The property is being deleted\n    if (O === realm.$GlobalObject) {\n      generator.emitGlobalDelete(P, realm.getRunningContext().isStrict);\n    } else {\n      generator.emitPropertyDelete(O, P);\n    }\n  } else {\n    let descValue = desc.value || realm.intrinsics.undefined;\n    invariant(descValue instanceof Value);\n    if (oldDesc === undefined) {\n      // The property is being created\n      if (O === realm.$GlobalObject) {\n        if (IsDataDescriptor(realm, desc)) {\n          if (isValidIdentifier(P) && !desc.configurable && desc.enumerable && desc.writable) {\n            generator.emitGlobalDeclaration(P, descValue);\n          } else if (desc.configurable && desc.enumerable && desc.writable) {\n            generator.emitGlobalAssignment(P, descValue, realm.getRunningContext().isStrict);\n          } else {\n            generator.emitDefineProperty(O, P, desc);\n          }\n        } else {\n          generator.emitDefineProperty(O, P, desc);\n        }\n      } else {\n        if (IsDataDescriptor(realm, desc) && desc.configurable && desc.enumerable && desc.writable) {\n          generator.emitPropertyAssignment(O, P, descValue);\n        } else {\n          generator.emitDefineProperty(O, P, desc);\n        }\n      }\n    } else {\n      // The property is being modified\n      if (equalDescriptors(desc, oldDesc)) {\n        // only the value is being modified\n        if (O === realm.$GlobalObject) {\n          generator.emitGlobalAssignment(P, descValue, realm.getRunningContext().isStrict);\n        } else {\n          generator.emitPropertyAssignment(O, P, descValue);\n        }\n      } else {\n        generator.emitDefineProperty(O, P, desc, /*isDescChanged*/ true);\n      }\n    }\n  }\n}\n\nfunction leakDescriptor(realm: Realm, desc: Descriptor) {\n  if (desc.value) {\n    invariant(desc.value instanceof Value, \"internal fields should not leak\");\n    Leak.leakValue(realm, desc.value);\n  }\n  if (desc.get) {\n    Leak.leakValue(realm, desc.get);\n  }\n  if (desc.set) {\n    Leak.leakValue(realm, desc.set);\n  }\n}\n\n// Determines if an object with parent O may create its own property P.\nfunction parentPermitsChildPropertyCreation(realm: Realm, O: ObjectValue, P: PropertyKeyValue): boolean {\n  let ownDesc = O.$GetOwnProperty(P);\n  let ownDescValue = !ownDesc\n    ? realm.intrinsics.undefined\n    : ownDesc.value === undefined ? realm.intrinsics.undefined : ownDesc.value;\n  invariant(ownDescValue instanceof Value);\n\n  if (!ownDesc || ownDescValue.mightHaveBeenDeleted()) {\n    // O might not object, so first ask its parent\n    let parent = O.$GetPrototypeOf();\n    parent.throwIfNotConcrete(); //TODO #1016: deal with abstract parents\n    if (!(parent instanceof NullValue)) {\n      if (!parentPermitsChildPropertyCreation(realm, parent, P)) return false;\n    }\n\n    // Parent is OK, so if O does not object return true\n    if (!ownDesc) return true; // O has no opinion of its ownDesc\n  }\n  invariant(ownDesc !== undefined);\n\n  // O might have a property P and so might object\n  if (IsDataDescriptor(realm, ownDesc)) {\n    if (ownDesc.writable) {\n      // The grand parent does not object so it is OK that parent does not have P\n      // If parent does have P, it is also OK because it is a writable data property\n      return true;\n    }\n  }\n  // If parent does not have property P, this is too pessimistic, but that is\n  // the caller's problem.\n  return false;\n}\n\nexport class PropertiesImplementation {\n  // ECMA262 9.1.9.1\n  OrdinarySet(realm: Realm, O: ObjectValue, P: PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    if (O.isLeakedObject()) {\n      Leak.leakValue(realm, V);\n      if (realm.generator) {\n        realm.generator.emitPropertyAssignment(O, StringKey(P), V);\n      }\n      return true;\n    }\n\n    let weakDeletion = V.mightHaveBeenDeleted();\n\n    // 1. Assert: IsPropertyKey(P) is true.\n    invariant(IsPropertyKey(realm, P), \"expected property key\");\n\n    // 2. Let ownDesc be ? O.[[GetOwnProperty]](P).\n    let ownDesc;\n    let existingBinding = InternalGetPropertiesMap(O, P).get(InternalGetPropertiesKey(P));\n    if (existingBinding !== undefined || !(O.isPartialObject() && O.isSimpleObject())) ownDesc = O.$GetOwnProperty(P);\n    let ownDescValue = !ownDesc\n      ? realm.intrinsics.undefined\n      : ownDesc.value === undefined ? realm.intrinsics.undefined : ownDesc.value;\n    invariant(ownDescValue instanceof Value);\n\n    // 3. If ownDesc is undefined (or might be), then\n    if (!ownDesc || ownDescValue.mightHaveBeenDeleted()) {\n      // a. Let parent be ? O.[[GetPrototypeOf]]().\n      let parent = O.$GetPrototypeOf();\n      parent.throwIfNotConcrete(); //TODO #1016: deal with abstract parents\n\n      // b. If parent is not null, then\n      if (!(parent instanceof NullValue)) {\n        if (!ownDesc) {\n          // i. Return ? parent.[[Set]](P, V, Receiver).\n          return parent.$Set(P, V, Receiver);\n        }\n        // But since we don't know if O has its own property P, the parent might\n        // actually have a say. Give up, unless the parent would be OK with it.\n        if (!parentPermitsChildPropertyCreation(realm, parent, P)) {\n          invariant(ownDescValue instanceof AbstractValue);\n          AbstractValue.reportIntrospectionError(ownDescValue);\n          throw new FatalError();\n        }\n        // Since the parent is OK with us creating a local property for O\n        // we can carry on as if there were no parent.\n      }\n\n      // i. Let ownDesc be the PropertyDescriptor{[[Value]]: undefined, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}.\n      if (!ownDesc)\n        ownDesc = ({\n          value: realm.intrinsics.undefined,\n          writable: true,\n          enumerable: true,\n          configurable: true,\n        }: any);\n    }\n\n    // joined descriptors need special treatment\n    let joinCondition = ownDesc.joinCondition;\n    if (joinCondition !== undefined) {\n      let descriptor2 = ownDesc.descriptor2;\n      ownDesc = ownDesc.descriptor1;\n      let [compl1, gen1, bindings1, properties1, createdObj1] = Path.withCondition(joinCondition, () => {\n        return ownDesc !== undefined\n          ? realm.evaluateForEffects(() => new BooleanValue(realm, OrdinarySetHelper()))\n          : construct_empty_effects(realm);\n      });\n      ownDesc = descriptor2;\n      let [compl2, gen2, bindings2, properties2, createdObj2] = Path.withInverseCondition(joinCondition, () => {\n        return ownDesc !== undefined\n          ? realm.evaluateForEffects(() => new BooleanValue(realm, OrdinarySetHelper()))\n          : construct_empty_effects(realm);\n      });\n\n      // Join the effects, creating an abstract view of what happened, regardless\n      // of the actual value of ownDesc.joinCondition.\n      let joinedEffects = Join.joinEffects(\n        realm,\n        joinCondition,\n        [compl1, gen1, bindings1, properties1, createdObj1],\n        [compl2, gen2, bindings2, properties2, createdObj2]\n      );\n      let completion = joinedEffects[0];\n      if (completion instanceof PossiblyNormalCompletion) {\n        // in this case one of the branches may complete abruptly, which means that\n        // not all control flow branches join into one flow at this point.\n        // Consequently we have to continue tracking changes until the point where\n        // all the branches come together into one.\n        completion = realm.composeWithSavedCompletion(completion);\n      }\n      // Note that the effects of (non joining) abrupt branches are not included\n      // in joinedEffects, but are tracked separately inside completion.\n      realm.applyEffects(joinedEffects);\n\n      // return or throw completion\n      if (completion instanceof AbruptCompletion) throw completion;\n      invariant(completion instanceof Value);\n      return To.ToBooleanPartial(realm, completion);\n    }\n\n    return OrdinarySetHelper();\n\n    function OrdinarySetHelper(): boolean {\n      invariant(ownDesc !== undefined);\n      invariant(ownDescValue instanceof Value);\n      // 4. If IsDataDescriptor(ownDesc) is true, then\n      if (IsDataDescriptor(realm, ownDesc)) {\n        // a. If ownDesc.[[Writable]] is false, return false.\n        if (!ownDesc.writable && !weakDeletion) {\n          // The write will fail if the property actually exists\n          if (ownDescValue.mightHaveBeenDeleted()) {\n            // But maybe it does not and thus would succeed.\n            // Since we don't know what will happen, give up for now.\n            invariant(ownDescValue instanceof AbstractValue);\n            AbstractValue.reportIntrospectionError(ownDescValue);\n            throw new FatalError();\n          }\n          return false;\n        }\n\n        // b. If Type(Receiver) is not Object, return false.\n        Receiver = Receiver.throwIfNotConcrete();\n        if (!(Receiver instanceof ObjectValue)) return false;\n\n        // c. Let existingDescriptor be ? Receiver.[[GetOwnProperty]](P).\n        let existingDescriptor;\n        let binding = InternalGetPropertiesMap(Receiver, P).get(InternalGetPropertiesKey(P));\n        if (binding !== undefined || !(Receiver.isPartialObject() && Receiver.isSimpleObject()))\n          existingDescriptor = Receiver.$GetOwnProperty(P);\n        if (existingDescriptor !== undefined) {\n          if (existingDescriptor.descriptor1 === ownDesc) existingDescriptor = ownDesc;\n          else if (existingDescriptor.descriptor2 === ownDesc) existingDescriptor = ownDesc;\n        }\n        let existingDescValue = !existingDescriptor\n          ? realm.intrinsics.undefined\n          : existingDescriptor.value === undefined ? realm.intrinsics.undefined : existingDescriptor.value;\n        invariant(existingDescValue instanceof Value);\n\n        // d. If existingDescriptor is not undefined, then\n        if (existingDescriptor !== undefined) {\n          // i. If IsAccessorDescriptor(existingDescriptor) is true, return false.\n          if (IsAccessorDescriptor(realm, existingDescriptor)) {\n            invariant(\n              !existingDescValue.mightHaveBeenDeleted(),\n              \"should not fail until weak deletes of accessors are suppported\"\n            );\n            return false;\n          }\n\n          // ii. If existingDescriptor.[[Writable]] is false, return false.\n          if (!existingDescriptor.writable && !(weakDeletion && existingDescriptor.configurable)) {\n            // If we are not sure the receiver actually has a property P we can't just return false here.\n            if (existingDescValue.mightHaveBeenDeleted()) {\n              invariant(existingDescValue instanceof AbstractValue);\n              AbstractValue.reportIntrospectionError(existingDescValue);\n              throw new FatalError();\n            }\n            return false;\n          }\n\n          // iii. Let valueDesc be the PropertyDescriptor{[[Value]]: V}.\n          let valueDesc = { value: V };\n\n          // iv. Return ? Receiver.[[DefineOwnProperty]](P, valueDesc).\n          if (weakDeletion || existingDescValue.mightHaveBeenDeleted()) {\n            // At this point we are not actually sure that Receiver actually has\n            // a property P, however, if it has, we are sure that its a data property,\n            // and that redefining the property with valueDesc will not change the\n            // attributes of the property, so we delete it to make things nice for $DefineOwnProperty.\n            Receiver.$Delete(P);\n            valueDesc = existingDescriptor;\n            valueDesc.value = V;\n          }\n          return Receiver.$DefineOwnProperty(P, valueDesc);\n        } else {\n          // e. Else Receiver does not currently have a property P,\n\n          // i. Return ? CreateDataProperty(Receiver, P, V).\n          return Create.CreateDataProperty(realm, Receiver, P, V);\n        }\n      }\n\n      // 5. Assert: IsAccessorDescriptor(ownDesc) is true.\n      invariant(IsAccessorDescriptor(realm, ownDesc), \"expected accessor\");\n\n      // 6. Let setter be ownDesc.[[Set]].\n      let setter = \"set\" in ownDesc ? ownDesc.set : undefined;\n\n      // 7. If setter is undefined, return false.\n      if (!setter || setter instanceof UndefinedValue) return false;\n\n      // 8. Perform ? Call(setter, Receiver, « V »).\n      Call(realm, setter.throwIfNotConcrete(), Receiver, [V]);\n\n      // 9. Return true.\n      return true;\n    }\n  }\n\n  // ECMA262 6.2.4.4\n  FromPropertyDescriptor(realm: Realm, Desc: ?Descriptor): Value {\n    // 1. If Desc is undefined, return undefined.\n    if (!Desc) return realm.intrinsics.undefined;\n\n    // 2. Let obj be ObjectCreate(%ObjectPrototype%).\n    let obj = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n\n    // 3. Assert: obj is an extensible ordinary object with no own properties.\n    invariant(obj.getExtensible(), \"expected an extensible object\");\n    invariant(!obj.properties.size, \"expected an object with no own properties\");\n\n    // 4. If Desc has a [[Value]] field, then\n    let success = true;\n    if (\"value\" in Desc) {\n      invariant(Desc.value instanceof Value);\n      // a. Perform CreateDataProperty(obj, \"value\", Desc.[[Value]]).\n      success = Create.CreateDataProperty(realm, obj, \"value\", Desc.value) && success;\n    }\n\n    // 5. If Desc has a [[Writable]] field, then\n    if (\"writable\" in Desc) {\n      invariant(Desc.writable !== undefined);\n      // a. Perform CreateDataProperty(obj, \"writable\", Desc.[[Writable]]).\n      success = Create.CreateDataProperty(realm, obj, \"writable\", new BooleanValue(realm, Desc.writable)) && success;\n    }\n\n    // 6. If Desc has a [[Get]] field, then\n    if (\"get\" in Desc) {\n      invariant(Desc.get !== undefined);\n      // a. Perform CreateDataProperty(obj, \"get\", Desc.[[Get]]).\n      success = Create.CreateDataProperty(realm, obj, \"get\", Desc.get) && success;\n    }\n\n    // 7. If Desc has a [[Set]] field, then\n    if (\"set\" in Desc) {\n      invariant(Desc.set !== undefined);\n      // a. Perform CreateDataProperty(obj, \"set\", Desc.[[Set]]).\n      success = Create.CreateDataProperty(realm, obj, \"set\", Desc.set) && success;\n    }\n\n    // 8. If Desc has an [[Enumerable]] field, then\n    if (\"enumerable\" in Desc) {\n      invariant(Desc.enumerable !== undefined);\n      // a. Perform CreateDataProperty(obj, \"enumerable\", Desc.[[Enumerable]]).\n      success =\n        Create.CreateDataProperty(realm, obj, \"enumerable\", new BooleanValue(realm, Desc.enumerable)) && success;\n    }\n\n    // 9. If Desc has a [[Configurable]] field, then\n    if (\"configurable\" in Desc) {\n      invariant(Desc.configurable !== undefined);\n      // a. Perform CreateDataProperty(obj, \"configurable\", Desc.[[Configurable]]).\n      success =\n        Create.CreateDataProperty(realm, obj, \"configurable\", new BooleanValue(realm, Desc.configurable)) && success;\n    }\n\n    // 10. Assert: all of the above CreateDataProperty operations return true.\n    invariant(success, \"fails to create data property\");\n\n    // 11. Return obj.\n    return obj;\n  }\n\n  //\n  OrdinaryDelete(realm: Realm, O: ObjectValue, P: PropertyKeyValue): boolean {\n    // 1. Assert: IsPropertyKey(P) is true.\n    invariant(IsPropertyKey(realm, P), \"expected a property key\");\n\n    // 2. Let desc be ? O.[[GetOwnProperty]](P).\n    let desc = O.$GetOwnProperty(P);\n\n    // 3. If desc is undefined, return true.\n    if (!desc) {\n      if (O.isLeakedObject()) {\n        if (realm.generator) {\n          realm.generator.emitPropertyDelete(O, StringKey(P));\n        }\n      }\n      return true;\n    }\n\n    // 4. If desc.[[Configurable]] is true, then\n    if (desc.configurable) {\n      if (O.isLeakedObject()) {\n        if (realm.generator) {\n          realm.generator.emitPropertyDelete(O, StringKey(P));\n        }\n        return true;\n      }\n\n      // a. Remove the own property with name P from O.\n      let key = InternalGetPropertiesKey(P);\n      let map = InternalGetPropertiesMap(O, P);\n      let propertyBinding = map.get(key);\n      invariant(propertyBinding !== undefined);\n      realm.recordModifiedProperty(propertyBinding);\n      propertyBinding.descriptor = undefined;\n      InternalUpdatedProperty(realm, O, P, desc);\n\n      // b. Return true.\n      return true;\n    }\n\n    // 5. Return false.\n    return false;\n  }\n\n  // ECMA262 7.3.8\n  DeletePropertyOrThrow(realm: Realm, O: ObjectValue, P: PropertyKeyValue): boolean {\n    // 1. Assert: Type(O) is Object.\n    invariant(O instanceof ObjectValue, \"expected an object\");\n\n    // 2. Assert: IsPropertyKey(P) is true.\n    invariant(IsPropertyKey(realm, P), \"expected a property key\");\n\n    // 3. Let success be ? O.[[Delete]](P).\n    let success = O.$Delete(P);\n\n    // 4. If success is false, throw a TypeError exception.\n    if (!success) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"couldn't delete property\");\n    }\n\n    // 5. Return success.\n    return success;\n  }\n\n  // ECMA262 6.2.4.6\n  CompletePropertyDescriptor(realm: Realm, Desc: Descriptor): Descriptor {\n    // 1. Assert: Desc is a Property Descriptor.\n\n    // 2. Let like be Record{[[Value]]: undefined, [[Writable]]: false, [[Get]]: undefined, [[Set]]: undefined, [[Enumerable]]: false, [[Configurable]]: false}.\n    let like = {\n      value: realm.intrinsics.undefined,\n      get: realm.intrinsics.undefined,\n      set: realm.intrinsics.undefined,\n      writable: false,\n      enumerable: false,\n      configurable: false,\n    };\n\n    // 3. If either IsGenericDescriptor(Desc) or IsDataDescriptor(Desc) is true, then\n    if (IsGenericDescriptor(realm, Desc) || IsDataDescriptor(realm, Desc)) {\n      // a. If Desc does not have a [[Value]] field, set Desc.[[Value]] to like.[[Value]].\n      if (!(\"value\" in Desc)) Desc.value = like.value;\n      // b. If Desc does not have a [[Writable]] field, set Desc.[[Writable]] to like.[[Writable]].\n      if (!(\"writable\" in Desc)) Desc.writable = like.writable;\n    } else {\n      // 4. Else,\n      // a. If Desc does not have a [[Get]] field, set Desc.[[Get]] to like.[[Get]].\n      if (!(\"get\" in Desc)) Desc.get = like.get;\n      // b. If Desc does not have a [[Set]] field, set Desc.[[Set]] to like.[[Set]].\n      if (!(\"set\" in Desc)) Desc.set = like.set;\n    }\n\n    // 5. If Desc does not have an [[Enumerable]] field, set Desc.[[Enumerable]] to like.[[Enumerable]].\n    if (!(\"enumerable\" in Desc)) Desc.enumerable = like.enumerable;\n\n    // 6. If Desc does not have a [[Configurable]] field, set Desc.[[Configurable]] to like.[[Configurable]].\n    if (!(\"configurable\" in Desc)) Desc.configurable = like.configurable;\n\n    // 7. Return Desc.\n    return Desc;\n  }\n\n  // ECMA262 9.1.6.2\n  IsCompatiblePropertyDescriptor(realm: Realm, extensible: boolean, Desc: Descriptor, current: ?Descriptor): boolean {\n    // 1. Return ValidateAndApplyPropertyDescriptor(undefined, undefined, Extensible, Desc, Current).\n    return this.ValidateAndApplyPropertyDescriptor(realm, undefined, undefined, extensible, Desc, current);\n  }\n\n  // ECMA262 9.1.6.3\n  ValidateAndApplyPropertyDescriptor(\n    realm: Realm,\n    O: void | ObjectValue,\n    P: void | PropertyKeyValue,\n    extensible: boolean,\n    Desc: Descriptor,\n    current: ?Descriptor\n  ): boolean {\n    // 1. Assert: If O is not undefined, then IsPropertyKey(P) is true.\n    if (O !== undefined) {\n      invariant(P !== undefined);\n      invariant(IsPropertyKey(realm, P));\n    }\n\n    if (current && current.joinCondition !== undefined) {\n      let jc = current.joinCondition;\n      if (Path.implies(jc)) current = current.descriptor1;\n      else if (!AbstractValue.createFromUnaryOp(realm, \"!\", jc, true).mightNotBeTrue()) current = current.descriptor2;\n    }\n\n    // 2. If current is undefined, then\n    if (!current) {\n      // a. If extensible is false, return false.\n      if (!extensible) return false;\n\n      // b. Assert: extensible is true.\n      invariant(extensible === true, \"expected extensible to be true\");\n\n      if (O !== undefined && O.isLeakedObject() && P !== undefined) {\n        leakDescriptor(realm, Desc);\n        if (realm.generator) {\n          realm.generator.emitDefineProperty(O, StringKey(P), Desc);\n        }\n        return true;\n      }\n\n      // c. If IsGenericDescriptor(Desc) is true or IsDataDescriptor(Desc) is true, then\n      if (IsGenericDescriptor(realm, Desc) || IsDataDescriptor(realm, Desc)) {\n        // i. If O is not undefined, create an own data property named P of object O whose [[Value]],\n        //    [[Writable]], [[Enumerable]] and [[Configurable]] attribute values are described by Desc. If the\n        //    value of an attribute field of Desc is absent, the attribute of the newly created property is set\n        //    to its default value.\n        if (O !== undefined) {\n          invariant(P !== undefined);\n          InternalSetProperty(realm, O, P, {\n            value: \"value\" in Desc ? Desc.value : realm.intrinsics.undefined,\n            writable: \"writable\" in Desc ? Desc.writable : false,\n            enumerable: \"enumerable\" in Desc ? Desc.enumerable : false,\n            configurable: \"configurable\" in Desc ? Desc.configurable : false,\n          });\n          InternalUpdatedProperty(realm, O, P, undefined);\n        }\n      } else {\n        // d. Else Desc must be an accessor Property Descriptor,\n        // i. If O is not undefined, create an own accessor property named P of object O whose [[Get]],\n        //    [[Set]], [[Enumerable]] and [[Configurable]] attribute values are described by Desc. If the value\n        //    of an attribute field of Desc is absent, the attribute of the newly created property is set to its\n        //    default value.\n        if (O !== undefined) {\n          invariant(P !== undefined);\n          InternalSetProperty(realm, O, P, {\n            get: \"get\" in Desc ? Desc.get : realm.intrinsics.undefined,\n            set: \"set\" in Desc ? Desc.set : realm.intrinsics.undefined,\n            enumerable: \"enumerable\" in Desc ? Desc.enumerable : false,\n            configurable: \"configurable\" in Desc ? Desc.configurable : false,\n          });\n          InternalUpdatedProperty(realm, O, P, undefined);\n        }\n      }\n\n      // e. Return true.\n      return true;\n    }\n    this.ThrowIfMightHaveBeenDeleted(current.value);\n\n    // 3. Return true, if every field in Desc is absent.\n    if (!Object.keys(Desc).length) return true;\n\n    // 4. Return true, if every field in Desc also occurs in current and the value of every field in Desc is the\n    // same value as the corresponding field in current when compared using the SameValue algorithm.\n    let identical = true;\n    for (let field in Desc) {\n      if (!(field in current)) {\n        identical = false;\n      } else {\n        let dval = InternalDescriptorPropertyToValue(realm, Desc[field]);\n        let cval = InternalDescriptorPropertyToValue(realm, current[field]);\n        if (dval instanceof ConcreteValue && cval instanceof ConcreteValue) identical = SameValue(realm, dval, cval);\n        else {\n          identical = dval === cval;\n          // This might be false now but true at runtime. This does not\n          // matter because the logic for non identical values will still\n          // do the right thing in the cases below that does not blow up\n          // when dealing with an abstract value.\n        }\n      }\n      if (!identical) break;\n    }\n    if (identical) {\n      return true;\n    }\n\n    // 5. If the [[Configurable]] field of current is false, then\n    if (!current.configurable) {\n      // a. Return false, if the [[Configurable]] field of Desc is true.\n      if (Desc.configurable) return false;\n\n      // b. Return false, if the [[Enumerable]] field of Desc is present and the [[Enumerable]] fields of current and Desc are the Boolean negation of each other.\n      if (\"enumerable\" in Desc && Desc.enumerable !== current.enumerable) {\n        return false;\n      }\n    }\n\n    if (O !== undefined && O.isLeakedObject() && P !== undefined) {\n      leakDescriptor(realm, Desc);\n      if (realm.generator) {\n        realm.generator.emitDefineProperty(O, StringKey(P), Desc);\n      }\n      return true;\n    }\n\n    let oldDesc = current;\n    current = cloneDescriptor(current);\n    invariant(current !== undefined);\n\n    // 6. If IsGenericDescriptor(Desc) is true, no further validation is required.\n    if (IsGenericDescriptor(realm, Desc)) {\n    } else if (IsDataDescriptor(realm, current) !== IsDataDescriptor(realm, Desc)) {\n      // 7. Else if IsDataDescriptor(current) and IsDataDescriptor(Desc) have different results, then\n      // a. Return false, if the [[Configurable]] field of current is false.\n      if (!current.configurable) return false;\n\n      // b. If IsDataDescriptor(current) is true, then\n      if (IsDataDescriptor(realm, current)) {\n        // i. If O is not undefined, convert the property named P of object O from a data property to an accessor property.\n        // Preserve the existing values of the converted property's [[Configurable]] and [[Enumerable]] attributes and set the rest of the property's attributes to their default values.\n        if (O !== undefined) {\n          invariant(P !== undefined);\n          let key = InternalGetPropertiesKey(P);\n          let propertyBinding = InternalGetPropertiesMap(O, P).get(key);\n          invariant(propertyBinding !== undefined);\n          delete current.writable;\n          delete current.value;\n          current.get = realm.intrinsics.undefined;\n          current.set = realm.intrinsics.undefined;\n        }\n      } else {\n        // c. Else,\n        // i. If O is not undefined, convert the property named P of object O from an accessor property to a data property. Preserve the existing values of the converted property's [[Configurable]] and [[Enumerable]] attributes and set the rest of the property's attributes to their default values.\n        if (O !== undefined) {\n          invariant(P !== undefined);\n          let key = InternalGetPropertiesKey(P);\n          let propertyBinding = InternalGetPropertiesMap(O, P).get(key);\n          invariant(propertyBinding !== undefined);\n          delete current.get;\n          delete current.set;\n          current.writable = false;\n          current.value = realm.intrinsics.undefined;\n        }\n      }\n    } else if (IsDataDescriptor(realm, current) && IsDataDescriptor(realm, Desc)) {\n      // 8. Else if IsDataDescriptor(current) and IsDataDescriptor(Desc) are both true, then\n      // a. If the [[Configurable]] field of current is false, then\n      if (!current.configurable) {\n        // i. Return false, if the [[Writable]] field of current is false and the [[Writable]] field of Desc is true.\n        if (!current.writable && Desc.writable) return false;\n\n        // ii. If the [[Writable]] field of current is false, then\n        if (!current.writable) {\n          // 1. Return false, if the [[Value]] field of Desc is present and SameValue(Desc.[[Value]], current.[[Value]]) is false.\n          let descValue = Desc.value || realm.intrinsics.undefined;\n          invariant(descValue instanceof Value);\n          let currentValue = current.value || realm.intrinsics.undefined;\n          invariant(currentValue instanceof Value);\n          if (Desc.value && !SameValuePartial(realm, descValue, currentValue)) {\n            return false;\n          }\n        }\n      } else {\n        // b. Else the [[Configurable]] field of current is true, so any change is acceptable.\n      }\n    } else {\n      // 9. Else IsAccessorDescriptor(current) and IsAccessorDescriptor(Desc) are both true,\n      // a. If the [[Configurable]] field of current is false, then\n      if (!current.configurable) {\n        // i. Return false, if the [[Set]] field of Desc is present and SameValue(Desc.[[Set]], current.[[Set]]) is false.\n        if (Desc.set && !SameValuePartial(realm, Desc.set, current.set || realm.intrinsics.undefined)) return false;\n\n        // ii. Return false, if the [[Get]] field of Desc is present and SameValue(Desc.[[Get]], current.[[Get]]) is false.\n        if (Desc.get && !SameValuePartial(realm, Desc.get, current.get || realm.intrinsics.undefined)) return false;\n      }\n    }\n\n    // 10. If O is not undefined, then\n    if (O !== undefined) {\n      invariant(P !== undefined);\n      let key = InternalGetPropertiesKey(P);\n      let map = InternalGetPropertiesMap(O, P);\n      let propertyBinding = map.get(key);\n      if (propertyBinding === undefined) {\n        propertyBinding = { descriptor: undefined, object: O, key: key };\n        realm.recordModifiedProperty(propertyBinding);\n        propertyBinding.descriptor = current;\n        map.set(key, propertyBinding);\n      } else if (propertyBinding.descriptor === undefined) {\n        realm.recordModifiedProperty(propertyBinding);\n        propertyBinding.descriptor = current;\n      } else {\n        realm.recordModifiedProperty(propertyBinding);\n        propertyBinding.descriptor = current;\n      }\n\n      // a. For each field of Desc that is present, set the corresponding attribute of the property named P of\n      //    object O to the value of the field.\n      for (let field in Desc) current[field] = Desc[field];\n      InternalUpdatedProperty(realm, O, P, oldDesc);\n    }\n\n    // 11. Return true.\n    return true;\n  }\n\n  // ECMA262 9.1.6.1\n  OrdinaryDefineOwnProperty(realm: Realm, O: ObjectValue, P: PropertyKeyValue, Desc: Descriptor): boolean {\n    invariant(O instanceof ObjectValue);\n\n    // 1. Let current be ? O.[[GetOwnProperty]](P).\n    let current;\n    let binding = InternalGetPropertiesMap(O, P).get(InternalGetPropertiesKey(P));\n    if (binding !== undefined || !(O.isPartialObject() && O.isSimpleObject())) current = O.$GetOwnProperty(P);\n\n    // 2. Let extensible be the value of the [[Extensible]] internal slot of O.\n    let extensible = O.getExtensible();\n\n    // 3. Return ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc, current).\n    return this.ValidateAndApplyPropertyDescriptor(realm, O, P, extensible, Desc, current);\n  }\n\n  // ECMA262 19.1.2.3.1\n  ObjectDefineProperties(realm: Realm, O: Value, Properties: Value): ObjectValue | AbstractObjectValue {\n    // 1. If Type(O) is not Object, throw a TypeError exception.\n    if (O.mightNotBeObject()) {\n      if (O.mightBeObject()) O.throwIfNotConcrete();\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n    invariant(O instanceof ObjectValue || O instanceof AbstractObjectValue);\n\n    // 2. Let props be ? ToObject(Properties).\n    let props = To.ToObject(realm, Properties.throwIfNotConcrete());\n\n    // 3. Let keys be ? props.[[OwnPropertyKeys]]().\n    let keys = props.$OwnPropertyKeys();\n\n    // 4. Let descriptors be a new empty List.\n    let descriptors = [];\n\n    // 5. Repeat for each element nextKey of keys in List order,\n    for (let nextKey of keys) {\n      // a. Let propDesc be ? props.[[GetOwnProperty]](nextKey).\n      let propDesc = props.$GetOwnProperty(nextKey);\n\n      // b. If propDesc is not undefined and propDesc.[[Enumerable]] is true, then\n      if (propDesc && propDesc.enumerable) {\n        this.ThrowIfMightHaveBeenDeleted(propDesc.value);\n\n        // i. Let descObj be ? Get(props, nextKey).\n        let descObj = Get(realm, props, nextKey);\n\n        // ii. Let desc be ? ToPropertyDescriptor(descObj).\n        let desc = To.ToPropertyDescriptor(realm, descObj);\n\n        // iii. Append the pair (a two element List) consisting of nextKey and desc to the end of descriptors.\n        descriptors.push([nextKey, desc]);\n      }\n    }\n\n    // 6. For each pair from descriptors in list order,\n    for (let pair of descriptors) {\n      // a. Let P be the first element of pair.\n      let P = pair[0];\n\n      // b. Let desc be the second element of pair.\n      let desc = pair[1];\n\n      // c. Perform ? DefinePropertyOrThrow(O, P, desc).\n      this.DefinePropertyOrThrow(realm, O, P, desc);\n    }\n\n    // 7. Return O.\n    return O;\n  }\n\n  // ECMA262 7.3.3\n  Set(realm: Realm, O: ObjectValue | AbstractObjectValue, P: PropertyKeyValue, V: Value, Throw: boolean): boolean {\n    // 1. Assert: Type(O) is Object.\n\n    // 2. Assert: IsPropertyKey(P) is true.\n    invariant(IsPropertyKey(realm, P), \"expected property key\");\n\n    // 3. Assert: Type(Throw) is Boolean.\n    invariant(typeof Throw === \"boolean\", \"expected boolean\");\n\n    // 4. Let success be ? O.[[Set]](P, V, O).\n    let success = O.$Set(P, V, O);\n\n    // 5. If success is false and Throw is true, throw a TypeError exception.\n    if (success === false && Throw === true) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 6. Return success.\n    return success;\n  }\n\n  // ECMA262 7.3.7\n  DefinePropertyOrThrow(\n    realm: Realm,\n    O: ObjectValue | AbstractObjectValue,\n    P: PropertyKeyValue,\n    desc: Descriptor\n  ): boolean {\n    // 1. Assert: Type(O) is Object.\n\n    // 2. Assert: IsPropertyKey(P) is true.\n    invariant(typeof P === \"string\" || IsPropertyKey(realm, P), \"expected property key\");\n\n    // 3. Let success be ? O.[[DefineOwnProperty]](P, desc).\n    let success = O.$DefineOwnProperty(P, desc);\n\n    // 4. If success is false, throw a TypeError exception.\n    if (success === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 5. Return success.\n    return success;\n  }\n\n  // ECMA262 6.2.3.2\n  PutValue(realm: Realm, V: Value | Reference, W: Value): void | boolean | Value {\n    W = W.promoteEmptyToUndefined();\n    // The following two steps are not necessary as we propagate completions with exceptions.\n    // 1. ReturnIfAbrupt(V).\n    // 2. ReturnIfAbrupt(W).\n\n    // 3. If Type(V) is not Reference, throw a ReferenceError exception.\n    if (!(V instanceof Reference)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.ReferenceError, \"can't put a value to a non-reference\");\n    }\n\n    // 4. Let base be GetBase(V).\n    let base = Environment.GetBase(realm, V);\n\n    // 5. If IsUnresolvableReference(V) is true, then\n    if (Environment.IsUnresolvableReference(realm, V)) {\n      // a. If IsStrictReference(V) is true, then\n      if (Environment.IsStrictReference(realm, V)) {\n        // i. Throw a ReferenceError exception.\n        throw realm.createErrorThrowCompletion(realm.intrinsics.ReferenceError);\n      }\n\n      // b. Let globalObj be GetGlobalObject().\n      let globalObj = GetGlobalObject(realm);\n\n      // c. Return ? Set(globalObj, GetReferencedName(V), W, false).\n      return this.Set(realm, globalObj, Environment.GetReferencedName(realm, V), W, false);\n    }\n\n    // 6. Else if IsPropertyReference(V) is true, then\n    if (Environment.IsPropertyReference(realm, V)) {\n      // a. If HasPrimitiveBase(V) is true, then\n      if (Environment.HasPrimitiveBase(realm, V)) {\n        // i. Assert: In realm case, base will never be null or undefined.\n        invariant(base instanceof Value && !HasSomeCompatibleType(base, UndefinedValue, NullValue));\n\n        // ii. Set base to ToObject(base).\n        base = To.ToObjectPartial(realm, base);\n      }\n      invariant(base instanceof ObjectValue || base instanceof AbstractObjectValue);\n\n      // b. Let succeeded be ? base.[[Set]](GetReferencedName(V), W, GetThisValue(V)).\n      let succeeded = base.$SetPartial(Environment.GetReferencedNamePartial(realm, V), W, GetThisValue(realm, V));\n\n      // c. If succeeded is false and IsStrictReference(V) is true, throw a TypeError exception.\n      if (succeeded === false && Environment.IsStrictReference(realm, V)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // d. Return.\n      return;\n    }\n\n    // 7. Else base must be an Environment Record,\n    if (base instanceof EnvironmentRecord) {\n      // a. Return ? base.SetMutableBinding(GetReferencedName(V), W, IsStrictReference(V)) (see 8.1.1).\n      let referencedName = Environment.GetReferencedName(realm, V);\n      invariant(typeof referencedName === \"string\");\n      return base.SetMutableBinding(referencedName, W, Environment.IsStrictReference(realm, V));\n    }\n\n    invariant(false);\n  }\n\n  // ECMA262 9.4.2.4\n  ArraySetLength(realm: Realm, A: ArrayValue, Desc: Descriptor): boolean {\n    // 1. If the [[Value]] field of Desc is absent, then\n    let DescValue = Desc.value;\n    if (!DescValue) {\n      // a. Return OrdinaryDefineOwnProperty(A, \"length\", Desc).\n      return this.OrdinaryDefineOwnProperty(realm, A, \"length\", Desc);\n    }\n    invariant(DescValue instanceof Value);\n\n    // 2. Let newLenDesc be a copy of Desc.\n    let newLenDesc = Object.assign({}, Desc);\n\n    // 3. Let newLen be ? ToUint32(Desc.[[Value]]).\n    let newLen = To.ToUint32(realm, DescValue);\n\n    // 4. Let numberLen be ? ToNumber(Desc.[[Value]]).\n    let numberLen = To.ToNumber(realm, DescValue);\n\n    // 5. If newLen ≠ numberLen, throw a RangeError exception.\n    if (newLen !== numberLen) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError, \"should be a uint\");\n    }\n\n    // 6. Set newLenDesc.[[Value]] to newLen.\n    newLenDesc.value = new NumberValue(realm, newLen);\n\n    // 7. Let oldLenDesc be OrdinaryGetOwnProperty(A, \"length\").\n    let oldLenDesc = this.OrdinaryGetOwnProperty(realm, A, \"length\");\n\n    // 8. Assert: oldLenDesc will never be undefined or an accessor descriptor because Array objects are created\n    //    with a length data property that cannot be deleted or reconfigured.\n    invariant(\n      oldLenDesc !== undefined && !IsAccessorDescriptor(realm, oldLenDesc),\n      \"cannot be undefined or an accessor descriptor\"\n    );\n\n    // 9. Let oldLen be oldLenDesc.[[Value]].\n    let oldLen = oldLenDesc.value;\n    invariant(oldLen instanceof Value);\n    oldLen = oldLen.throwIfNotConcrete();\n    invariant(oldLen instanceof NumberValue, \"should be a number\");\n    oldLen = (oldLen.value: number);\n\n    // 10. If newLen ≥ oldLen, then\n    if (newLen >= oldLen) {\n      // a. Return OrdinaryDefineOwnProperty(A, \"length\", newLenDesc).\n      return this.OrdinaryDefineOwnProperty(realm, A, \"length\", newLenDesc);\n    }\n\n    // 11. If oldLenDesc.[[Writable]] is false, return false.\n    if (!oldLenDesc.writable) return false;\n\n    // 12. If newLenDesc.[[Writable]] is absent or has the value true, let newWritable be true.\n    let newWritable;\n    if (!(\"writable\" in newLenDesc) || newLenDesc.writable === true) {\n      newWritable = true;\n    } else {\n      // 13. Else,\n      // a. Need to defer setting the [[Writable]] attribute to false in case any elements cannot be deleted.\n\n      // b. Let newWritable be false.\n      newWritable = false;\n\n      // c. Set newLenDesc.[[Writable]] to true.\n      newLenDesc.writable = true;\n    }\n\n    // 14. Let succeeded be ! OrdinaryDefineOwnProperty(A, \"length\", newLenDesc).\n    let succeeded = this.OrdinaryDefineOwnProperty(realm, A, \"length\", newLenDesc);\n\n    // 15. If succeeded is false, return false.\n    if (succeeded === false) return false;\n\n    // Here we diverge from the spec: instead of traversing all indices from\n    // oldLen to newLen, only the indices that are actually present are touched.\n    let oldLenCopy = oldLen;\n    let keys = Array.from(A.properties.keys())\n      .map(x => parseInt(x, 10))\n      .filter(x => newLen <= x && x <= oldLenCopy)\n      .sort()\n      .reverse();\n\n    // 16. While newLen < oldLen repeat,\n    for (let key of keys) {\n      // a. Set oldLen to oldLen - 1.\n      oldLen = key;\n\n      // b. Let deleteSucceeded be ! A.[[Delete]](! ToString(oldLen)).\n      let deleteSucceeded = A.$Delete(oldLen + \"\");\n\n      // c. If deleteSucceeded is false, then\n      if (deleteSucceeded === false) {\n        // i. Set newLenDesc.[[Value]] to oldLen + 1.\n        newLenDesc.value = new NumberValue(realm, oldLen + 1);\n\n        // ii. If newWritable is false, set newLenDesc.[[Writable]] to false.\n        if (newWritable === false) newLenDesc.writable = false;\n\n        // iii. Let succeeded be ! OrdinaryDefineOwnProperty(A, \"length\", newLenDesc).\n        succeeded = this.OrdinaryDefineOwnProperty(realm, A, \"length\", newLenDesc);\n\n        // iv. Return false.\n        return false;\n      }\n    }\n\n    // 17. If newWritable is false, then\n    if (!newWritable) {\n      // a. Return OrdinaryDefineOwnProperty(A, \"length\", PropertyDescriptor{[[Writable]]: false}). This call will always return true.\n      return this.OrdinaryDefineOwnProperty(realm, A, \"length\", {\n        writable: false,\n      });\n    }\n\n    // 18. Return true.\n    return true;\n  }\n\n  // ECMA262 9.1.5.1\n  OrdinaryGetOwnProperty(realm: Realm, O: ObjectValue, P: PropertyKeyValue): Descriptor | void {\n    if (O.isLeakedObject()) {\n      invariant(realm.generator);\n      let pname = realm.generator.getAsPropertyNameExpression(StringKey(P));\n      let absVal = AbstractValue.createTemporalFromBuildFunction(realm, Value, [O], ([node]) =>\n        t.memberExpression(node, pname, !t.isIdentifier(pname))\n      );\n      // TODO: We can't be sure what the descriptor will be, but the value will be abstract.\n      return { configurable: true, enumerable: true, value: absVal, writable: true };\n    }\n\n    // 1. Assert: IsPropertyKey(P) is true.\n    invariant(IsPropertyKey(realm, P), \"expected a property key\");\n\n    // 2. If O does not have an own property with key P, return undefined.\n    let existingBinding = InternalGetPropertiesMap(O, P).get(InternalGetPropertiesKey(P));\n    if (!existingBinding) {\n      if (O.isPartialObject()) {\n        invariant(realm.useAbstractInterpretation); // __makePartial will already have thrown an error if not\n        if (O.isSimpleObject()) {\n          if (P instanceof StringValue) P = P.value;\n          if (typeof P === \"string\") {\n            // In this case it is safe to defer the property access to runtime (at this point in time)\n            invariant(realm.generator);\n            let pname = realm.generator.getAsPropertyNameExpression(P);\n            let absVal = AbstractValue.createTemporalFromBuildFunction(realm, Value, [O], ([node]) =>\n              t.memberExpression(node, pname, !t.isIdentifier(pname))\n            );\n            return { configurable: true, enumerable: true, value: absVal, writable: true };\n          } else {\n            invariant(P instanceof SymbolValue);\n            // Simple objects don't have symbol properties\n            return undefined;\n          }\n        }\n        AbstractValue.reportIntrospectionError(O, P);\n        throw new FatalError();\n      }\n      return undefined;\n    }\n    realm.callReportPropertyAccess(existingBinding);\n    if (!existingBinding.descriptor) return undefined;\n\n    // 3. Let D be a newly created Property Descriptor with no fields.\n    let D = {};\n\n    // 4. Let X be O's own property whose key is P.\n    let X = existingBinding.descriptor;\n    invariant(X !== undefined);\n\n    if (X.joinCondition !== undefined) {\n      D.joinCondition = X.joinCondition;\n      D.descriptor1 = X.descriptor1;\n      D.descriptor2 = X.descriptor2;\n      return D;\n    }\n    // 5. If X is a data property, then\n    if (IsDataDescriptor(realm, X)) {\n      let value = X.value;\n      if (O.isPartialObject() && value instanceof AbstractValue && value.kind !== \"resolved\") {\n        let savedUnion;\n        let savedIndex;\n        if (value.kind === \"abstractConcreteUnion\") {\n          savedUnion = value;\n          savedIndex = savedUnion.args.findIndex(e => e instanceof AbstractValue);\n          invariant(savedIndex >= 0);\n          value = savedUnion.args[savedIndex];\n          invariant(value instanceof AbstractValue);\n        }\n        let realmGenerator = realm.generator;\n        invariant(realmGenerator);\n        value = realmGenerator.derive(value.types, value.values, value.args, value.getBuildNode(), {\n          kind: \"resolved\",\n        });\n        if (savedUnion !== undefined) {\n          invariant(savedIndex !== undefined);\n          savedUnion.args[savedIndex] = value;\n          value = savedUnion;\n        }\n        InternalSetProperty(realm, O, P, {\n          value: value,\n          writable: \"writable\" in X ? X.writable : false,\n          enumerable: \"enumerable\" in X ? X.enumerable : false,\n          configurable: \"configurable\" in X ? X.configurable : false,\n        });\n      }\n\n      // a. Set D.[[Value]] to the value of X's [[Value]] attribute.\n      D.value = value;\n\n      // b. Set D.[[Writable]] to the value of X's [[Writable]] attribute.\n      D.writable = X.writable;\n    } else {\n      // 6. Else X is an accessor property,\n      invariant(IsAccessorDescriptor(realm, X), \"expected accessor property\");\n\n      // a. Set D.[[Get]] to the value of X's [[Get]] attribute.\n      D.get = X.get;\n\n      // b. Set D.[[Set]] to the value of X's [[Set]] attribute.\n      D.set = X.set;\n    }\n\n    // 7. Set D.[[Enumerable]] to the value of X's [[Enumerable]] attribute.\n    D.enumerable = X.enumerable;\n\n    // 8. Set D.[[Configurable]] to the value of X's [[Configurable]] attribute.\n    D.configurable = X.configurable;\n\n    // 9. Return D.\n    return D;\n  }\n\n  // ECMA262 9.1.2.1\n  OrdinarySetPrototypeOf(realm: Realm, O: ObjectValue, V: ObjectValue | NullValue): boolean {\n    if (O.isLeakedObject()) {\n      throw new FatalError();\n    }\n\n    // 1. Assert: Either Type(V) is Object or Type(V) is Null.\n    invariant(V instanceof ObjectValue || V instanceof NullValue);\n\n    // 2. Let extensible be the value of the [[Extensible]] internal slot of O.\n    let extensible = O.getExtensible();\n\n    // 3. Let current be the value of the [[Prototype]] internal slot of O.\n    let current = O.$Prototype;\n\n    // 4. If SameValue(V, current) is true, return true.\n    if (SameValue(realm, V, current)) return true;\n\n    // 5. If extensible is false, return false.\n    if (!extensible) return false;\n\n    // 6. Let p be V.\n    let p = V;\n\n    // 7. Let done be false.\n    let done = false;\n\n    // 8. Repeat while done is false,\n    while (!done) {\n      // a. If p is null, let done be true.\n      if (p instanceof NullValue) {\n        done = true;\n      } else if (SameValue(realm, p, O)) {\n        // b. Else if SameValue(p, O) is true, return false.\n        return false;\n      } else {\n        // c. Else,\n        // TODO #1017 i. If the [[GetPrototypeOf]] internal method of p is not the ordinary object internal method defined in 9.1.1, let done be true.\n\n        // ii. Else, let p be the value of p's [[Prototype]] internal slot.\n        p = p.$Prototype;\n      }\n    }\n\n    // 9. Set the value of the [[Prototype]] internal slot of O to V.\n    O.$Prototype = V;\n\n    // 10. Return true.\n    return true;\n  }\n\n  // ECMA262 13.7.5.15\n  EnumerateObjectProperties(realm: Realm, O: ObjectValue): ObjectValue {\n    /*global global*/\n    let visited = new global.Set();\n    let obj = O;\n    let keys = O.$OwnPropertyKeys();\n    let index = 0;\n\n    let iterator = new ObjectValue(realm);\n    iterator.defineNativeMethod(\"next\", 0, () => {\n      while (true) {\n        if (index >= keys.length) {\n          let proto = obj.$GetPrototypeOf();\n          if (proto instanceof NullValue) {\n            return Create.CreateIterResultObject(realm, realm.intrinsics.undefined, true);\n          }\n          obj = proto;\n          keys = obj.$OwnPropertyKeys();\n          index = 0;\n        }\n\n        let key = keys[index];\n\n        // Omit symbols.\n        if (!(key instanceof StringValue)) {\n          index += 1;\n          continue;\n        }\n\n        // Omit non-enumerable properties.\n        let desc = obj.$GetOwnProperty(key);\n        if (desc && !desc.enumerable) {\n          this.ThrowIfMightHaveBeenDeleted(desc.value);\n          index += 1;\n          visited.add(key.value);\n          continue;\n        }\n\n        // Omit duplicates.\n        if (visited.has(key.value)) {\n          index += 1;\n          continue;\n        }\n        visited.add(key.value);\n\n        // Yield the key.\n        return Create.CreateIterResultObject(realm, key, false);\n      }\n    });\n    return iterator;\n  }\n\n  ThrowIfMightHaveBeenDeleted(\n    value: void | Value | Array<Value> | Array<{ $Key: void | Value, $Value: void | Value }>\n  ): void {\n    if (!(value instanceof Value)) return;\n    if (!value.mightHaveBeenDeleted()) return;\n    invariant(value instanceof AbstractValue); // real empty values should never get here\n    AbstractValue.reportIntrospectionError(value);\n    throw new FatalError();\n  }\n\n  ThrowIfInternalSlotNotWritable<T: ObjectValue>(realm: Realm, object: T, key: string): T {\n    if (!realm.isNewObject(object)) {\n      AbstractValue.reportIntrospectionError(object, key);\n      throw new FatalError();\n    }\n    return object;\n  }\n\n  // ECMA 14.3.9\n  PropertyDefinitionEvaluation(\n    realm: Realm,\n    MethodDefinition: BabelNodeObjectMethod | BabelNodeClassMethod,\n    object: ObjectValue,\n    env: LexicalEnvironment,\n    strictCode: boolean,\n    enumerable: boolean\n  ): boolean {\n    // MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n    if (MethodDefinition.kind === \"method\") {\n      // 1. Let methodDef be DefineMethod of MethodDefinition with argument object.\n      let methodDef = Functions.DefineMethod(realm, MethodDefinition, object, env, strictCode);\n\n      // 2. ReturnIfAbrupt(methodDef).\n\n      // 3. Perform SetFunctionName(methodDef.[[closure]], methodDef.[[key]]).\n      Functions.SetFunctionName(realm, methodDef.$Closure, methodDef.$Key);\n\n      // If the AST name was computed, give the hint to the closure\n      methodDef.$Closure.$HasComputedName = !!MethodDefinition.computed;\n\n      // 4. Let desc be the Property Descriptor{[[Value]]: methodDef.[[closure]], [[Writable]]: true, [[Enumerable]]: enumerable, [[Configurable]]: true}.\n      let desc: Descriptor = { value: methodDef.$Closure, writable: true, enumerable: enumerable, configurable: true };\n\n      // 5. Return DefinePropertyOrThrow(object, methodDef.[[key]], desc).\n      return this.DefinePropertyOrThrow(realm, object, methodDef.$Key, desc);\n    } else if (MethodDefinition.kind === \"generator\") {\n      // MethodDefinition : GeneratorMethod\n      // See 14.4.\n      // ECMA 14.4.13\n      // 1. Let propKey be the result of evaluating PropertyName.\n      let propKey = EvalPropertyName(MethodDefinition, env, realm, strictCode);\n\n      // 2. ReturnIfAbrupt(propKey).\n      // 3. If the function code for this GeneratorMethod is strict mode code, let strict be true. Otherwise let strict be false.\n      let strict = strictCode || IsStrict(MethodDefinition.body);\n\n      // 4. Let scope be the running execution context’s LexicalEnvironment.\n      let scope = env;\n\n      // 5. Let closure be GeneratorFunctionCreate(Method, StrictFormalParameters, GeneratorBody, scope, strict).\n      let closure = Functions.GeneratorFunctionCreate(\n        realm,\n        \"method\",\n        MethodDefinition.params,\n        MethodDefinition.body,\n        scope,\n        strict\n      );\n\n      // 6. Perform MakeMethod(closure, object).\n      Functions.MakeMethod(realm, closure, object);\n\n      // 7. Let prototype be ObjectCreate(%GeneratorPrototype%).\n      let prototype = Create.ObjectCreate(realm, realm.intrinsics.GeneratorPrototype);\n      prototype.originalConstructor = closure;\n\n      // 8. Perform MakeConstructor(closure, true, prototype).\n      MakeConstructor(realm, closure, true, prototype);\n\n      // 9. Perform SetFunctionName(closure, propKey).\n      Functions.SetFunctionName(realm, closure, propKey);\n\n      // 10. Let desc be the Property Descriptor{[[Value]]: closure, [[Writable]]: true, [[Enumerable]]: enumerable, [[Configurable]]: true}.\n      let desc: Descriptor = { value: closure, writable: true, enumerable: enumerable, configurable: true };\n\n      // 11. Return DefinePropertyOrThrow(object, propKey, desc).\n      return this.DefinePropertyOrThrow(realm, object, propKey, desc);\n    } else if (MethodDefinition.kind === \"get\") {\n      // 1. Let propKey be the result of evaluating PropertyName.\n      let propKey = EvalPropertyName(MethodDefinition, env, realm, strictCode);\n\n      // 2. ReturnIfAbrupt(propKey).\n\n      // 3. If the function code for this MethodDefinition is strict mode code, let strict be true. Otherwise let strict be false.\n      let strict = strictCode || IsStrict(MethodDefinition.body);\n\n      // 4. Let scope be the running execution context's LexicalEnvironment.\n      let scope = env;\n\n      // 5. Let formalParameterList be the production FormalParameters:[empty] .\n      let formalParameterList = [];\n\n      // 6. Let closure be FunctionCreate(Method, formalParameterList, FunctionBody, scope, strict).\n      let closure = Functions.FunctionCreate(\n        realm,\n        \"method\",\n        formalParameterList,\n        MethodDefinition.body,\n        scope,\n        strict\n      );\n\n      // 7. Perform MakeMethod(closure, object).\n      Functions.MakeMethod(realm, closure, object);\n\n      // 8. Perform SetFunctionName(closure, propKey, \"get\").\n      Functions.SetFunctionName(realm, closure, propKey, \"get\");\n\n      // If the AST name was computed, give the hint to the closure\n      closure.$HasComputedName = !!MethodDefinition.computed;\n\n      // 9. Let desc be the PropertyDescriptor{[[Get]]: closure, [[Enumerable]]: enumerable, [[Configurable]]: true}.\n      let desc = {\n        get: closure,\n        enumerable: true,\n        configurable: true,\n      };\n\n      // 10. Return ? DefinePropertyOrThrow(object, propKey, desc).\n      return this.DefinePropertyOrThrow(realm, object, propKey, desc);\n    } else {\n      invariant(MethodDefinition.kind === \"set\");\n      // 1. Let propKey be the result of evaluating PropertyName.\n      let propKey = EvalPropertyName(MethodDefinition, env, realm, strictCode);\n\n      // 2. ReturnIfAbrupt(propKey).\n\n      // 3. If the function code for this MethodDefinition is strict mode code, let strict be true. Otherwise let strict be false.\n      let strict = strictCode || IsStrict(MethodDefinition.body);\n\n      // 4. Let scope be the running execution context's LexicalEnvironment.\n      let scope = env;\n\n      // 5. Let closure be FunctionCreate(Method, PropertySetParameterList, FunctionBody, scope, strict).\n      let closure = Functions.FunctionCreate(\n        realm,\n        \"method\",\n        MethodDefinition.params,\n        MethodDefinition.body,\n        scope,\n        strict\n      );\n\n      // 6. Perform MakeMethod(closure, object).\n      Functions.MakeMethod(realm, closure, object);\n\n      // 7. Perform SetFunctionName(closure, propKey, \"set\").\n      Functions.SetFunctionName(realm, closure, propKey, \"set\");\n\n      // If the AST name was computed, give the hint to the closure\n      closure.$HasComputedName = !!MethodDefinition.computed;\n\n      // 8. Let desc be the PropertyDescriptor{[[Set]]: closure, [[Enumerable]]: enumerable, [[Configurable]]: true}.\n      let desc = {\n        set: closure,\n        enumerable: true,\n        configurable: true,\n      };\n\n      // 9. Return ? DefinePropertyOrThrow(object, propKey, desc).\n      return this.DefinePropertyOrThrow(realm, object, propKey, desc);\n    }\n  }\n}\n"]}