{"version":3,"sources":["../../src/methods/create.js"],"names":["CreateImplementation","realm","value","prototype","S","$StringData","$Prototype","setExtensible","length","DefinePropertyOrThrow","writable","enumerable","configurable","string","tag","attribute","str","ToStringPartial","p1","V","escapedV","replace","p2","p3","p4","name","env","undefined","GetBindingValue","context","SetMutableBinding","iterator","ObjectCreate","intrinsics","StringIteratorPrototype","$IteratedString","$StringIteratorNextIndex","originalArray","Object","is","C","isArray","thisRealm","realmC","Array","mightBeObject","mightNotBeObject","throwIfNotConcrete","SymbolSpecies","ArrayCreate","createErrorThrowCompletion","TypeError","throwIfNotConcreteObject","done","obj","ObjectPrototype","CreateDataProperty","array","kind","ArrayIteratorPrototype","$IteratedObject","$ArrayIteratorNextIndex","$ArrayIterationKind","proto","Math","pow","RangeError","ArrayPrototype","A","OrdinaryDefineOwnProperty","elems","elem","arr","n","status","argumentsList","len","$ParameterMap","index","val","SymbolIterator","ArrayProto_values","get","ThrowTypeError","set","func","formals","param","type","map","parameterNames","push","numberOfParameters","mappedNames","indexOf","g","MakeArgGetter","p","MakeArgSetter","$DefineOwnProperty","O","P","newDesc","success","internalSlotsList","assign","constructor","intrinsicDefaultProto","elementTypes","ToLength","list","indexName","next","newTarget","args","fallbackProto","argCount","bodyText","emptyString","firstArg","k","nextArg","nextArgString","ast","e","SyntaxError","program","body","functionDeclaration","params","strict","containsYield","node","F","FunctionAllocate","realmF","$Realm","scope","$GlobalEnv","FunctionInitialize","GeneratorPrototype","originalConstructor","SetFunctionName"],"mappings":"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","file":"create.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { EnvironmentRecord } from \"../environment.js\";\nimport type { PropertyKeyValue, IterationKind } from \"../types.js\";\nimport {\n  AbstractObjectValue,\n  NativeFunctionValue,\n  NullValue,\n  BooleanValue,\n  ArrayValue,\n  ObjectValue,\n  Value,\n  StringValue,\n  NumberValue,\n  FunctionValue,\n  UndefinedValue,\n  StringExotic,\n  ArgumentsExotic,\n} from \"../values/index.js\";\nimport { GetPrototypeFromConstructor } from \"./get.js\";\nimport { IsConstructor, IsPropertyKey, IsArray } from \"./is.js\";\nimport { Type, SameValue, RequireObjectCoercible } from \"./abstract.js\";\nimport { Get, GetFunctionRealm } from \"./get.js\";\nimport { Construct, MakeConstructor } from \"./construct.js\";\nimport { Functions, Properties, To } from \"../singletons.js\";\nimport IsStrict from \"../utils/strict.js\";\nimport invariant from \"../invariant.js\";\nimport parse from \"../utils/parse.js\";\nimport traverseFast from \"../utils/traverse-fast.js\";\nimport type { BabelNodeIdentifier, BabelNodeLVal, BabelNodeFunctionDeclaration } from \"babel-types\";\n\nexport class CreateImplementation {\n  // ECMA262 9.4.3.3\n  StringCreate(realm: Realm, value: StringValue, prototype: ObjectValue): ObjectValue {\n    // 1. Assert: Type(value) is String.\n    invariant(value instanceof StringValue, \"expected string value\");\n\n    // 2. Let S be a newly created String exotic object.\n    let S = new StringExotic(realm);\n\n    // 3. Set the [[StringData]] internal slot of S to value.\n    S.$StringData = value;\n\n    // 4. Set S's essential internal methods to the default ordinary object definitions specified in 9.1.\n\n    // 5. Set the [[GetOwnProperty]] internal method of S as specified in 9.4.3.1.\n\n    // 6. Set the [[OwnPropertyKeys]] internal method of S as specified in 9.4.3.2.\n\n    // 7. Set the [[Prototype]] internal slot of S to prototype.\n    S.$Prototype = prototype;\n\n    // 8. Set the [[Extensible]] internal slot of S to true.\n    S.setExtensible(true);\n\n    // 9. Let length be the number of code unit elements in value.\n    let length = value.value.length;\n\n    // 10. Perform ! DefinePropertyOrThrow(S, \"length\", PropertyDescriptor{[[Value]]: length, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }).\n    Properties.DefinePropertyOrThrow(realm, S, \"length\", {\n      value: new NumberValue(realm, length),\n      writable: false,\n      enumerable: false,\n      configurable: false,\n    });\n\n    // 11. Return S.\n    return S;\n  }\n\n  // B.2.3.2.1\n  CreateHTML(realm: Realm, string: Value, tag: string, attribute: string, value: string | Value): StringValue {\n    // 1. Let str be ? RequireObjectCoercible(string).\n    let str = RequireObjectCoercible(realm, string);\n\n    // 2. Let S be ? ToString(str).\n    let S = To.ToStringPartial(realm, str);\n\n    // 3. Let p1 be the String value that is the concatenation of \"<\" and tag.\n    let p1 = `<${tag}`;\n\n    // 4. If attribute is not the empty String, then\n    if (attribute) {\n      // a. Let V be ? ToString(value).\n      let V = To.ToStringPartial(realm, value);\n\n      // b. Let escapedV be the String value that is the same as V except that each occurrence of the code unit\n      //    0x0022 (QUOTATION MARK) in V has been replaced with the six code unit sequence \"&quot;\".\n      let escapedV = V.replace(/\"/g, \"&quot;\");\n\n      // c. Let p1 be the String value that is the concatenation of the following String values:\n      // - The String value of p1\n      // - Code unit 0x0020 (SPACE)\n      // - The String value of attribute\n      // - Code unit 0x003D (EQUALS SIGN)\n      // - Code unit 0x0022 (QUOTATION MARK)\n      // - The String value of escapedV\n      // - Code unit 0x0022 (QUOTATION MARK)\n      p1 = `${p1} ${attribute}=\"${escapedV}\"`;\n    }\n\n    // 5. Let p2 be the String value that is the concatenation of p1 and \">\".\n    let p2 = `${p1}>`;\n\n    // 6. Let p3 be the String value that is the concatenation of p2 and S.\n    let p3 = `${p2}${S}`;\n\n    // 7. Let p4 be the String value that is the concatenation of p3, \"</\", tag, and \">\".\n    let p4 = `${p3}</${tag}>`;\n\n    // 8. Return p4.\n    return new StringValue(realm, p4);\n  }\n\n  // ECMA262 9.4.4.8.1\n  MakeArgGetter(realm: Realm, name: string, env: EnvironmentRecord): NativeFunctionValue {\n    return new NativeFunctionValue(\n      realm,\n      undefined,\n      undefined,\n      0,\n      context => {\n        return env.GetBindingValue(name, false);\n      },\n      false\n    );\n  }\n\n  // ECMA262 9.4.4.8.1\n  MakeArgSetter(realm: Realm, name: string, env: EnvironmentRecord): NativeFunctionValue {\n    return new NativeFunctionValue(\n      realm,\n      undefined,\n      undefined,\n      1,\n      (context, [value]) => {\n        return env.SetMutableBinding(name, value, false);\n      },\n      false\n    );\n  }\n\n  // ECMA262 21.1.5.1\n  CreateStringIterator(realm: Realm, string: StringValue): ObjectValue {\n    // 1. Assert: Type(string) is String.\n    invariant(string instanceof StringValue, \"expected string to be a string value\");\n\n    // 2. Let iterator be ObjectCreate(%StringIteratorPrototype%, « [[IteratedString]], [[StringIteratorNextIndex]] »).\n    let iterator = this.ObjectCreate(realm, realm.intrinsics.StringIteratorPrototype, {\n      $IteratedString: undefined,\n      $StringIteratorNextIndex: undefined,\n    });\n\n    // 3. Set iterator's [[IteratedString]] internal slot to string.\n    iterator.$IteratedString = string;\n\n    // 4. Set iterator's [[StringIteratorNextIndex]] internal slot to 0.\n    iterator.$StringIteratorNextIndex = 0;\n\n    // 5. Return iterator.\n    return iterator;\n  }\n\n  // ECMA262 9.4.2.3\n  ArraySpeciesCreate(realm: Realm, originalArray: ObjectValue, length: number): ObjectValue {\n    // 1. Assert: length is an integer Number ≥ 0.\n    invariant(length >= 0, \"expected length >= 0\");\n\n    // 2. If length is -0, let length be +0.\n    if (Object.is(length, -0)) length = +0;\n\n    // 3. Let C be undefined.\n    let C = realm.intrinsics.undefined;\n\n    // 4. Let isArray be ? IsArray(originalArray).\n    let isArray = IsArray(realm, originalArray);\n\n    // 5. If isArray is true, then\n    if (isArray) {\n      // a. Let C be ? Get(originalArray, \"constructor\").\n      C = Get(realm, originalArray, \"constructor\");\n\n      // b. If IsConstructor(C) is true, then\n      if (IsConstructor(realm, C)) {\n        invariant(C instanceof ObjectValue);\n        // i. Let thisRealm be the current Realm Record.\n        let thisRealm = realm;\n\n        // ii. Let realmC be ? GetFunctionRealm(C).\n        let realmC = GetFunctionRealm(realm, C);\n\n        // iii. If thisRealm and realmC are not the same Realm Record, then\n        if (thisRealm !== realmC) {\n          // 1. If SameValue(C, realmC.[[Intrinsics]].[[%Array%]]) is true, let C be undefined.\n          if (SameValue(realm, C, realmC.intrinsics.Array)) {\n            C = realm.intrinsics.undefined;\n          }\n        }\n      }\n\n      // c. If Type(C) is Object, then\n      if (C.mightBeObject()) {\n        if (C.mightNotBeObject()) C.throwIfNotConcrete();\n        invariant(C instanceof ObjectValue || C instanceof AbstractObjectValue);\n        // i. Let C be ? Get(C, @@species).\n        C = Get(realm, C, realm.intrinsics.SymbolSpecies);\n\n        // ii. If C is null, let C be undefined.\n        if (C instanceof NullValue) C = realm.intrinsics.undefined;\n      }\n    }\n\n    // 6. If C is undefined, return ? ArrayCreate(length).\n    if (C instanceof UndefinedValue) return this.ArrayCreate(realm, length);\n\n    // 7. If IsConstructor(C) is false, throw a TypeError exception.\n    if (!IsConstructor(realm, C)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a constructor\");\n    }\n\n    // 8. Return ? Construct(C, « length »).\n    return Construct(realm, C.throwIfNotConcreteObject(), [new NumberValue(realm, length)]);\n  }\n\n  // ECMA262 7.4.7\n  CreateIterResultObject(realm: Realm, value: Value, done: boolean): ObjectValue {\n    // 1. Assert: Type(done) is Boolean.\n    invariant(typeof done === \"boolean\", \"expected done to be a boolean\");\n\n    // 2. Let obj be ObjectCreate(%ObjectPrototype%).\n    let obj = this.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n\n    // 3. Perform CreateDataProperty(obj, \"value\", value).\n    this.CreateDataProperty(realm, obj, \"value\", value);\n\n    // 4. Perform CreateDataProperty(obj, \"done\", done).\n    this.CreateDataProperty(realm, obj, \"done\", new BooleanValue(realm, done));\n\n    // 5. Return obj.\n    return obj;\n  }\n\n  // ECMA262 22.1.5.1\n  CreateArrayIterator(realm: Realm, array: ObjectValue, kind: IterationKind): ObjectValue {\n    // 1. Assert: Type(array) is Object.\n    invariant(array instanceof ObjectValue, \"expected object\");\n\n    // 2. Let iterator be ObjectCreate(%ArrayIteratorPrototype%, « [[IteratedObject]],\n    //    [[ArrayIteratorNextIndex]], [[ArrayIterationKind]] »).\n    let iterator = this.ObjectCreate(realm, realm.intrinsics.ArrayIteratorPrototype, {\n      $IteratedObject: undefined,\n      $ArrayIteratorNextIndex: undefined,\n      $ArrayIterationKind: undefined,\n    });\n\n    // 3. Set iterator's [[IteratedObject]] internal slot to array.\n    iterator.$IteratedObject = array;\n\n    // 4. Set iterator's [[ArrayIteratorNextIndex]] internal slot to 0.\n    iterator.$ArrayIteratorNextIndex = new NumberValue(realm, 0);\n\n    // 5. Set iterator's [[ArrayIterationKind]] internal slot to kind.\n    iterator.$ArrayIterationKind = kind;\n\n    // 6. Return iterator.\n    return iterator;\n  }\n\n  // ECMA262 9.4.2.2\n  ArrayCreate(realm: Realm, length: number, proto?: ObjectValue): ArrayValue {\n    // 1. Assert: length is an integer Number ≥ 0.\n    invariant(length >= 0);\n\n    // 2. If length is -0, let length be +0.\n    if (Object.is(length, -0)) length = +0;\n\n    // 3. If length>232-1, throw a RangeError exception.\n    if (length > Math.pow(2, 32) - 1) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError, \"length>2^32-1\");\n    }\n\n    // 4. If the proto argument was not passed, let proto be the intrinsic object %ArrayPrototype%.\n    proto = proto || realm.intrinsics.ArrayPrototype;\n\n    // 5. Let A be a newly created Array exotic object.\n    let A = new ArrayValue(realm);\n\n    // 6. Set A's essential internal methods except for [[DefineOwnProperty]] to the default ordinary object definitions specified in 9.1.\n    // 7. Set the [[DefineOwnProperty]] internal method of A as specified in 9.4.2.1.\n\n    // 8. Set the [[Prototype]] internal slot of A to proto.\n    A.$Prototype = proto;\n\n    // 9. Set the [[Extensible]] internal slot of A to true.\n    A.setExtensible(true);\n\n    // 10. Perform ! OrdinaryDefineOwnProperty(A, \"length\", PropertyDescriptor{[[Value]]: length, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false}).\n    Properties.OrdinaryDefineOwnProperty(realm, A, \"length\", {\n      value: new NumberValue(realm, length),\n      writable: true,\n      enumerable: false,\n      configurable: false,\n    });\n\n    // 11. Return A.\n    return A;\n  }\n\n  // ECMA262 7.3.16\n  CreateArrayFromList(realm: Realm, elems: Array<Value>): ArrayValue {\n    // 1. Assert: elements is a List whose elements are all ECMAScript language values.\n    for (let elem of elems) invariant(elem instanceof Value, \"value expected\");\n\n    // 2. Let array be ArrayCreate(0) (see 9.4.2.2).\n    let arr = this.ArrayCreate(realm, 0);\n\n    // 3. Let n be 0.\n    let n = 0;\n\n    // 4. For each element e of elements\n    for (let elem of elems) {\n      // a. Let status be CreateDataProperty(array, ! ToString(n), e).\n      let status = this.CreateDataProperty(realm, arr, new StringValue(realm, n + \"\"), elem);\n\n      // b. Assert: status is true.\n      invariant(status, \"couldn't create data property\");\n\n      // c. Increment n by 1.\n      n++;\n    }\n\n    // 5. Return array.\n    return arr;\n  }\n\n  // ECMA262 9.4.4.7\n  CreateUnmappedArgumentsObject(realm: Realm, argumentsList: Array<Value>): ObjectValue {\n    // 1. Let len be the number of elements in argumentsList.\n    let len = argumentsList.length;\n\n    // 2. Let obj be ObjectCreate(%ObjectPrototype%, « [[ParameterMap]] »).\n    let obj = this.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n\n    // 3. Set obj's [[ParameterMap]] internal slot to undefined.\n    obj.$ParameterMap = obj; // The value is never used, but allows us to use undefined for \"not in\"\n\n    // 4. Perform DefinePropertyOrThrow(obj, \"length\", PropertyDescriptor{[[Value]]: len,\n    //    [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}).\n    Properties.DefinePropertyOrThrow(realm, obj, \"length\", {\n      value: new NumberValue(realm, len),\n      writable: true,\n      enumerable: false,\n      configurable: true,\n    });\n\n    // 5. Let index be 0.\n    let index = 0;\n\n    // 6. Repeat while index < len,\n    while (index < len) {\n      // a. Let val be argumentsList[index].\n      let val = argumentsList[index];\n\n      // b. Perform CreateDataProperty(obj, ! ToString(index), val).\n      this.CreateDataProperty(realm, obj, new StringValue(realm, index + \"\"), val);\n\n      // c. Let index be index + 1.\n      index++;\n    }\n\n    // 7. Perform ! DefinePropertyOrThrow(obj, @@iterator, PropertyDescriptor {[[Value]]:\n    //    %ArrayProto_values%, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}).\n    Properties.DefinePropertyOrThrow(realm, obj, realm.intrinsics.SymbolIterator, {\n      value: realm.intrinsics.ArrayProto_values,\n      writable: true,\n      enumerable: false,\n      configurable: true,\n    });\n\n    // 8. Perform ! DefinePropertyOrThrow(obj, \"callee\", PropertyDescriptor {[[Get]]:\n    // %ThrowTypeError%, [[Set]]: %ThrowTypeError%, [[Enumerable]]: false, [[Configurable]]: false}).\n    Properties.DefinePropertyOrThrow(realm, obj, \"callee\", {\n      get: realm.intrinsics.ThrowTypeError,\n      set: realm.intrinsics.ThrowTypeError,\n      enumerable: false,\n      configurable: false,\n    });\n\n    // 10. Return obj.\n    return obj;\n  }\n\n  // ECMA262 9.4.4.8\n  CreateMappedArgumentsObject(\n    realm: Realm,\n    func: FunctionValue,\n    formals: Array<BabelNodeLVal>,\n    argumentsList: Array<Value>,\n    env: EnvironmentRecord\n  ): ObjectValue {\n    // 1. Assert: formals does not contain a rest parameter, any binding patterns, or any\n    //    initializers. It may contain duplicate identifiers.\n    for (let param of formals) {\n      invariant(param.type === \"Identifier\", \"expected only simple params\");\n    }\n\n    // 2. Let len be the number of elements in argumentsList.\n    let len = argumentsList.length;\n\n    // 3. Let obj be a newly created arguments exotic object with a [[ParameterMap]] internal slot.\n    let obj = new ArgumentsExotic(realm);\n\n    // 4. Set the [[GetOwnProperty]] internal method of obj as specified in 9.4.4.1.\n\n    // 5. Set the [[DefineOwnProperty]] internal method of obj as specified in 9.4.4.2.\n\n    // 6. Set the [[Get]] internal method of obj as specified in 9.4.4.3.\n\n    // 7. Set the [[Set]] internal method of obj as specified in 9.4.4.4.\n\n    // 8. Set the [[Delete]] internal method of obj as specified in 9.4.4.6.\n\n    // 9. Set the remainder of obj's essential internal methods to the default ordinary\n    //    object definitions specified in 9.1.\n\n    // 10. Set the [[Prototype]] internal slot of obj to %ObjectPrototype%.\n    obj.$Prototype = realm.intrinsics.ObjectPrototype;\n\n    // 11. Set the [[Extensible]] internal slot of obj to true.\n    obj.setExtensible(true);\n\n    // 12. Let map be ObjectCreate(null).\n    let map = new ObjectValue(realm);\n\n    // 13. Set the [[ParameterMap]] internal slot of obj to map.\n    obj.$ParameterMap = map;\n\n    // 14. Let parameterNames be the BoundNames of formals.\n    let parameterNames = [];\n    for (let param of formals) {\n      parameterNames.push(((param: any): BabelNodeIdentifier).name);\n    }\n\n    // 15. Let numberOfParameters be the number of elements in parameterNames.\n    let numberOfParameters = parameterNames.length;\n\n    // 16. Let index be 0.\n    let index = 0;\n\n    // 17. Repeat while index < len,\n    while (index < len) {\n      // a. Let val be argumentsList[index].\n      let val = argumentsList[index];\n\n      // b. Perform CreateDataProperty(obj, ! ToString(index), val).\n      this.CreateDataProperty(realm, obj, new StringValue(realm, index + \"\"), val);\n\n      // c. Let index be index + 1.\n      index++;\n    }\n\n    // 18. Perform DefinePropertyOrThrow(obj, \"length\", PropertyDescriptor{[[Value]]: len,\n    //     [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}).\n    Properties.DefinePropertyOrThrow(realm, obj, \"length\", {\n      value: new NumberValue(realm, len),\n      writable: true,\n      enumerable: false,\n      configurable: true,\n    });\n\n    // 19. Let mappedNames be an empty List.\n    let mappedNames = [];\n\n    // 20. Let index be numberOfParameters - 1.\n    index = numberOfParameters - 1;\n\n    // 21. Repeat while index ≥ 0,\n    while (index >= 0) {\n      // a. Let name be parameterNames[index].\n      let name = parameterNames[index];\n\n      // b. If name is not an element of mappedNames, then\n      if (mappedNames.indexOf(name) < 0) {\n        // i. Add name as an element of the list mappedNames.\n        mappedNames.push(name);\n\n        // ii. If index < len, then\n        if (index < len) {\n          // 1. Let g be MakeArgGetter(name, env).\n          let g = this.MakeArgGetter(realm, name, env);\n\n          // 2. Let p be MakeArgSetter(name, env).\n          let p = this.MakeArgSetter(realm, name, env);\n\n          // 3. Perform map.[[DefineOwnProperty]](! ToString(index), PropertyDescriptor{[[Set]]: p, [[Get]]: g,\n          //    [[Enumerable]]: false, [[Configurable]]: true}).\n          map.$DefineOwnProperty(new StringValue(realm, index + \"\"), {\n            set: p,\n            get: g,\n            enumerable: false,\n            configurable: true,\n          });\n        }\n      }\n\n      // c. Let index be index - 1.\n      index--;\n    }\n\n    // 22. Perform ! DefinePropertyOrThrow(obj, @@iterator, PropertyDescriptor {[[Value]]:\n    //     %ArrayProto_values%, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}).\n    Properties.DefinePropertyOrThrow(realm, obj, realm.intrinsics.SymbolIterator, {\n      value: realm.intrinsics.ArrayProto_values,\n      writable: true,\n      enumerable: false,\n      configurable: true,\n    });\n\n    // 23. Perform ! DefinePropertyOrThrow(obj, \"callee\", PropertyDescriptor {[[Value]]:\n    //     func, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}).\n    Properties.DefinePropertyOrThrow(realm, obj, \"callee\", {\n      value: func,\n      writable: true,\n      enumerable: false,\n      configurable: true,\n    });\n\n    // 24. Return obj.\n    return obj;\n  }\n\n  // ECMA262 7.3.4\n  CreateDataProperty(realm: Realm, O: ObjectValue, P: PropertyKeyValue, V: Value): boolean {\n    // 1. Assert: Type(O) is Object.\n    invariant(O instanceof ObjectValue, \"Not an object value\");\n\n    // 2. Assert: IsPropertyKey(P) is true.\n    invariant(IsPropertyKey(realm, P), \"Not a property key\");\n\n    // 3. Let newDesc be the PropertyDescriptor{[[Value]]: V, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}.\n    let newDesc = {\n      value: V,\n      writable: true,\n      enumerable: true,\n      configurable: true,\n    };\n\n    // 4. Return ? O.[[DefineOwnProperty]](P, newDesc).\n    return O.$DefineOwnProperty(P, newDesc);\n  }\n\n  // ECMA262 7.3.5\n  CreateMethodProperty(realm: Realm, O: ObjectValue, P: PropertyKeyValue, V: Value): boolean {\n    // 1. Assert: Type(O) is Object.\n    invariant(O instanceof ObjectValue, \"Not an object value\");\n\n    // 2. Assert: IsPropertyKey(P) is true.\n    invariant(IsPropertyKey(realm, P), \"Not a property key\");\n\n    // 3. Let newDesc be the PropertyDescriptor{[[Value]]: V, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}.\n    let newDesc = {\n      value: V,\n      writable: true,\n      enumerable: false,\n      configurable: true,\n    };\n\n    // 4. Return ? O.[[DefineOwnProperty]](P, newDesc).\n    return O.$DefineOwnProperty(P, newDesc);\n  }\n\n  // ECMA262 7.3.6\n  CreateDataPropertyOrThrow(realm: Realm, O: Value, P: PropertyKeyValue, V: Value): boolean {\n    // 1. Assert: Type(O) is Object.\n    invariant(O instanceof ObjectValue, \"Not an object value\");\n\n    // 2. Assert: IsPropertyKey(P) is true.\n    invariant(IsPropertyKey(realm, P), \"Not a property key\");\n\n    //3. Let success be ? CreateDataProperty(O, P, V).\n    let success = this.CreateDataProperty(realm, O, P, V);\n\n    // 4. If success is false, throw a TypeError exception.\n    if (success === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a function\");\n    }\n\n    // 5. Return success.\n    return success;\n  }\n\n  // ECMA262 9.1.12\n  ObjectCreate(realm: Realm, proto: ObjectValue | NullValue, internalSlotsList?: { [key: string]: void }): ObjectValue {\n    // 1. If internalSlotsList was not provided, let internalSlotsList be an empty List.\n    internalSlotsList = internalSlotsList || {};\n\n    // 2. Let obj be a newly created object with an internal slot for each name in internalSlotsList.\n    let obj = new ObjectValue(realm);\n    Object.assign(obj, internalSlotsList);\n\n    // 3. Set obj's essential internal methods to the default ordinary object definitions specified in 9.1.\n\n    // 4. Set the [[Prototype]] internal slot of obj to proto.\n    obj.$Prototype = proto;\n\n    // 5. Set the [[Extensible]] internal slot of obj to true.\n    obj.setExtensible(true);\n\n    // 6. Return obj.\n    return obj;\n  }\n\n  // ECMA262 9.1.13\n  OrdinaryCreateFromConstructor(\n    realm: Realm,\n    constructor: ObjectValue,\n    intrinsicDefaultProto: string,\n    internalSlotsList?: { [key: string]: void }\n  ): ObjectValue {\n    // 1. Assert: intrinsicDefaultProto is a String value that is this specification's name of an intrinsic\n    //    object. The corresponding object must be an intrinsic that is intended to be used as the [[Prototype]]\n    //    value of an object.\n    invariant(realm.intrinsics[intrinsicDefaultProto], \"not a valid proto ref\");\n\n    // 2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n    let proto = GetPrototypeFromConstructor(realm, constructor, intrinsicDefaultProto);\n\n    // 3. Return ObjectCreate(proto, internalSlotsList).\n    return this.ObjectCreate(realm, proto, internalSlotsList);\n  }\n\n  // ECMA262 7.3.17\n  CreateListFromArrayLike(realm: Realm, obj: Value, elementTypes?: Array<string>): Array<Value> {\n    // 1. If elementTypes was not passed, let elementTypes be « Undefined, Null, Boolean, String, Symbol, Number, Object ».\n    elementTypes = elementTypes || [\"Undefined\", \"Null\", \"Boolean\", \"String\", \"Symbol\", \"Number\", \"Object\"];\n\n    // 2. If Type(obj) is not Object, throw a TypeError exception.\n    if (!(obj instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Not an object\");\n    }\n\n    // 3. Let len be ? ToLength(? Get(obj, \"length\")).\n    let len = To.ToLength(realm, Get(realm, obj, \"length\"));\n\n    // 4. Let list be a new empty List.\n    let list: Array<Value> = [];\n\n    // 5. Let index be 0.\n    let index = 0;\n\n    // 6. Repeat while index < len\n    while (index < len) {\n      // a. Let indexName be ! ToString(index).\n      let indexName = index + \"\";\n\n      // b. Let next be ? Get(obj, indexName).\n      let next = Get(realm, obj, indexName);\n\n      // c. If Type(next) is not an element of elementTypes, throw a TypeError exception.\n      if (elementTypes.indexOf(Type(realm, next)) < 0) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"invalid element type\");\n      }\n\n      // d. Append next as the last element of list.\n      list.push(next);\n\n      // e. Set index to index + 1.\n      index++;\n    }\n\n    // 7. Return list.\n    return list;\n  }\n\n  // ECMA262 19.2.1.1.1\n  CreateDynamicFunction(\n    realm: Realm,\n    constructor: ObjectValue,\n    newTarget: void | ObjectValue,\n    kind: \"normal\" | \"generator\",\n    args: Array<Value>\n  ): Value {\n    // 1. If newTarget is undefined, let newTarget be constructor.\n    newTarget = !newTarget ? constructor : newTarget;\n\n    let fallbackProto;\n    // 2. If kind is \"normal\", then\n    if (kind === \"normal\") {\n      // a. Let goal be the grammar symbol FunctionBody.\n\n      // b. Let parameterGoal be the grammar symbol FormalParameters.\n\n      // c. Let fallbackProto be \"%FunctionPrototype%\".\n      fallbackProto = \"FunctionPrototype\";\n    } else {\n      // 3. Else,\n      // a. Let goal be the grammar symbol GeneratorBody.\n\n      // b. Let parameterGoal be the grammar symbol FormalParameters[Yield].\n\n      // c. Let fallbackProto be \"%Generator%\".\n      fallbackProto = \"Generator\";\n    }\n\n    // 4. Let argCount be the number of elements in args.\n    let argCount = args.length;\n\n    // 5. Let P be the empty String.\n    let P = \"\";\n\n    let bodyText;\n    // 6. If argCount = 0, let bodyText be the empty String.\n    if (argCount === 0) {\n      bodyText = realm.intrinsics.emptyString;\n    } else if (argCount === 1) {\n      // 7. Else if argCount = 1, let bodyText be args[0].\n      bodyText = args[0];\n    } else {\n      // 8. Else argCount > 1,\n      // a. Let firstArg be args[0].\n      let firstArg = args[0];\n\n      // b. Let P be ? ToString(firstArg).\n      P = To.ToStringPartial(realm, firstArg);\n\n      // c. Let k be 1.\n      let k = 1;\n\n      // d. Repeat, while k < argCount-1\n      while (k < argCount - 1) {\n        // i. Let nextArg be args[k].\n        let nextArg = args[k];\n\n        // ii. Let nextArgString be ? ToString(nextArg).\n        let nextArgString = To.ToStringPartial(realm, nextArg);\n\n        // iii. Let P be the result of concatenating the previous value of P, the String \",\" (a comma), and nextArgString.\n        P = P + \",\" + nextArgString;\n\n        // iv. Increase k by 1.\n        k += 1;\n      }\n\n      // e. Let bodyText be args[k].\n      bodyText = args[k];\n    }\n\n    // 9. Let bodyText be ? ToString(bodyText).\n    bodyText = To.ToStringPartial(realm, bodyText);\n\n    // 10. Let parameters be the result of parsing P, interpreted as UTF-16 encoded Unicode text as described in 6.1.4, using parameterGoal as the goal symbol. Throw a SyntaxError exception if the parse fails.\n    // 11. Let body be the result of parsing bodyText, interpreted as UTF-16 encoded Unicode text as described in 6.1.4, using goal as the goal symbol. Throw a SyntaxError exception if the parse fails.\n    let ast;\n    try {\n      ast = parse(realm, \"function\" + (kind === \"generator\" ? \"*\" : \"\") + \" _(\" + P + \"){\" + bodyText + \"}\", \"eval\");\n    } catch (e) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.SyntaxError, \"parse failed\");\n    }\n    let { program: { body: [functionDeclaration] } } = ast;\n    if (!functionDeclaration) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.SyntaxError, \"parse failed\");\n    }\n    invariant(functionDeclaration.type === \"FunctionDeclaration\");\n    let { params, body } = ((functionDeclaration: any): BabelNodeFunctionDeclaration);\n\n    // 12. If bodyText is strict mode code, then let strict be true, else let strict be false.\n    let strict = IsStrict(body);\n\n    // 13. If any static semantics errors are detected for parameters or body, throw a SyntaxError or a ReferenceError exception, depending on the type of the error. If strict is true, the Early Error rules for StrictFormalParameters:FormalParameters are applied. Parsing and early error detection may be interweaved in an implementation dependent manner.\n\n    // 14. If ContainsUseStrict of body is true and IsSimpleParameterList of parameters is false, throw a SyntaxError exception.\n\n    // 15. If any element of the BoundNames of parameters also occurs in the LexicallyDeclaredNames of body, throw a SyntaxError exception.\n\n    // 16. If body Contains SuperCall is true, throw a SyntaxError exception.\n\n    // 17. If parameters Contains SuperCall is true, throw a SyntaxError exception.\n\n    // 18. If body Contains SuperProperty is true, throw a SyntaxError exception.\n\n    // 19. If parameters Contains SuperProperty is true, throw a SyntaxError exception.\n\n    // 20. If kind is \"generator\", then\n    if (kind === \"generator\") {\n      // a. If parameters Contains YieldExpression is true, throw a SyntaxError exception.\n      let containsYield = false;\n      for (let param of params) {\n        traverseFast(param, node => {\n          if (node.type === \"YieldExpression\") {\n            containsYield = true;\n            return true;\n          }\n          if (node.type === \"Identifier\" && node.name === \"yield\") {\n            containsYield = true;\n            return true;\n          }\n          return false;\n        });\n      }\n      if (containsYield) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.SyntaxError, \"parse failed\");\n      }\n    }\n\n    // 21. If strict is true, then\n    if (strict === true) {\n      // a. If BoundNames of parameters contains any duplicate elements, throw a SyntaxError exception.\n    }\n\n    // 22. Let proto be ? GetPrototypeFromConstructor(newTarget, fallbackProto).\n    let proto = GetPrototypeFromConstructor(realm, newTarget, fallbackProto);\n\n    // 23. Let F be FunctionAllocate(proto, strict, kind).\n    let F = Functions.FunctionAllocate(realm, proto, strict, kind);\n\n    // 24. Let realmF be the value of F's [[Realm]] internal slot.\n    let realmF = F.$Realm;\n\n    // 25. Let scope be realmF.[[GlobalEnv]].\n    let scope = realmF.$GlobalEnv;\n\n    // 26. Perform FunctionInitialize(F, Normal, parameters, body, scope).\n    Functions.FunctionInitialize(realm, F, \"normal\", params, body, scope);\n\n    // 27. If kind is \"generator\", then\n    if (kind === \"generator\") {\n      // a. Let prototype be ObjectCreate(%GeneratorPrototype%).\n      let prototype = this.ObjectCreate(realm, realm.intrinsics.GeneratorPrototype);\n      prototype.originalConstructor = F;\n\n      // b. Perform DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor{[[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false}).\n      Properties.DefinePropertyOrThrow(realm, F, \"prototype\", {\n        value: prototype,\n        writable: true,\n        enumerable: false,\n        configurable: false,\n      });\n    } else {\n      // 28. Else, perform MakeConstructor(F).\n      MakeConstructor(realm, F);\n    }\n\n    // 29. Perform SetFunctionName(F, \"anonymous\").\n    Functions.SetFunctionName(realm, F, \"anonymous\");\n\n    // 30. Return F.\n    return F;\n  }\n}\n"]}