{"version":3,"sources":["../../src/react/utils.js"],"names":["isReactElement","getReactSymbol","isTagName","isReactComponent","valueIsClassComponent","valueIsReactLibraryObject","valueIsLegacyCreateClassComponent","addKeyToReactElement","getUniqueReactElementKey","forEachArrayValue","convertSimpleClassComponentToFunctionalComponent","normalizeFunctionalComponentParamaters","t","val","properties","has","realm","$Realm","$$typeof","globalObject","$GlobalObject","globalSymbolValue","intrinsics","undefined","value","symbolFromRegistry","globalSymbolRegistry","find","e","$Symbol","$Key","symbolKey","reactSymbol","react","symbols","get","SymbolFor","Symbol","SymbolForDescriptor","descriptor","SymbolForValue","$Call","set","ast","type","test","name","length","toUpperCase","prototype","ToBooleanPartial","logger","fbLibraries","reactVersion","tryQuery","reactCreateElement","reactCloneElement","reactIsValidElement","reactComponent","reactChildren","reactSerializerState","reactElement","currentKeyValue","null","uniqueKey","usedReactElementKeys","newKeyValue","$Set","index","key","Math","random","toString","replace","substring","add","array","mapFunc","lengthValue","i","elementProperty","elementPropertyDescriptor","elementValue","GetDescriptorForProperty","propertyName","object","componentType","additionalFunctionEffects","configurable","DeletePropertyOrThrow","lengthProperty","writable","enumerable","$FunctionKind","$Prototype","FunctionPrototype","$FormalParameters","identifier","transforms","push","body","funcNode","functionExpression","blockStatement","file","program","expressionStatement","path","node","isIdentifier","isThisExpression","parentPath","parentNode","isMemberExpression","replaceWith","property","func","map","param"],"mappings":"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","file":"utils.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"../realm.js\";\nimport type { BabelNode, BabelNodeJSXIdentifier } from \"babel-types\";\nimport {\n  Value,\n  NumberValue,\n  ObjectValue,\n  SymbolValue,\n  FunctionValue,\n  StringValue,\n  ECMAScriptSourceFunctionValue,\n} from \"../values/index.js\";\nimport type { Descriptor } from \"../types\";\nimport { Get } from \"../methods/index.js\";\nimport { computeBinary } from \"../evaluators/BinaryExpression.js\";\nimport { type ReactSerializerState, type AdditionalFunctionEffects } from \"../serializer/types.js\";\nimport invariant from \"../invariant.js\";\nimport { Properties } from \"../singletons.js\";\nimport traverse from \"babel-traverse\";\nimport * as t from \"babel-types\";\nimport type { BabelNodeStatement } from \"babel-types\";\nimport { FatalError } from \"../errors.js\";\nimport { To } from \"../singletons.js\";\n\nexport type ReactSymbolTypes = \"react.element\" | \"react.symbol\" | \"react.portal\" | \"react.return\" | \"react.call\";\n\nexport function isReactElement(val: Value): boolean {\n  if (val instanceof ObjectValue && val.properties.has(\"$$typeof\")) {\n    let realm = val.$Realm;\n    let $$typeof = Get(realm, val, \"$$typeof\");\n    let globalObject = realm.$GlobalObject;\n    let globalSymbolValue = Get(realm, globalObject, \"Symbol\");\n\n    if (globalSymbolValue === realm.intrinsics.undefined) {\n      if ($$typeof instanceof NumberValue) {\n        return $$typeof.value === 0xeac7;\n      }\n    } else if ($$typeof instanceof SymbolValue) {\n      let symbolFromRegistry = realm.globalSymbolRegistry.find(e => e.$Symbol === $$typeof);\n      return symbolFromRegistry !== undefined && symbolFromRegistry.$Key === \"react.element\";\n    }\n  }\n  return false;\n}\n\nexport function getReactSymbol(symbolKey: ReactSymbolTypes, realm: Realm): SymbolValue {\n  let reactSymbol = realm.react.symbols.get(symbolKey);\n  if (reactSymbol !== undefined) {\n    return reactSymbol;\n  }\n  let SymbolFor = realm.intrinsics.Symbol.properties.get(\"for\");\n  if (SymbolFor !== undefined) {\n    let SymbolForDescriptor = SymbolFor.descriptor;\n\n    if (SymbolForDescriptor !== undefined) {\n      let SymbolForValue = SymbolForDescriptor.value;\n      if (SymbolForValue !== undefined && typeof SymbolForValue.$Call === \"function\") {\n        reactSymbol = SymbolForValue.$Call(realm.intrinsics.Symbol, [new StringValue(realm, symbolKey)]);\n        realm.react.symbols.set(symbolKey, reactSymbol);\n      }\n    }\n  }\n  invariant(reactSymbol instanceof SymbolValue, `Symbol(\"${symbolKey}\") could not be found in realm`);\n  return reactSymbol;\n}\n\nexport function isTagName(ast: BabelNode): boolean {\n  return ast.type === \"JSXIdentifier\" && /^[a-z]|\\-/.test(((ast: any): BabelNodeJSXIdentifier).name);\n}\n\nexport function isReactComponent(name: string) {\n  return name.length > 0 && name[0] === name[0].toUpperCase();\n}\n\nexport function valueIsClassComponent(realm: Realm, value: Value): boolean {\n  if (!(value instanceof FunctionValue)) {\n    return false;\n  }\n  let prototype = Get(realm, value, \"prototype\");\n\n  if (prototype instanceof ObjectValue) {\n    return To.ToBooleanPartial(realm, Get(realm, prototype, \"isReactComponent\"));\n  }\n  return false;\n}\n\n// logger isn't typed otherwise it will increase flow cycle length :()\nexport function valueIsReactLibraryObject(realm: Realm, value: ObjectValue, logger: any): boolean {\n  if (realm.fbLibraries.react === value) {\n    return true;\n  }\n  // we check that the object is the React or React-like library by checking for\n  // core properties that should exist on it\n  let reactVersion = logger.tryQuery(() => Get(realm, value, \"version\"), undefined, false);\n  if (!(reactVersion instanceof StringValue)) {\n    return false;\n  }\n  let reactCreateElement = logger.tryQuery(() => Get(realm, value, \"createElement\"), undefined, false);\n  if (!(reactCreateElement instanceof FunctionValue)) {\n    return false;\n  }\n  let reactCloneElement = logger.tryQuery(() => Get(realm, value, \"cloneElement\"), undefined, false);\n  if (!(reactCloneElement instanceof FunctionValue)) {\n    return false;\n  }\n  let reactIsValidElement = logger.tryQuery(() => Get(realm, value, \"isValidElement\"), undefined, false);\n  if (!(reactIsValidElement instanceof FunctionValue)) {\n    return false;\n  }\n  let reactComponent = logger.tryQuery(() => Get(realm, value, \"Component\"), undefined, false);\n  if (!(reactComponent instanceof FunctionValue)) {\n    return false;\n  }\n  let reactChildren = logger.tryQuery(() => Get(realm, value, \"Children\"), undefined, false);\n  if (!(reactChildren instanceof ObjectValue)) {\n    return false;\n  }\n  return false;\n}\n\nexport function valueIsLegacyCreateClassComponent(realm: Realm, value: Value): boolean {\n  if (!(value instanceof FunctionValue)) {\n    return false;\n  }\n  let prototype = Get(realm, value, \"prototype\");\n\n  if (prototype instanceof ObjectValue) {\n    return prototype.properties.has(\"__reactAutoBindPairs\");\n  }\n  return false;\n}\n\nexport function addKeyToReactElement(\n  realm: Realm,\n  reactSerializerState: ReactSerializerState,\n  reactElement: ObjectValue\n): void {\n  // we need to apply a key when we're branched\n  let currentKeyValue = Get(realm, reactElement, \"key\") || realm.intrinsics.null;\n  let uniqueKey = getUniqueReactElementKey(\"\", reactSerializerState.usedReactElementKeys);\n  let newKeyValue = new StringValue(realm, uniqueKey);\n  if (currentKeyValue !== realm.intrinsics.null) {\n    newKeyValue = computeBinary(realm, \"+\", currentKeyValue, newKeyValue);\n  }\n  // TODO: This might not be safe in DEV because these objects are frozen (Object.freeze).\n  // We should probably go behind the scenes in this case to by-pass that.\n  reactElement.$Set(\"key\", newKeyValue, reactElement);\n}\n// we create a unique key for each JSXElement to prevent collisions\n// otherwise React will detect a missing/conflicting key at runtime and\n// this can break the reconcilation of JSXElements in arrays\nexport function getUniqueReactElementKey(index?: string, usedReactElementKeys: Set<string>) {\n  let key;\n  do {\n    key = Math.random().toString(36).replace(/[^a-z]+/g, \"\").substring(0, 2);\n  } while (usedReactElementKeys.has(key));\n  usedReactElementKeys.add(key);\n  if (index !== undefined) {\n    return `${key}${index}`;\n  }\n  return key;\n}\n\n// a helper function to loop over ArrayValues\nexport function forEachArrayValue(realm: Realm, array: ObjectValue, mapFunc: Function): void {\n  let lengthValue = Get(realm, array, \"length\");\n  invariant(lengthValue instanceof NumberValue, \"Invalid length on ArrayValue during reconcilation\");\n  let length = lengthValue.value;\n  for (let i = 0; i < length; i++) {\n    let elementProperty = array.properties.get(\"\" + i);\n    let elementPropertyDescriptor = elementProperty && elementProperty.descriptor;\n    invariant(elementPropertyDescriptor, `Invalid ArrayValue[${i}] descriptor`);\n    let elementValue = elementPropertyDescriptor.value;\n    if (elementValue instanceof Value) {\n      mapFunc(elementValue, elementPropertyDescriptor);\n    }\n  }\n}\n\nfunction GetDescriptorForProperty(value: ObjectValue, propertyName: string): ?Descriptor {\n  let object = value.properties.get(propertyName);\n  invariant(object);\n  return object.descriptor;\n}\n\nexport function convertSimpleClassComponentToFunctionalComponent(\n  realm: Realm,\n  componentType: ECMAScriptSourceFunctionValue,\n  additionalFunctionEffects: AdditionalFunctionEffects\n): void {\n  let prototype = componentType.properties.get(\"prototype\");\n  invariant(prototype);\n  invariant(prototype.descriptor);\n  prototype.descriptor.configurable = true;\n  Properties.DeletePropertyOrThrow(realm, componentType, \"prototype\");\n\n  // fix the length as we've changed the arguments\n  let lengthProperty = GetDescriptorForProperty(componentType, \"length\");\n  invariant(lengthProperty);\n  lengthProperty.writable = false;\n  lengthProperty.enumerable = false;\n  lengthProperty.configurable = true;\n  // ensure the length value is set to the new value\n  let lengthValue = Get(realm, componentType, \"length\");\n  invariant(lengthValue instanceof NumberValue);\n  lengthValue.value = 2;\n\n  // change the function kind\n  componentType.$FunctionKind = \"normal\";\n  // set the prototype back to an object\n  componentType.$Prototype = realm.intrinsics.FunctionPrototype;\n  // give the function the functional components params\n  componentType.$FormalParameters = [t.identifier(\"props\"), t.identifier(\"context\")];\n  // add a transform to occur after the additional function has serialized the body of the class\n  additionalFunctionEffects.transforms.push((body: Array<BabelNodeStatement>) => {\n    // as this was a class before and is now a functional component, we need to replace\n    // this.props and this.context to props and context, via the function arugments\n    let funcNode = t.functionExpression(null, [], t.blockStatement(body));\n\n    traverse(\n      t.file(t.program([t.expressionStatement(funcNode)])),\n      {\n        \"Identifier|ThisExpression\"(path) {\n          let node = path.node;\n          if ((t.isIdentifier(node) && node.name === \"this\") || t.isThisExpression(node)) {\n            let parentPath = path.parentPath;\n            let parentNode = parentPath.node;\n\n            if (t.isMemberExpression(parentNode)) {\n              // remove the \"this\" from the member\n              parentPath.replaceWith(parentNode.property);\n            } else {\n              throw new FatalError(\n                `conversion of a simple class component to functional component failed due to \"this\" not being replaced`\n              );\n            }\n          }\n        },\n      },\n      undefined,\n      (undefined: any),\n      undefined\n    );\n  });\n}\n\nexport function normalizeFunctionalComponentParamaters(func: ECMAScriptSourceFunctionValue): void {\n  func.$FormalParameters = func.$FormalParameters.map((param, i) => {\n    if (i === 0) {\n      return t.identifier(\"props\");\n    } else {\n      return t.identifier(\"context\");\n    }\n  });\n}\n"]}