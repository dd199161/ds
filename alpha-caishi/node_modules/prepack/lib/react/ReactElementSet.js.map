{"version":3,"sources":["../../src/react/ReactElementSet.js"],"names":["ReactElementSet","realm","equivalenceSet","reactElementRoot","Map","objectRoot","arrayRoot","emptyArray","emptyObject","intrinsics","ObjectPrototype","map","value","key","has","set","get","val","add","_getArrayValue","_getObjectValue","_createNode","object","currentMap","result","properties","propName","_getKey","prop","_getValue","symbols","symbol","undefined","array","lengthValue","length","i","element","reactElement","type","ref","props"],"mappings":"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","file":"ReactElementSet.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"../realm.js\";\nimport {\n  Value,\n  ObjectValue,\n  StringValue,\n  NumberValue,\n  AbstractValue,\n  ArrayValue,\n  FunctionValue,\n  SymbolValue,\n} from \"../values/index.js\";\nimport invariant from \"../invariant.js\";\nimport { isReactElement } from \"./utils\";\nimport { Get, HashSet } from \"../methods/index.js\";\n\ntype ReactElementValueMapKey = Value | number | string;\ntype ReactElementValueMap = Map<ReactElementValueMapKey, ReactElementNode>;\n\ntype ReactElementKeyMapKey = string | number | SymbolValue;\ntype ReactElementKeyMap = Map<ReactElementKeyMapKey, ReactElementValueMap>;\n\ntype ReactElementNode = {\n  map: ReactElementKeyMap,\n  value: ObjectValue | ArrayValue | null,\n};\n\n// ReactElementSet keeps records around of the values\n// of ReactElement/JSX nodes so we can return the same immutable values\n// where possible, i.e. <div /> === <div />\n//\n// Rather than uses hashes, this class uses linked Maps to track equality of objects.\n// It does this by recursively iterating through objects, by their properties/symbols and using\n// each property key as a map, and then from that map, each value as a map. The value\n// then links to the subsequent property/symbol in the object. This approach ensures insertion\n// is maintained through all objects.\n\nexport default class ReactElementSet {\n  constructor(realm: Realm, equivalenceSet: HashSet<AbstractValue>) {\n    this.realm = realm;\n    this.equivalenceSet = equivalenceSet;\n    this.reactElementRoot = new Map();\n    this.objectRoot = new Map();\n    this.arrayRoot = new Map();\n    this.emptyArray = new ArrayValue(realm);\n    this.emptyObject = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n  }\n  realm: Realm;\n  reactElementRoot: ReactElementKeyMap;\n  objectRoot: ReactElementKeyMap;\n  arrayRoot: ReactElementKeyMap;\n  equivalenceSet: HashSet<AbstractValue>;\n  emptyArray: ArrayValue;\n  emptyObject: ObjectValue;\n\n  _createNode(): ReactElementNode {\n    return {\n      map: new Map(),\n      value: null,\n    };\n  }\n\n  _getKey(key: ReactElementKeyMapKey, map: ReactElementKeyMap): ReactElementValueMap {\n    if (!map.has(key)) {\n      map.set(key, new Map());\n    }\n    return ((map.get(key): any): ReactElementValueMap);\n  }\n\n  _getValue(val: ReactElementValueMapKey, map: ReactElementValueMap): ReactElementNode {\n    if (val instanceof StringValue || val instanceof NumberValue) {\n      val = val.value;\n    } else if (val instanceof AbstractValue) {\n      val = this.equivalenceSet.add(val);\n    } else if (val instanceof ArrayValue) {\n      val = this._getArrayValue(val);\n    } else if (val instanceof ObjectValue && !(val instanceof FunctionValue)) {\n      val = this._getObjectValue(val);\n    }\n    if (!map.has(val)) {\n      map.set(val, this._createNode());\n    }\n    return ((map.get(val): any): ReactElementNode);\n  }\n\n  // for objects: [key/symbol] -> [key/symbol]... as nodes\n  _getObjectValue(object: ObjectValue): ObjectValue {\n    if (isReactElement(object)) {\n      return this.add(object);\n    }\n    let currentMap = this.objectRoot;\n    let result;\n\n    for (let [propName] of object.properties) {\n      currentMap = this._getKey(propName, currentMap);\n      let prop = Get(this.realm, object, propName);\n      result = this._getValue(prop, currentMap);\n      currentMap = result.map;\n    }\n    for (let [symbol] of object.symbols) {\n      currentMap = this._getKey(symbol, currentMap);\n      let prop = Get(this.realm, object, symbol);\n      result = this._getValue(prop, currentMap);\n      currentMap = result.map;\n    }\n    if (result === undefined) {\n      return this.emptyObject;\n    }\n    if (result.value === null) {\n      result.value = object;\n    }\n    return result.value;\n  }\n\n  // for arrays: [0] -> [1] -> [2]... as nodes\n  _getArrayValue(array: ArrayValue): ArrayValue {\n    let lengthValue = Get(this.realm, array, \"length\");\n    invariant(lengthValue instanceof NumberValue);\n    let length = lengthValue.value;\n    let currentMap = this.arrayRoot;\n    let result;\n\n    for (let i = 0; i < length; i++) {\n      currentMap = this._getKey(i, currentMap);\n      let element = Get(this.realm, array, \"\" + i);\n      result = this._getValue(element, currentMap);\n      currentMap = result.map;\n    }\n    if (result === undefined) {\n      return this.emptyArray;\n    }\n    if (result.value === null) {\n      result.value = array;\n    }\n    return result.value;\n  }\n\n  add(reactElement: ObjectValue): ObjectValue {\n    let currentMap = this.reactElementRoot;\n\n    // type\n    currentMap = this._getKey(\"type\", currentMap);\n    let type = Get(this.realm, reactElement, \"type\");\n    let result = this._getValue(type, currentMap);\n    currentMap = result.map;\n    // key\n    currentMap = this._getKey(\"key\", currentMap);\n    let key = Get(this.realm, reactElement, \"key\");\n    result = this._getValue(key, currentMap);\n    currentMap = result.map;\n    // ref\n    currentMap = this._getKey(\"ref\", currentMap);\n    let ref = Get(this.realm, reactElement, \"ref\");\n    result = this._getValue(ref, currentMap);\n    currentMap = result.map;\n    // props\n    currentMap = this._getKey(\"props\", currentMap);\n    let props = Get(this.realm, reactElement, \"props\");\n    result = this._getValue(props, currentMap);\n    currentMap = result.map;\n\n    if (result.value === null) {\n      result.value = reactElement;\n    }\n    invariant(result.value instanceof ObjectValue);\n    return result.value;\n  }\n}\n"]}