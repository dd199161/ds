{"version":3,"sources":["../../src/react/components.js"],"names":["getInitialProps","getInitialContext","createSimpleClassInstance","createClassInstance","evaluateClassConstructor","t","lifecycleMethods","Set","realm","componentType","propsName","$FormalParameters","length","firstParam","isIdentifier","name","value","createAbstractObject","contextName","superTypeParameters","$SuperTypeParameters","undefined","secondParam","props","context","componentPrototype","instance","allowedPropertyAccess","properties","has","add","$GetOwnProperty","P","call","refuseSerialization","classMetadata","instanceProperties","instanceSymbols","symbols","symbol","constructorFunc","evaluatePure","evaluateForEffects","instanceObject","propertyName","getName"],"mappings":"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","file":"components.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"../realm.js\";\nimport {\n  ECMAScriptSourceFunctionValue,\n  AbstractValue,\n  ObjectValue,\n  AbstractObjectValue,\n  SymbolValue,\n} from \"../values/index.js\";\nimport * as t from \"babel-types\";\nimport type { BabelNodeIdentifier } from \"babel-types\";\nimport { valueIsClassComponent } from \"./utils\";\nimport { ExpectedBailOut, SimpleClassBailOut } from \"./errors.js\";\nimport { Get, Construct } from \"../methods/index.js\";\nimport { Properties } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport type { ClassComponentMetadata } from \"../types.js\";\n\nconst lifecycleMethods = new Set([\n  \"componentWillUnmount\",\n  \"componentDidMount\",\n  \"componentWillMount\",\n  \"componentDidUpdate\",\n  \"componentWillUpdate\",\n  \"componentDidCatch\",\n  \"componentWillReceiveProps\",\n]);\n\nexport function getInitialProps(\n  realm: Realm,\n  componentType: ECMAScriptSourceFunctionValue | null\n): AbstractObjectValue {\n  let propsName = null;\n  if (componentType !== null) {\n    if (valueIsClassComponent(realm, componentType)) {\n      propsName = \"this.props\";\n    } else {\n      // otherwise it's a functional component, where the first paramater of the function is \"props\" (if it exists)\n      if (componentType.$FormalParameters.length > 0) {\n        let firstParam = componentType.$FormalParameters[0];\n        if (t.isIdentifier(firstParam)) {\n          propsName = ((firstParam: any): BabelNodeIdentifier).name;\n        }\n      }\n    }\n  }\n  let value = AbstractValue.createAbstractObject(realm, propsName || \"props\");\n  invariant(value instanceof AbstractObjectValue);\n  return value;\n}\n\nexport function getInitialContext(realm: Realm, componentType: ECMAScriptSourceFunctionValue): AbstractObjectValue {\n  let contextName = null;\n  if (valueIsClassComponent(realm, componentType)) {\n    // it's a class component, so we need to check the type on for context of the component prototype\n    let superTypeParameters = componentType.$SuperTypeParameters;\n    contextName = \"this.context\";\n\n    if (superTypeParameters !== undefined) {\n      throw new ExpectedBailOut(\"context on class components not yet supported\");\n    }\n  } else {\n    // otherwise it's a functional component, where the second paramater of the function is \"context\" (if it exists)\n    if (componentType.$FormalParameters.length > 1) {\n      let secondParam = componentType.$FormalParameters[1];\n      if (t.isIdentifier(secondParam)) {\n        contextName = ((secondParam: any): BabelNodeIdentifier).name;\n      }\n    }\n  }\n  let value = AbstractValue.createAbstractObject(realm, contextName || \"context\");\n  return value;\n}\n\nexport function createSimpleClassInstance(\n  realm: Realm,\n  componentType: ECMAScriptSourceFunctionValue,\n  props: ObjectValue | AbstractValue,\n  context: ObjectValue | AbstractValue\n): AbstractObjectValue {\n  let componentPrototype = Get(realm, componentType, \"prototype\");\n  invariant(componentPrototype instanceof ObjectValue);\n  // create an instance object and disable serialization as we don't want to output the internals we set below\n  let instance = new ObjectValue(realm, componentPrototype, \"this\", true);\n  let allowedPropertyAccess = new Set([\"props\", \"context\"]);\n  for (let [name] of componentPrototype.properties) {\n    if (lifecycleMethods.has(name)) {\n      // this error will result in the simple class falling back to a complex class\n      throw new SimpleClassBailOut(\"lifecycle methods are not supported on simple classes\");\n    } else if (name !== \"constructor\") {\n      allowedPropertyAccess.add(name);\n      Properties.Set(realm, instance, name, Get(realm, componentPrototype, name), true);\n    }\n  }\n  // assign props\n  Properties.Set(realm, instance, \"props\", props, true);\n  // assign context\n  Properties.Set(realm, instance, \"context\", context, true);\n  // as this object is simple, we want to check if any access to anything other than\n  // \"this.props\" or \"this.context\" or methods on the class occur\n  let $GetOwnProperty = instance.$GetOwnProperty;\n  instance.$GetOwnProperty = P => {\n    if (!allowedPropertyAccess.has(P)) {\n      // this error will result in the simple class falling back to a complex class\n      throw new SimpleClassBailOut(\"access to basic class instance properties is not supported on simple classes\");\n    }\n    return $GetOwnProperty.call(instance, P);\n  };\n  // enable serialization to support simple instance variables properties\n  instance.refuseSerialization = false;\n  // return the instance\n  return instance;\n}\n\nexport function createClassInstance(\n  realm: Realm,\n  componentType: ECMAScriptSourceFunctionValue,\n  props: ObjectValue | AbstractValue,\n  context: ObjectValue | AbstractValue,\n  classMetadata: ClassComponentMetadata\n): AbstractObjectValue {\n  let componentPrototype = Get(realm, componentType, \"prototype\");\n  invariant(componentPrototype instanceof ObjectValue);\n  let { instanceProperties, instanceSymbols } = classMetadata;\n\n  // create an instance object and disable serialization as we don't want to output the internals we set below\n  let instance = new ObjectValue(realm, componentPrototype, \"this\", true);\n  for (let [name] of componentPrototype.properties) {\n    // ensure we don't set properties that were defined on the instance\n    if (name !== \"constructor\" && !instanceProperties.has(name)) {\n      Properties.Set(realm, instance, name, Get(realm, componentPrototype, name), true);\n    }\n  }\n  for (let [symbol] of componentPrototype.symbols) {\n    // ensure we don't set symbols that were defined on the instance\n    if (!instanceSymbols.has(symbol)) {\n      Properties.Set(realm, instance, symbol, Get(realm, componentPrototype, symbol), true);\n    }\n  }\n  // assign refs\n  Properties.Set(realm, instance, \"refs\", AbstractValue.createAbstractObject(realm, \"this.refs\"), true);\n  // assign props\n  Properties.Set(realm, instance, \"props\", props, true);\n  // assign context\n  Properties.Set(realm, instance, \"context\", context, true);\n  // enable serialization to support simple instance variables properties\n  instance.refuseSerialization = false;\n  // return the instance in an abstract object\n  let value = AbstractValue.createAbstractObject(realm, \"this\", instance);\n  invariant(value instanceof AbstractObjectValue);\n  return value;\n}\n\nexport function evaluateClassConstructor(\n  realm: Realm,\n  constructorFunc: ECMAScriptSourceFunctionValue,\n  props: ObjectValue | AbstractObjectValue,\n  context: ObjectValue | AbstractObjectValue\n): { instanceProperties: Set<string>, instanceSymbols: Set<SymbolValue> } {\n  let instanceProperties = new Set();\n  let instanceSymbols = new Set();\n\n  realm.evaluatePure(() =>\n    realm.evaluateForEffects(\n      () => {\n        let instanceObject = Construct(realm, constructorFunc, [props, context]);\n        invariant(instanceObject instanceof ObjectValue);\n        for (let [propertyName] of instanceObject.properties) {\n          instanceProperties.add(propertyName);\n        }\n        for (let [symbol] of instanceObject.symbols) {\n          instanceSymbols.add(symbol);\n        }\n        return instanceObject;\n      },\n      /*state*/ null,\n      `react component constructor: ${constructorFunc.getName()}`\n    )\n  );\n\n  return {\n    instanceProperties,\n    instanceSymbols,\n  };\n}\n"]}