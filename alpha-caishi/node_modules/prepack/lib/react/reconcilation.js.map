{"version":3,"sources":["../../src/react/reconcilation.js"],"names":["Reconciler","realm","moduleTracer","statistics","reactSerializerState","simpleClassComponents","componentType","logger","wrapInGlobalEnv","evaluatePure","evaluateForEffects","initialProps","initialContext","_renderComponent","result","optimizedTrees","error","logCompletion","diagnostic","message","currentLocation","handleError","getName","props","context","classMetadata","branchStatus","branchState","instance","renderMethod","$Call","intrinsics","undefined","react","classComponentMetadata","has","get","set","reactElement","childContext","value","_getClassComponentMetadata","instanceProperties","instanceSymbols","size","_renderSimpleClassComponent","add","_renderComplexClassComponent","_renderFunctionalComponent","_resolveDeeply","func","fbLibraries","reactRelay","QueryRenderer","length","args","newBranchState","i","applyBranchedLogic","_resolveFragment","typeValue","propsValue","refValue","childrenProperty","properties","childrenPropertyDescriptor","descriptor","childrenPropertyValue","resolvedChildren","_assignBailOutMessage","renderStrategy","_getRenderStrategy","render","_renderRelayQueryRendererComponent","captureBranchedValue","inlinedComponents","$BailOutReason","arrayValue","elementValue","elementPropertyDescriptor"],"mappings":"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","file":"reconcilation.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm, type Effects } from \"../realm.js\";\nimport { ModuleTracer } from \"../utils/modules.js\";\nimport {\n  ECMAScriptSourceFunctionValue,\n  Value,\n  UndefinedValue,\n  StringValue,\n  NumberValue,\n  BooleanValue,\n  NullValue,\n  AbstractValue,\n  ArrayValue,\n  ObjectValue,\n  AbstractObjectValue,\n} from \"../values/index.js\";\nimport { ReactStatistics, type ReactSerializerState } from \"../serializer/types.js\";\nimport { isReactElement, valueIsClassComponent, forEachArrayValue, valueIsLegacyCreateClassComponent } from \"./utils\";\nimport { Get } from \"../methods/index.js\";\nimport invariant from \"../invariant.js\";\nimport { CompilerDiagnostic, FatalError } from \"../errors.js\";\nimport { BranchState, type BranchStatusEnum } from \"./branching.js\";\nimport {\n  getInitialProps,\n  getInitialContext,\n  createClassInstance,\n  createSimpleClassInstance,\n  evaluateClassConstructor,\n} from \"./components.js\";\nimport { ExpectedBailOut, SimpleClassBailOut } from \"./errors.js\";\nimport { Completion } from \"../completions.js\";\nimport { Logger } from \"../utils/logger.js\";\nimport type { ClassComponentMetadata } from \"../types.js\";\n\ntype RenderStrategy = \"NORMAL\" | \"RELAY_QUERY_RENDERER\";\n\nexport class Reconciler {\n  constructor(\n    realm: Realm,\n    moduleTracer: ModuleTracer,\n    statistics: ReactStatistics,\n    reactSerializerState: ReactSerializerState,\n    simpleClassComponents: Set<Value>\n  ) {\n    this.realm = realm;\n    this.moduleTracer = moduleTracer;\n    this.statistics = statistics;\n    this.reactSerializerState = reactSerializerState;\n    this.simpleClassComponents = simpleClassComponents;\n  }\n\n  realm: Realm;\n  moduleTracer: ModuleTracer;\n  statistics: ReactStatistics;\n  reactSerializerState: ReactSerializerState;\n  simpleClassComponents: Set<Value>;\n\n  render(componentType: ECMAScriptSourceFunctionValue, logger: Logger): Effects {\n    return this.realm.wrapInGlobalEnv(() =>\n      this.realm.evaluatePure(() =>\n        // TODO: (sebmarkbage): You could use the return value of this to detect if there are any mutations on objects other\n        // than newly created ones. Then log those to the error logger. That'll help us track violations in\n        // components. :)\n        this.realm.evaluateForEffects(\n          () => {\n            // initialProps and initialContext are created from Flow types from:\n            // - if a functional component, the 1st and 2nd paramater of function\n            // - if a class component, use this.props and this.context\n            // if there are no Flow types for props or context, we will throw a\n            // FatalError, unless it's a functional component that has no paramater\n            // i.e let MyComponent = () => <div>Hello world</div>\n            try {\n              let initialProps = getInitialProps(this.realm, componentType);\n              let initialContext = getInitialContext(this.realm, componentType);\n              let { result } = this._renderComponent(componentType, initialProps, initialContext, \"ROOT\", null);\n              this.statistics.optimizedTrees++;\n              return result;\n            } catch (error) {\n              // if there was a bail-out on the root component in this reconcilation process, then this\n              // should be an invariant as the user has explicitly asked for this component to get folded\n              if (error instanceof Completion) {\n                logger.logCompletion(error);\n                throw error;\n              } else if (error instanceof ExpectedBailOut) {\n                let diagnostic = new CompilerDiagnostic(\n                  `__registerReactComponentRoot() failed due to - ${error.message}`,\n                  this.realm.currentLocation,\n                  \"PP0020\",\n                  \"FatalError\"\n                );\n                this.realm.handleError(diagnostic);\n                throw new FatalError();\n              }\n              throw error;\n            }\n          },\n          /*state*/ null,\n          `react component: ${componentType.getName()}`\n        )\n      )\n    );\n  }\n\n  _renderComplexClassComponent(\n    componentType: ECMAScriptSourceFunctionValue,\n    props: ObjectValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    classMetadata: ClassComponentMetadata,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null\n  ): Value {\n    if (branchStatus !== \"ROOT\") {\n      throw new ExpectedBailOut(\n        \"only complex class components at the root of __registerReactComponentRoot() are supported\"\n      );\n    }\n    // create a new instance of this React class component\n    let instance = createClassInstance(this.realm, componentType, props, context, classMetadata);\n    // get the \"render\" method off the instance\n    let renderMethod = Get(this.realm, instance, \"render\");\n    invariant(\n      renderMethod instanceof ECMAScriptSourceFunctionValue && renderMethod.$Call,\n      \"Expected render method to be a FunctionValue with $Call method\"\n    );\n    // the render method doesn't have any arguments, so we just assign the context of \"this\" to be the instance\n    return renderMethod.$Call(instance, []);\n  }\n\n  _renderSimpleClassComponent(\n    componentType: ECMAScriptSourceFunctionValue,\n    props: ObjectValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null\n  ): Value {\n    // create a new simple instance of this React class component\n    let instance = createSimpleClassInstance(this.realm, componentType, props, context);\n    // get the \"render\" method off the instance\n    let renderMethod = Get(this.realm, instance, \"render\");\n    invariant(\n      renderMethod instanceof ECMAScriptSourceFunctionValue && renderMethod.$Call,\n      \"Expected render method to be a FunctionValue with $Call method\"\n    );\n    // the render method doesn't have any arguments, so we just assign the context of \"this\" to be the instance\n    return renderMethod.$Call(instance, []);\n  }\n\n  _renderFunctionalComponent(\n    componentType: ECMAScriptSourceFunctionValue,\n    props: ObjectValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue\n  ) {\n    invariant(componentType.$Call, \"Expected componentType to be a FunctionValue with $Call method\");\n    return componentType.$Call(this.realm.intrinsics.undefined, [props, context]);\n  }\n\n  _getClassComponentMetadata(\n    componentType: ECMAScriptSourceFunctionValue,\n    props: ObjectValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue\n  ): ClassComponentMetadata {\n    if (this.realm.react.classComponentMetadata.has(componentType)) {\n      let classMetadata = this.realm.react.classComponentMetadata.get(componentType);\n      invariant(classMetadata);\n      return classMetadata;\n    }\n    // get all this assignments in the constructor\n    let classMetadata = evaluateClassConstructor(this.realm, componentType, props, context);\n    this.realm.react.classComponentMetadata.set(componentType, classMetadata);\n    return classMetadata;\n  }\n\n  _renderRelayQueryRendererComponent(\n    reactElement: ObjectValue,\n    props: ObjectValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue\n  ) {\n    // TODO: for now we do nothing, in the future we want to evaluate the render prop of this component\n    return {\n      result: reactElement,\n      childContext: context,\n    };\n  }\n\n  _renderComponent(\n    componentType: Value,\n    props: ObjectValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null\n  ) {\n    invariant(componentType instanceof ECMAScriptSourceFunctionValue);\n    let value;\n    let childContext = context;\n\n    // first we check if it's a legacy class component\n    if (valueIsLegacyCreateClassComponent(this.realm, componentType)) {\n      throw new ExpectedBailOut(\"components created with create-react-class are not supported\");\n    } else if (valueIsClassComponent(this.realm, componentType)) {\n      let classMetadata = this._getClassComponentMetadata(componentType, props, context);\n      let { instanceProperties, instanceSymbols } = classMetadata;\n\n      // if there were no this assignments we can try and render it as a simple class component\n      if (instanceProperties.size === 0 && instanceSymbols.size === 0) {\n        // We first need to know what type of class component we're dealing with.\n        // A \"simple\" class component is defined as:\n        //\n        // - having only a \"render\" method\n        // - having no lifecycle events\n        // - having no state\n        // - having no instance variables\n        //\n        // the only things a class component should be able to access on \"this\" are:\n        // - this.props\n        // - this.context\n        // - this._someRenderMethodX() etc\n        //\n        // Otherwise, the class component is a \"complex\" one.\n        // To begin with, we don't know what type of component it is, so we try and render it as if it were\n        // a simple component using the above heuristics. If an error occurs during this process, we assume\n        // that the class wasn't simple, then try again with the \"complex\" heuristics.\n        try {\n          value = this._renderSimpleClassComponent(componentType, props, context, branchStatus, branchState);\n          this.simpleClassComponents.add(value);\n        } catch (error) {\n          // if we get back a SimpleClassBailOut error, we know that this class component\n          // wasn't a simple one and is likely to be a complex class component instead\n          if (error instanceof SimpleClassBailOut) {\n            // the component was not simple, so we continue with complex case\n          } else {\n            // else we rethrow the error\n            throw error;\n          }\n        }\n      }\n      // handle the complex class component if there is not value\n      if (value === undefined) {\n        value = this._renderComplexClassComponent(\n          componentType,\n          props,\n          context,\n          classMetadata,\n          branchStatus,\n          branchState\n        );\n      }\n    } else {\n      value = this._renderFunctionalComponent(componentType, props, context);\n    }\n    invariant(value !== undefined);\n    return {\n      result: this._resolveDeeply(value, context, branchStatus === \"ROOT\" ? \"NO_BRANCH\" : branchStatus, branchState),\n      childContext,\n    };\n  }\n\n  _getRenderStrategy(func: Value): RenderStrategy {\n    // check if it's a ReactRelay.QueryRenderer\n    if (this.realm.fbLibraries.reactRelay !== undefined) {\n      let QueryRenderer = Get(this.realm, this.realm.fbLibraries.reactRelay, \"QueryRenderer\");\n      if (func === QueryRenderer) {\n        return \"RELAY_QUERY_RENDERER\";\n      }\n    }\n    return \"NORMAL\";\n  }\n\n  _resolveDeeply(\n    value: Value,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null\n  ) {\n    if (\n      value instanceof StringValue ||\n      value instanceof NumberValue ||\n      value instanceof BooleanValue ||\n      value instanceof NullValue ||\n      value instanceof UndefinedValue\n    ) {\n      // terminal values\n      return value;\n    } else if (value instanceof AbstractValue) {\n      let length = value.args.length;\n      if (length > 0) {\n        let newBranchState = new BranchState();\n        // TODO investigate what other kinds than \"conditional\" might be safe to deeply resolve\n        for (let i = 0; i < length; i++) {\n          value.args[i] = this._resolveDeeply(value.args[i], context, \"NEW_BRANCH\", newBranchState);\n        }\n        newBranchState.applyBranchedLogic(this.realm, this.reactSerializerState);\n      }\n      return value;\n    }\n    // TODO investigate what about other iterables type objects\n    if (value instanceof ArrayValue) {\n      this._resolveFragment(value, context, branchStatus, branchState);\n      return value;\n    }\n    if (value instanceof ObjectValue && isReactElement(value)) {\n      // we call value reactElement, to make it clearer what we're dealing with in this block\n      let reactElement = value;\n      let typeValue = Get(this.realm, reactElement, \"type\");\n      let propsValue = Get(this.realm, reactElement, \"props\");\n      let refValue = Get(this.realm, reactElement, \"ref\");\n      if (typeValue instanceof StringValue) {\n        // terminal host component. Start evaluating its children.\n        if (propsValue instanceof ObjectValue) {\n          let childrenProperty = propsValue.properties.get(\"children\");\n          if (childrenProperty) {\n            let childrenPropertyDescriptor = childrenProperty.descriptor;\n            // if the descriptor is undefined, the property is likely deleted, if it exists\n            // proceed to resolve the children\n            if (childrenPropertyDescriptor !== undefined) {\n              let childrenPropertyValue = childrenPropertyDescriptor.value;\n              invariant(childrenPropertyValue instanceof Value, `Bad \"children\" prop passed in JSXElement`);\n              let resolvedChildren = this._resolveDeeply(childrenPropertyValue, context, branchStatus, branchState);\n              childrenPropertyDescriptor.value = resolvedChildren;\n            }\n          }\n        }\n        return reactElement;\n      }\n      // we do not support \"ref\" on <Component /> ReactElements\n      if (!(refValue instanceof NullValue)) {\n        this._assignBailOutMessage(reactElement, `Bail-out: refs are not supported on <Components />`);\n        return reactElement;\n      }\n      if (!(propsValue instanceof ObjectValue || propsValue instanceof AbstractObjectValue)) {\n        this._assignBailOutMessage(\n          reactElement,\n          `Bail-out: props on <Component /> was not not an ObjectValue or an AbstractValue`\n        );\n        return reactElement;\n      }\n      let renderStrategy = this._getRenderStrategy(typeValue);\n\n      if (renderStrategy === \"NORMAL\" && !(typeValue instanceof ECMAScriptSourceFunctionValue)) {\n        this._assignBailOutMessage(\n          reactElement,\n          `Bail-out: type on <Component /> was not a ECMAScriptSourceFunctionValue`\n        );\n        return reactElement;\n      }\n      try {\n        let result;\n        switch (renderStrategy) {\n          case \"NORMAL\": {\n            let render = this._renderComponent(\n              typeValue,\n              propsValue,\n              context,\n              branchStatus === \"NEW_BRANCH\" ? \"BRANCH\" : branchStatus,\n              null\n            );\n            result = render.result;\n            break;\n          }\n          case \"RELAY_QUERY_RENDERER\": {\n            let render = this._renderRelayQueryRendererComponent(reactElement, propsValue, context);\n            result = render.result;\n            break;\n          }\n          default:\n            invariant(false, \"unsupported render strategy\");\n        }\n\n        if (result instanceof UndefinedValue) {\n          this._assignBailOutMessage(reactElement, `Bail-out: undefined was returned from render`);\n          if (branchStatus === \"NEW_BRANCH\" && branchState) {\n            return branchState.captureBranchedValue(typeValue, reactElement);\n          }\n          return reactElement;\n        }\n        this.statistics.inlinedComponents++;\n        if (branchStatus === \"NEW_BRANCH\" && branchState) {\n          return branchState.captureBranchedValue(typeValue, result);\n        }\n        return result;\n      } catch (error) {\n        // assign a bail out message\n        if (error instanceof ExpectedBailOut) {\n          this._assignBailOutMessage(reactElement, \"Bail-out: \" + error.message);\n        } else if (error instanceof FatalError) {\n          this._assignBailOutMessage(reactElement, \"Evaluation bail-out\");\n        } else {\n          throw error;\n        }\n        // a child component bailed out during component folding, so return the function value and continue\n        if (branchStatus === \"NEW_BRANCH\" && branchState) {\n          return branchState.captureBranchedValue(typeValue, reactElement);\n        }\n        return reactElement;\n      }\n    } else {\n      throw new ExpectedBailOut(\"unsupported value type during reconcilation\");\n    }\n  }\n\n  _assignBailOutMessage(reactElement: ObjectValue, message: string): void {\n    // $BailOutReason is a field on ObjectValue that allows us to specify a message\n    // that gets serialized as a comment node during the ReactElement serialization stage\n    if (reactElement.$BailOutReason !== undefined) {\n      // merge bail out messages if one already exists\n      reactElement.$BailOutReason += `, ${message}`;\n    } else {\n      reactElement.$BailOutReason = message;\n    }\n  }\n\n  _resolveFragment(\n    arrayValue: ArrayValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null\n  ) {\n    forEachArrayValue(this.realm, arrayValue, (elementValue, elementPropertyDescriptor) => {\n      elementPropertyDescriptor.value = this._resolveDeeply(elementValue, context, branchStatus, branchState);\n    });\n  }\n}\n"]}