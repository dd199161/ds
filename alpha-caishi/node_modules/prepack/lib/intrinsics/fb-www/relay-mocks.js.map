{"version":3,"sources":["../../../src/intrinsics/fb-www/relay-mocks.js"],"names":["createMockReactRelay","realm","relayRequireName","reactRelay","intrinsics","ObjectPrototype","queryRendererComponent","CreateDataPropertyOrThrow","graphql","createFragmentContainer"],"mappings":";;;;;QAgBgBA,oB,GAAAA,oB;;AAJhB;;AACA;;AACA;;AAdA;;;;;;;;;AAgBO,SAASA,oBAAT,CAA8BC,KAA9B,EAA4CC,gBAA5C,EAAmF;AACxF,MAAIC,aAAa,uBAAgBF,KAAhB,EAAuBA,MAAMG,UAAN,CAAiBC,eAAxC,iBAAqEH,gBAArE,UAA2F,IAA3F,CAAjB;AACA;AACA,MAAII,yBAAyB,2BAAeL,KAAf,EAAsB,UAAtB,iBAA8CC,gBAA9C,uBAA7B;AACA,qBAAOK,yBAAP,CAAiCN,KAAjC,EAAwCE,UAAxC,EAAoD,eAApD,EAAqEG,sBAArE;;AAEA,MAAIE,UAAU,2BAAeP,KAAf,EAAsB,UAAtB,iBAA8CC,gBAA9C,iBAAd;AACA,qBAAOK,yBAAP,CAAiCN,KAAjC,EAAwCE,UAAxC,EAAoD,SAApD,EAA+DK,OAA/D;;AAEA,MAAIC,0BAA0B,2BAC5BR,KAD4B,EAE5B,UAF4B,iBAGhBC,gBAHgB,iCAA9B;AAKA,qBAAOK,yBAAP,CAAiCN,KAAjC,EAAwCE,UAAxC,EAAoD,yBAApD,EAA+EM,uBAA/E;AACA,SAAON,UAAP;AACD","file":"relay-mocks.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { ObjectValue } from \"../../values/index.js\";\nimport { Create } from \"../../singletons.js\";\nimport { createAbstract } from \"../prepack/utils.js\";\n\nexport function createMockReactRelay(realm: Realm, relayRequireName: string): ObjectValue {\n  let reactRelay = new ObjectValue(realm, realm.intrinsics.ObjectPrototype, `require(\"${relayRequireName}\")`, true);\n  // for QueryRenderer, we want to leave the component alone but process it's \"render\" prop\n  let queryRendererComponent = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").QueryRenderer`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"QueryRenderer\", queryRendererComponent);\n\n  let graphql = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").graphql`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"graphql\", graphql);\n\n  let createFragmentContainer = createAbstract(\n    realm,\n    \"function\",\n    `require(\"${relayRequireName}\").createFragmentContainer`\n  );\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"createFragmentContainer\", createFragmentContainer);\n  return reactRelay;\n}\n"]}