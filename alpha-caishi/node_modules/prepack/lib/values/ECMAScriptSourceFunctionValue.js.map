{"version":3,"sources":["../../src/values/ECMAScriptSourceFunctionValue.js"],"names":["t","ECMAScriptSourceFunctionValue","realm","intrinsicName","uniqueTag","$ECMAScriptCode","uniqueOrderedTag","__originalName","params","$FormalParameters","expected","length","i","param","isAssignmentPattern","isRestElement","getLength"],"mappings":";;;;;;;;AAcA;;AACA;;IAAYA,C;;AACZ;;;;;;;;;;;;+eAhBA;;;;;;;;;AAkBA;IACqBC,6B;;;AACnB,yCAAYC,KAAZ,EAA0BC,aAA1B,EAAkD;AAAA;;AAAA,yJAC1CD,KAD0C,EACnCC,aADmC;AAEjD;;;;;;AASD;8BACkB;AAChB,UAAMC,YAAc,KAAKC,eAAP,CAAmDC,gBAArE;AACA;AACA,+BAAUF,SAAV;AACA,aAAO,KAAKG,cAAL,GAAsB,KAAKA,cAA3B,UAAiDH,SAAxD;AACD;;;uCAE2B;AAC1B,UAAII,SAAS,KAAKC,iBAAlB;AACA,UAAIC,WAAWF,OAAOG,MAAtB;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,OAAOG,MAA3B,EAAmCC,GAAnC,EAAwC;AACtC,YAAIC,QAAQL,OAAOI,CAAP,CAAZ;AACA,YAAIZ,EAAEc,mBAAF,CAAsBD,KAAtB,KAAgCb,EAAEe,aAAF,CAAgBF,KAAhB,CAApC,EAA4D;AAC1DH,qBAAWE,CAAX;AACA;AACD;AACF;AACD,aAAOF,aAAa,KAAKM,SAAL,EAApB;AACD;;;;;;kBA/BkBf,6B","file":"ECMAScriptSourceFunctionValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { BabelNodeBlockStatement, BabelNodeSourceLocation, BabelNodeLVal } from \"babel-types\";\nimport type { FunctionBodyAstNode } from \"../types.js\";\nimport { ECMAScriptFunctionValue } from \"./index.js\";\nimport * as t from \"babel-types\";\nimport invariant from \"../invariant\";\n\n/* Non built-in ECMAScript function objects with source code */\nexport default class ECMAScriptSourceFunctionValue extends ECMAScriptFunctionValue {\n  constructor(realm: Realm, intrinsicName?: string) {\n    super(realm, intrinsicName);\n  }\n\n  $Strict: boolean;\n  $FormalParameters: Array<BabelNodeLVal>;\n  $ECMAScriptCode: BabelNodeBlockStatement;\n  $HasComputedName: ?boolean;\n  $HasEmptyConstructor: ?boolean;\n  loc: ?BabelNodeSourceLocation;\n\n  // Override.\n  getName(): string {\n    const uniqueTag = ((this.$ECMAScriptCode: any): FunctionBodyAstNode).uniqueOrderedTag;\n    // Should only be called after the function is initialized.\n    invariant(uniqueTag);\n    return this.__originalName ? this.__originalName : `f#${uniqueTag}`;\n  }\n\n  hasDefaultLength(): boolean {\n    let params = this.$FormalParameters;\n    let expected = params.length;\n    for (let i = 0; i < params.length; i++) {\n      let param = params[i];\n      if (t.isAssignmentPattern(param) || t.isRestElement(param)) {\n        expected = i;\n        break;\n      }\n    }\n    return expected === this.getLength();\n  }\n}\n"]}