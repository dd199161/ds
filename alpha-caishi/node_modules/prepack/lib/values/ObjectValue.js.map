{"version":3,"sources":["../../src/values/ObjectValue.js"],"names":["t","isWidenedValue","v","kind","args","a","lengthTemplateSrc","lengthTemplate","ObjectValue","realm","proto","intrinsicName","refuseSerialization","recordNewObject","useAbstractInterpretation","setupBindings","getTrackedPropertyNames","$Prototype","intrinsics","null","$Extensible","true","_isPartial","false","_hasLeaked","_isSimple","properties","Map","symbols","$IsClassPrototype","trackedPropertyNames","propertyNames","propName","desc","writeable","value","undefined","descriptor","object","key","x","getHash","hashValue","$Realm","objectCount","isPartialObject","size","values","propertyBinding","writable","ObjectPrototype","isSimpleObject","$SymbolData","$StringData","$NumberData","$BooleanData","$DateValue","$RegExpMatcher","$SetData","$MapData","$DataView","$ArrayBufferData","$WeakMapData","$WeakSetData","react","enabled","$TypedArrayName","name","length","callback","defineNativeProperty","$DefineOwnProperty","enumerable","configurable","funcName","$Description","throwIfNotConcreteString","func","get","set","isLeakedObject","unknownProperty","reportIntrospectionError","keyArray","Array","from","keys","filter","pb","pv","mightHaveBeenDeleted","callReportObjectGetOwnProperties","stack","obj","ThrowIfMightHaveBeenDeleted","serializedDesc","serialize","Object","defineProperty","V","OrdinarySetPrototypeOf","P","OrdinaryGetOwnProperty","Desc","OrdinaryDefineOwnProperty","$GetOwnProperty","Receiver","prop","val","specializeJoin","getType","createFromTemplate","$Get","mightNotBeString","mightNotBeNumber","result","createTemporalFromBuildFunction","o","p","memberExpression","createFromType","cond","createFromBinaryOp","joinValuesAsConditional","absVal","ob","pName","pNumber","generic_cond","specializeCond","arg1","arg2","createFromConditionalOp","expressionLocation","OrdinarySet","$Set","pIsLoopVar","pIsNumeric","isTypeCompatibleWith","createTemplate","recordModifiedProperty","newVal","oldVal","savedUnknownProperty","delete","empty","OrdinaryDelete","prototype","binding"],"mappings":"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","file":"ObjectValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm, ExecutionContext } from \"../realm.js\";\nimport { FatalError } from \"../errors.js\";\nimport type {\n  DataBlock,\n  Descriptor,\n  IterationKind,\n  ObjectKind,\n  PromiseCapability,\n  PromiseReaction,\n  PropertyBinding,\n  PropertyKeyValue,\n  TypedArrayKind,\n} from \"../types.js\";\nimport {\n  AbstractValue,\n  BooleanValue,\n  ConcreteValue,\n  NativeFunctionValue,\n  NullValue,\n  NumberValue,\n  StringValue,\n  SymbolValue,\n  UndefinedValue,\n  Value,\n} from \"./index.js\";\nimport { isReactElement } from \"../react/utils.js\";\nimport buildExpressionTemplate from \"../utils/builder.js\";\nimport { ECMAScriptSourceFunctionValue, type NativeFunctionCallback } from \"./index.js\";\nimport {\n  IsDataDescriptor,\n  OrdinaryOwnPropertyKeys,\n  OrdinaryGet,\n  OrdinaryHasProperty,\n  OrdinaryIsExtensible,\n  OrdinaryPreventExtensions,\n} from \"../methods/index.js\";\nimport { Join, Properties } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport type { typeAnnotation } from \"babel-types\";\nimport * as t from \"babel-types\";\n\nfunction isWidenedValue(v: void | Value) {\n  if (!(v instanceof AbstractValue)) return false;\n  if (v.kind === \"widened\" || v.kind === \"widened property\") return true;\n  for (let a of v.args) {\n    if (isWidenedValue(a)) return true;\n  }\n  return false;\n}\n\nconst lengthTemplateSrc = \"(A).length\";\nconst lengthTemplate = buildExpressionTemplate(lengthTemplateSrc);\n\nexport default class ObjectValue extends ConcreteValue {\n  constructor(\n    realm: Realm,\n    proto?: ObjectValue | NullValue,\n    intrinsicName?: string,\n    refuseSerialization: boolean = false\n  ) {\n    super(realm, intrinsicName);\n    realm.recordNewObject(this);\n    if (realm.useAbstractInterpretation) this.setupBindings(this.getTrackedPropertyNames());\n    this.$Prototype = proto || realm.intrinsics.null;\n    this.$Extensible = realm.intrinsics.true;\n    this._isPartial = realm.intrinsics.false;\n    this._hasLeaked = realm.intrinsics.false;\n    this._isSimple = realm.intrinsics.false;\n    this.properties = new Map();\n    this.symbols = new Map();\n    this.refuseSerialization = refuseSerialization;\n    this.$IsClassPrototype = false;\n  }\n\n  static trackedPropertyNames = [\n    \"_isPartial\",\n    \"_hasLeaked\",\n    \"_isSimple\",\n    \"$ArrayIteratorNextIndex\",\n    \"$DateValue\",\n    \"$Extensible\",\n    \"$IteratedList\",\n    \"$IteratedObject\",\n    \"$IteratedSet\",\n    \"$IteratedString\",\n    \"$Map\",\n    \"$MapData\",\n    \"$MapNextIndex\",\n    \"$Prototype\",\n    \"$SetData\",\n    \"$SetNextIndex\",\n    \"$StringIteratorNextIndex\",\n    \"$WeakMapData\",\n    \"$WeakSetData\",\n  ];\n\n  getTrackedPropertyNames(): Array<string> {\n    return ObjectValue.trackedPropertyNames;\n  }\n\n  setupBindings(propertyNames: Array<string>) {\n    for (let propName of propertyNames) {\n      let desc = { writeable: true, value: undefined };\n      (this: any)[propName + \"_binding\"] = {\n        descriptor: desc,\n        object: this,\n        key: propName,\n      };\n    }\n  }\n\n  static setupTrackedPropertyAccessors(propertyNames: Array<string>) {\n    for (let propName of propertyNames) {\n      Object.defineProperty(ObjectValue.prototype, propName, {\n        configurable: true,\n        get: function() {\n          let binding = this[propName + \"_binding\"];\n          return binding.descriptor.value;\n        },\n        set: function(v) {\n          invariant(!this.isLeakedObject(), \"cannot mutate a leaked object\");\n          let binding = this[propName + \"_binding\"];\n          this.$Realm.recordModifiedProperty(binding);\n          binding.descriptor.value = v;\n        },\n      });\n    }\n  }\n\n  $Prototype: ObjectValue | NullValue;\n  $Extensible: BooleanValue;\n\n  $ParameterMap: void | ObjectValue; // undefined when the property is \"missing\"\n  $SymbolData: void | SymbolValue | AbstractValue;\n  $StringData: void | StringValue | AbstractValue;\n  $NumberData: void | NumberValue | AbstractValue;\n  $BooleanData: void | BooleanValue | AbstractValue;\n\n  // error\n  $ErrorData: void | {\n    // undefined when the property is \"missing\"\n    contextStack: Array<ExecutionContext>,\n    locationData: void | {\n      filename: string,\n      sourceCode: string,\n      loc: { line: number, column: number },\n      stackDecorated: boolean,\n    },\n  };\n\n  // function\n  $Call: void | ((thisArgument: Value, argumentsList: Array<Value>) => Value);\n  $Construct: void | ((argumentsList: Array<Value>, newTarget: ObjectValue) => ObjectValue);\n\n  // promise\n  $Promise: ?ObjectValue;\n  $AlreadyResolved: void | { value: boolean };\n  $PromiseState: void | \"pending\" | \"fulfilled\" | \"rejected\";\n  $PromiseResult: void | Value;\n  $PromiseFulfillReactions: void | Array<PromiseReaction>;\n  $PromiseRejectReactions: void | Array<PromiseReaction>;\n  $PromiseIsHandled: void | boolean;\n  $Capability: void | PromiseCapability;\n  $AlreadyCalled: void | { value: boolean };\n  $Index: void | number;\n  $Values: void | Array<Value>;\n  $Capabilities: void | PromiseCapability;\n  $RemainingElements: void | { value: number };\n\n  // iterator\n  $IteratedList: void | Array<Value>;\n  $ListIteratorNextIndex: void | number;\n  $IteratorNext: void | NativeFunctionValue;\n\n  // set\n  $SetIterationKind: void | IterationKind;\n  $SetNextIndex: void | number;\n  $IteratedSet: void | ObjectValue | UndefinedValue;\n  $SetData: void | Array<void | Value>;\n\n  // react\n  $SuperTypeParameters: void | typeAnnotation;\n\n  // map\n  $MapIterationKind: void | IterationKind;\n  $MapNextIndex: void | NumberValue;\n  $MapData: void | Array<{ $Key: void | Value, $Value: void | Value }>;\n  $Map: void | ObjectValue | UndefinedValue;\n\n  // weak map\n  $WeakMapData: void | Array<{ $Key: void | Value, $Value: void | Value }>;\n\n  // weak set\n  $WeakSetData: void | Array<void | Value>;\n\n  // date\n  $DateValue: void | NumberValue | AbstractValue; // of type number\n\n  // array\n  $ArrayIterationKind: void | IterationKind;\n  $ArrayIteratorNextIndex: void | NumberValue;\n  $IteratedObject: void | UndefinedValue | ObjectValue;\n\n  // regex\n  $OriginalSource: void | string;\n  $OriginalFlags: void | string;\n  $RegExpMatcher: void | ((S: string, lastIndex: number) => ?{ endIndex: number, captures: Array<any> });\n\n  // string\n  $StringIteratorNextIndex: void | number;\n  $IteratedString: void | StringValue;\n\n  // data view\n  $DataView: void | true;\n  $ViewedArrayBuffer: void | ObjectValue;\n  $ByteLength: void | number;\n  $ByteOffset: void | number;\n\n  // array buffer\n  $ArrayBufferData: void | null | DataBlock;\n  $ArrayBufferByteLength: void | number;\n\n  // generator\n  $GeneratorState: void | \"suspendedStart\" | \"executing\";\n  $GeneratorContext: void | ExecutionContext;\n\n  // typed array\n  $TypedArrayName: void | TypedArrayKind;\n  $ViewedArrayBuffer: void | ObjectValue;\n  $ArrayLength: void | number;\n\n  // backpointer to the constructor if this object was created its prototype object\n  originalConstructor: void | ECMAScriptSourceFunctionValue;\n\n  // partial objects\n  _isPartial: BooleanValue;\n\n  // tainted objects\n  _hasLeaked: AbstractValue | BooleanValue;\n\n  // If true, the object has no property getters or setters and it is safe\n  // to return AbstractValue for unknown properties.\n  _isSimple: BooleanValue;\n\n  isTemplate: void | true;\n\n  properties: Map<string, PropertyBinding>;\n  symbols: Map<SymbolValue, PropertyBinding>;\n  unknownProperty: void | PropertyBinding;\n\n  // An object value with an intrinsic name can either exist from the beginning of time,\n  // or it can be associated with a particular point in time by being used as a template\n  // when deriving an abstract value via a generator.\n  intrinsicNameGenerated: void | true;\n  hashValue: void | number;\n\n  // ReactElement\n  $BailOutReason: void | string;\n\n  // ES2015 classes\n  $IsClassPrototype: boolean;\n\n  equals(x: Value): boolean {\n    return x instanceof ObjectValue && this.getHash() === x.getHash();\n  }\n\n  getHash(): number {\n    if (!this.hashValue) {\n      this.hashValue = ++this.$Realm.objectCount;\n    }\n    return this.hashValue;\n  }\n\n  // We track some internal state as properties on the global object, these should\n  // never be serialized.\n  refuseSerialization: boolean;\n\n  mightBeFalse(): boolean {\n    return false;\n  }\n\n  mightNotBeObject(): boolean {\n    return false;\n  }\n\n  throwIfNotObject(): ObjectValue {\n    return this;\n  }\n\n  makeNotPartial(): void {\n    this._isPartial = this.$Realm.intrinsics.false;\n  }\n\n  makePartial(): void {\n    this._isPartial = this.$Realm.intrinsics.true;\n  }\n\n  makeSimple(): void {\n    this._isSimple = this.$Realm.intrinsics.true;\n  }\n\n  isPartialObject(): boolean {\n    return this._isPartial.value;\n  }\n\n  leak(): void {\n    this._hasLeaked = this.$Realm.intrinsics.true;\n  }\n\n  isLeakedObject(): boolean {\n    if (this._hasLeaked instanceof BooleanValue) {\n      return this._hasLeaked.value;\n    }\n    if (this._hasLeaked === undefined) {\n      return false;\n    }\n    return true;\n  }\n\n  isSimpleObject(): boolean {\n    if (this._isSimple.value) return true;\n    if (this.isPartialObject()) return false;\n    if (this.symbols.size > 0) return false;\n    for (let propertyBinding of this.properties.values()) {\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; // deleted\n      if (!IsDataDescriptor(this.$Realm, desc)) return false;\n      if (!desc.writable) return false;\n    }\n    if (this.$Prototype instanceof NullValue) return true;\n    if (this.$Prototype === this.$Realm.intrinsics.ObjectPrototype) return true;\n    return this.$Prototype.isSimpleObject();\n  }\n\n  getExtensible(): boolean {\n    return this.$Extensible.value;\n  }\n\n  setExtensible(v: boolean) {\n    this.$Extensible = v ? this.$Realm.intrinsics.true : this.$Realm.intrinsics.false;\n  }\n\n  getKind(): ObjectKind {\n    // we can deduce the natural prototype by checking whether the following internal slots are present\n    if (this.$SymbolData !== undefined) return \"Symbol\";\n    if (this.$StringData !== undefined) return \"String\";\n    if (this.$NumberData !== undefined) return \"Number\";\n    if (this.$BooleanData !== undefined) return \"Boolean\";\n    if (this.$DateValue !== undefined) return \"Date\";\n    if (this.$RegExpMatcher !== undefined) return \"RegExp\";\n    if (this.$SetData !== undefined) return \"Set\";\n    if (this.$MapData !== undefined) return \"Map\";\n    if (this.$DataView !== undefined) return \"DataView\";\n    if (this.$ArrayBufferData !== undefined) return \"ArrayBuffer\";\n    if (this.$WeakMapData !== undefined) return \"WeakMap\";\n    if (this.$WeakSetData !== undefined) return \"WeakSet\";\n    if (isReactElement(this) && this.$Realm.react.enabled) return \"ReactElement\";\n    if (this.$TypedArrayName !== undefined) return this.$TypedArrayName;\n    // TODO #26 #712: Promises. All kinds of iterators. Generators.\n    return \"Object\";\n  }\n\n  defineNativeMethod(\n    name: SymbolValue | string,\n    length: number,\n    callback: NativeFunctionCallback,\n    desc?: Descriptor = {}\n  ) {\n    let intrinsicName;\n    if (typeof name === \"string\") {\n      if (this.intrinsicName) intrinsicName = `${this.intrinsicName}.${name}`;\n    } else if (name instanceof SymbolValue) {\n      if (this.intrinsicName && name.intrinsicName) intrinsicName = `${this.intrinsicName}[${name.intrinsicName}]`;\n    } else {\n      invariant(false);\n    }\n    this.defineNativeProperty(\n      name,\n      new NativeFunctionValue(this.$Realm, intrinsicName, name, length, callback, false),\n      desc\n    );\n  }\n\n  defineNativeProperty(name: SymbolValue | string, value?: Value | Array<Value>, desc?: Descriptor = {}) {\n    invariant(!value || value instanceof Value);\n    this.$DefineOwnProperty(name, {\n      value,\n      writable: true,\n      enumerable: false,\n      configurable: true,\n      ...desc,\n    });\n  }\n\n  defineNativeGetter(name: SymbolValue | string, callback: NativeFunctionCallback, desc?: Descriptor = {}) {\n    let intrinsicName, funcName;\n    if (typeof name === \"string\") {\n      funcName = `get ${name}`;\n      if (this.intrinsicName) intrinsicName = `${this.intrinsicName}.${name}`;\n    } else if (name instanceof SymbolValue) {\n      funcName =\n        name.$Description instanceof Value\n          ? `get [${name.$Description.throwIfNotConcreteString().value}]`\n          : `get [${\"?\"}]`;\n      if (this.intrinsicName && name.intrinsicName) intrinsicName = `${this.intrinsicName}[${name.intrinsicName}]`;\n    } else {\n      invariant(false);\n    }\n\n    let func = new NativeFunctionValue(this.$Realm, intrinsicName, funcName, 0, callback);\n    this.$DefineOwnProperty(name, {\n      get: func,\n      set: this.$Realm.intrinsics.undefined,\n      enumerable: false,\n      configurable: true,\n      ...desc,\n    });\n  }\n\n  defineNativeConstant(name: SymbolValue | string, value?: Value | Array<Value>, desc?: Descriptor = {}) {\n    invariant(!value || value instanceof Value);\n    this.$DefineOwnProperty(name, {\n      value,\n      writable: false,\n      enumerable: false,\n      configurable: false,\n      ...desc,\n    });\n  }\n\n  getOwnPropertyKeysArray(): Array<string> {\n    if (this.isPartialObject() || this.isLeakedObject() || this.unknownProperty !== undefined) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n\n    let keyArray = Array.from(this.properties.keys());\n    keyArray = keyArray.filter(x => {\n      let pb = this.properties.get(x);\n      if (!pb || pb.descriptor === undefined) return false;\n      let pv = pb.descriptor.value;\n      if (pv === undefined) return true;\n      invariant(pv instanceof Value);\n      if (!pv.mightHaveBeenDeleted()) return true;\n      // The property may or may not be there at runtime.\n      // We can at best return an abstract keys array.\n      // For now just terminate.\n      invariant(pv instanceof AbstractValue);\n      AbstractValue.reportIntrospectionError(pv);\n      throw new FatalError();\n    });\n    this.$Realm.callReportObjectGetOwnProperties(this);\n    return keyArray;\n  }\n\n  _serialize(set: Function, stack: Map<Value, any>): any {\n    let obj = set({});\n\n    for (let [key, propertyBinding] of this.properties) {\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; // deleted\n      Properties.ThrowIfMightHaveBeenDeleted(desc.value);\n      let serializedDesc: any = { enumerable: desc.enumerable, configurable: desc.configurable };\n      if (desc.value) {\n        serializedDesc.writable = desc.writable;\n        invariant(desc.value instanceof Value);\n        serializedDesc.value = desc.value.serialize(stack);\n      } else {\n        invariant(desc.get !== undefined);\n        serializedDesc.get = desc.get.serialize(stack);\n        invariant(desc.set !== undefined);\n        serializedDesc.set = desc.set.serialize(stack);\n      }\n      Object.defineProperty(obj, key, serializedDesc);\n    }\n    return obj;\n  }\n\n  // ECMA262 9.1.1\n  $GetPrototypeOf(): ObjectValue | NullValue {\n    return this.$Prototype;\n  }\n\n  // ECMA262 9.1.2\n  $SetPrototypeOf(V: ObjectValue | NullValue): boolean {\n    // 1. Return ! OrdinarySetPrototypeOf(O, V).\n    return Properties.OrdinarySetPrototypeOf(this.$Realm, this, V);\n  }\n\n  // ECMA262 9.1.3\n  $IsExtensible(): boolean {\n    // 1. Return ! OrdinaryIsExtensible(O).\n    return OrdinaryIsExtensible(this.$Realm, this);\n  }\n\n  // ECMA262 9.1.4\n  $PreventExtensions(): boolean {\n    // 1. Return ! OrdinaryPreventExtensions(O).\n    return OrdinaryPreventExtensions(this.$Realm, this);\n  }\n\n  // ECMA262 9.1.5\n  $GetOwnProperty(P: PropertyKeyValue): Descriptor | void {\n    // 1. Return ! OrdinaryGetOwnProperty(O, P).\n    return Properties.OrdinaryGetOwnProperty(this.$Realm, this, P);\n  }\n\n  // ECMA262 9.1.6\n  $DefineOwnProperty(P: PropertyKeyValue, Desc: Descriptor): boolean {\n    // 1. Return ? OrdinaryDefineOwnProperty(O, P, Desc).\n    return Properties.OrdinaryDefineOwnProperty(this.$Realm, this, P, Desc);\n  }\n\n  // ECMA262 9.1.7\n  $HasProperty(P: PropertyKeyValue): boolean {\n    if (this.unknownProperty !== undefined && this.$GetOwnProperty(P) === undefined) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    return OrdinaryHasProperty(this.$Realm, this, P);\n  }\n\n  // ECMA262 9.1.8\n  $Get(P: PropertyKeyValue, Receiver: Value): Value {\n    let prop = this.unknownProperty;\n    if (prop !== undefined && prop.descriptor !== undefined && this.$GetOwnProperty(P) === undefined) {\n      let desc = prop.descriptor;\n      invariant(desc !== undefined);\n      let val = desc.value;\n      invariant(val instanceof AbstractValue);\n      let propName;\n      if (P instanceof StringValue) {\n        propName = P;\n      } else if (typeof P === \"string\") {\n        propName = new StringValue(this.$Realm, P);\n      } else {\n        AbstractValue.reportIntrospectionError(val, \"abstract computed property name\");\n        throw new FatalError();\n      }\n      return this.specializeJoin(val, propName);\n    }\n\n    // 1. Return ? OrdinaryGet(O, P, Receiver).\n    return OrdinaryGet(this.$Realm, this, P, Receiver);\n  }\n\n  $GetPartial(P: AbstractValue | PropertyKeyValue, Receiver: Value): Value {\n    if (Receiver instanceof AbstractValue && Receiver.getType() === StringValue && P === \"length\") {\n      return AbstractValue.createFromTemplate(this.$Realm, lengthTemplate, NumberValue, [Receiver], lengthTemplateSrc);\n    }\n\n    if (!(P instanceof AbstractValue)) return this.$Get(P, Receiver);\n    // We assume that simple objects have no getter/setter properties.\n    if (this !== Receiver || !this.isSimpleObject() || (P.mightNotBeString() && P.mightNotBeNumber())) {\n      AbstractValue.reportIntrospectionError(P, \"TODO: #1021\");\n      throw new FatalError();\n    }\n    // If all else fails, use this expression\n    let result;\n    if (this.isPartialObject()) {\n      if (isWidenedValue(P)) {\n        return AbstractValue.createTemporalFromBuildFunction(this.$Realm, Value, [this, P], ([o, p]) =>\n          t.memberExpression(o, p, true)\n        );\n      }\n      result = AbstractValue.createFromType(this.$Realm, Value, \"sentinel member expression\");\n      result.args = [this, P];\n    } else {\n      result = this.$Realm.intrinsics.undefined;\n    }\n    // Get a specialization of the join of all values written to the object\n    // with abstract property names.\n    let prop = this.unknownProperty;\n    if (prop !== undefined) {\n      let desc = prop.descriptor;\n      if (desc !== undefined) {\n        let val = desc.value;\n        invariant(val instanceof AbstractValue);\n        result = this.specializeJoin(val, P);\n      }\n    }\n    // Join in all of the other values that were written to the object with\n    // concrete property names.\n    for (let [key, propertyBinding] of this.properties) {\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; // deleted\n      invariant(desc.value !== undefined); // otherwise this is not simple\n      let val = desc.value;\n      invariant(val instanceof Value);\n      let cond = AbstractValue.createFromBinaryOp(\n        this.$Realm,\n        \"===\",\n        P,\n        new StringValue(this.$Realm, key),\n        undefined,\n        \"check for known property\"\n      );\n      result = Join.joinValuesAsConditional(this.$Realm, cond, val, result);\n    }\n    return result;\n  }\n\n  specializeJoin(absVal: AbstractValue, propName: Value): Value {\n    if (absVal.kind === \"widened property\") {\n      let ob = absVal.args[0];\n      if (propName instanceof StringValue) {\n        let pName = propName.value;\n        let pNumber = +pName;\n        if (pName === pNumber + \"\") propName = new NumberValue(this.$Realm, pNumber);\n      }\n      return AbstractValue.createTemporalFromBuildFunction(this.$Realm, absVal.getType(), [ob, propName], ([o, p]) => {\n        return t.memberExpression(o, p, true);\n      });\n    }\n    invariant(absVal.args.length === 3 && absVal.kind === \"conditional\");\n    let generic_cond = absVal.args[0];\n    invariant(generic_cond instanceof AbstractValue);\n    let cond = this.specializeCond(generic_cond, propName);\n    let arg1 = absVal.args[1];\n    if (arg1 instanceof AbstractValue && arg1.args.length === 3) arg1 = this.specializeJoin(arg1, propName);\n    let arg2 = absVal.args[2];\n    if (arg2 instanceof AbstractValue && arg2.args.length === 3) arg2 = this.specializeJoin(arg2, propName);\n    return AbstractValue.createFromConditionalOp(this.$Realm, cond, arg1, arg2, absVal.expressionLocation);\n  }\n\n  specializeCond(absVal: AbstractValue, propName: Value): AbstractValue {\n    if (absVal.kind === \"template for property name condition\")\n      return AbstractValue.createFromBinaryOp(this.$Realm, \"===\", absVal.args[0], propName);\n    return absVal;\n  }\n\n  // ECMA262 9.1.9\n  $Set(P: PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    // 1. Return ? OrdinarySet(O, P, V, Receiver).\n    return Properties.OrdinarySet(this.$Realm, this, P, V, Receiver);\n  }\n\n  $SetPartial(P: AbstractValue | PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    if (!(P instanceof AbstractValue)) return this.$Set(P, V, Receiver);\n    let pIsLoopVar = isWidenedValue(P);\n    let pIsNumeric = Value.isTypeCompatibleWith(P.getType(), NumberValue);\n\n    function createTemplate(realm: Realm, propName: AbstractValue) {\n      return AbstractValue.createFromBinaryOp(\n        realm,\n        \"===\",\n        propName,\n        new StringValue(realm, \"\"),\n        undefined,\n        \"template for property name condition\"\n      );\n    }\n\n    // We assume that simple objects have no getter/setter properties and\n    // that all properties are writable.\n    if (this !== Receiver || !this.isSimpleObject() || (P.mightNotBeString() && P.mightNotBeNumber())) {\n      AbstractValue.reportIntrospectionError(P, \"TODO #1021\");\n      throw new FatalError();\n    }\n\n    let prop;\n    if (this.unknownProperty === undefined) {\n      prop = {\n        descriptor: undefined,\n        object: this,\n        key: P,\n      };\n      this.unknownProperty = prop;\n    } else {\n      prop = this.unknownProperty;\n    }\n    this.$Realm.recordModifiedProperty(prop);\n    let desc = prop.descriptor;\n    if (desc === undefined) {\n      let newVal = V;\n      if (!(V instanceof UndefinedValue) && !isWidenedValue(P)) {\n        // join V with undefined, using a property name test as the condition\n        let cond = createTemplate(this.$Realm, P);\n        newVal = Join.joinValuesAsConditional(this.$Realm, cond, V, this.$Realm.intrinsics.undefined);\n      }\n      prop.descriptor = {\n        writable: true,\n        enumerable: true,\n        configurable: true,\n        value: newVal,\n      };\n    } else {\n      // join V with current value of this.unknownProperty. I.e. weak update.\n      let oldVal = desc.value;\n      invariant(oldVal instanceof Value);\n      let newVal = oldVal;\n      if (!(V instanceof UndefinedValue)) {\n        if (isWidenedValue(P)) {\n          newVal = V; // It will be widened later on\n        } else {\n          let cond = createTemplate(this.$Realm, P);\n          newVal = Join.joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n        }\n      }\n      desc.value = newVal;\n    }\n\n    // Since we don't know the name of the property we are writing to, we also need\n    // to perform weak updates of all of the known properties.\n    // First clear out this.unknownProperty so that helper routines know its OK to update the properties\n    let savedUnknownProperty = this.unknownProperty;\n    this.unknownProperty = undefined;\n    for (let [key, propertyBinding] of this.properties) {\n      if (pIsLoopVar && pIsNumeric) {\n        // Delete numeric properties and don't do weak updates on other properties.\n        if (key !== +key + \"\") continue;\n        this.properties.delete(key);\n        continue;\n      }\n      let oldVal = this.$Realm.intrinsics.empty;\n      if (propertyBinding.descriptor && propertyBinding.descriptor.value) {\n        oldVal = propertyBinding.descriptor.value;\n        invariant(oldVal instanceof Value); // otherwise this is not simple\n      }\n      let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", P, new StringValue(this.$Realm, key));\n      let newVal = Join.joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n      Properties.OrdinarySet(this.$Realm, this, key, newVal, Receiver);\n    }\n    this.unknownProperty = savedUnknownProperty;\n\n    return true;\n  }\n\n  // ECMA262 9.1.10\n  $Delete(P: PropertyKeyValue): boolean {\n    if (this.unknownProperty !== undefined) {\n      // TODO #946: generate a delete from the object\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    // 1. Return ? OrdinaryDelete(O, P).\n    return Properties.OrdinaryDelete(this.$Realm, this, P);\n  }\n\n  // ECMA262 9.1.11\n  $OwnPropertyKeys(): Array<PropertyKeyValue> {\n    return OrdinaryOwnPropertyKeys(this.$Realm, this);\n  }\n}\n"]}