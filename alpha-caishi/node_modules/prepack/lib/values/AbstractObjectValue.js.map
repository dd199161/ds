{"version":3,"sources":["../../src/values/AbstractObjectValue.js"],"names":["t","AbstractObjectValue","realm","types","values","hashValue","args","buildNode","optionalArgs","isTop","getElements","element","isPartialObject","reportIntrospectionError","cachedIsSimpleObject","undefined","_elementsAreSimpleObjects","result","isSimpleObject","makeNotPartial","makePartial","makeSimple","P","value","elements","size","cv","$GetOwnProperty","kind","cond","ob1","ob2","d1","d2","desc","$Realm","d1Value","d2Value","joinValuesAsConditional","widenValues","hasProp","doesNotHaveProp","d","createFromBinaryOp","expressionLocation","Desc","$DefineOwnProperty","intrinsics","writable","enumerable","configurable","new_val","sawTrue","sawFalse","dval","vale","empty","$HasProperty","Receiver","generateAbstractGet","type","isTypeCompatibleWith","getType","object","createTemporalFromBuildFunction","o","memberExpression","identifier","skipInvariant","isIntrinsic","isInPureScope","leakValue","evaluateWithPossibleThrowCompletion","topVal","$Get","d1val","d2val","cvVal","p","$GetPartial","V","$Set","oldVal","v","$SetPartial","$Delete","$OwnPropertyKeys"],"mappings":"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","file":"AbstractObjectValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { FatalError } from \"../errors.js\";\nimport type { Realm } from \"../realm.js\";\nimport type { Descriptor, PropertyKeyValue } from \"../types.js\";\nimport { AbstractValue, ArrayValue, ObjectValue, StringValue, Value } from \"./index.js\";\nimport type { AbstractValueBuildNodeFunction } from \"./AbstractValue.js\";\nimport { TypesDomain, ValuesDomain } from \"../domains/index.js\";\nimport { IsDataDescriptor, cloneDescriptor, equalDescriptors } from \"../methods/index.js\";\nimport { Join, Widen, Leak } from \"../singletons.js\";\nimport type { BabelNodeExpression } from \"babel-types\";\nimport invariant from \"../invariant.js\";\nimport NumberValue from \"./NumberValue\";\nimport * as t from \"babel-types\";\n\nexport default class AbstractObjectValue extends AbstractValue {\n  constructor(\n    realm: Realm,\n    types: TypesDomain,\n    values: ValuesDomain,\n    hashValue: number,\n    args: Array<Value>,\n    buildNode?: AbstractValueBuildNodeFunction | BabelNodeExpression,\n    optionalArgs?: {| kind?: string, intrinsicName?: string |}\n  ) {\n    super(realm, types, values, hashValue, args, buildNode, optionalArgs);\n    if (!values.isTop()) {\n      for (let element of this.values.getElements()) invariant(element instanceof ObjectValue);\n    }\n  }\n\n  cachedIsSimpleObject: void | boolean;\n\n  getTemplate(): ObjectValue {\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      if (element.isPartialObject()) {\n        return element;\n      } else {\n        break;\n      }\n    }\n    AbstractValue.reportIntrospectionError(this);\n    throw new FatalError();\n  }\n\n  isPartialObject(): boolean {\n    // At the very least, the identity of the object is unknown\n    return true;\n  }\n\n  isSimpleObject(): boolean {\n    if (this.cachedIsSimpleObject === undefined) this.cachedIsSimpleObject = this._elementsAreSimpleObjects();\n    return this.cachedIsSimpleObject;\n  }\n\n  _elementsAreSimpleObjects(): boolean {\n    if (this.values.isTop()) return false;\n    let result;\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      if (result === undefined) {\n        result = element.isSimpleObject();\n      } else if (result !== element.isSimpleObject()) {\n        AbstractValue.reportIntrospectionError(this);\n        throw new FatalError();\n      }\n    }\n    if (result === undefined) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    return result;\n  }\n\n  mightBeFalse(): boolean {\n    return false;\n  }\n\n  mightNotBeFalse(): boolean {\n    return true;\n  }\n\n  makeNotPartial(): void {\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      element.makeNotPartial();\n    }\n  }\n\n  makePartial(): void {\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      element.makePartial();\n    }\n  }\n\n  makeSimple(): void {\n    if (!this.values.isTop()) {\n      for (let element of this.values.getElements()) {\n        invariant(element instanceof ObjectValue);\n        element.makeSimple();\n      }\n    }\n    this.cachedIsSimpleObject = true;\n  }\n\n  throwIfNotObject(): AbstractObjectValue {\n    return this;\n  }\n\n  // ECMA262 9.1.3\n  $IsExtensible(): boolean {\n    return false;\n  }\n\n  // ECMA262 9.1.5\n  $GetOwnProperty(P: PropertyKeyValue): Descriptor | void {\n    if (P instanceof StringValue) P = P.value;\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$GetOwnProperty(P, cv);\n      }\n      invariant(false);\n    } else if (this.kind === \"conditional\") {\n      // this is the join of two concrete objects\n      // use this join condition for the join of the two property values\n      let [cond, ob1, ob2] = this.args;\n      invariant(cond instanceof AbstractValue);\n      invariant(ob1 instanceof ObjectValue);\n      invariant(ob2 instanceof ObjectValue);\n      let d1 = ob1.$GetOwnProperty(P);\n      let d2 = ob2.$GetOwnProperty(P);\n      if (d1 === undefined || d2 === undefined || !equalDescriptors(d1, d2)) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      let desc = cloneDescriptor(d1);\n      invariant(desc !== undefined);\n      if (IsDataDescriptor(this.$Realm, desc)) {\n        let d1Value = d1.value;\n        invariant(d1Value === undefined || d1Value instanceof Value);\n        let d2Value = d2.value;\n        invariant(d2Value === undefined || d2Value instanceof Value);\n        desc.value = Join.joinValuesAsConditional(this.$Realm, cond, d1Value, d2Value);\n      }\n      return desc;\n    } else if (this.kind === \"widened\") {\n      // This abstract object was created by repeated assignments of freshly allocated objects to the same binding inside a loop\n      let [ob1, ob2] = this.args; // ob1: summary of iterations 1...n, ob2: summary of iteration n+1\n      invariant(ob1 instanceof ObjectValue);\n      invariant(ob2 instanceof ObjectValue);\n      let d1 = ob1.$GetOwnProperty(P);\n      let d2 = ob2.$GetOwnProperty(P);\n      if (d1 === undefined || d2 === undefined || !equalDescriptors(d1, d2)) {\n        // We do not handle the case where different loop iterations result in different kinds of propperties\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      let desc = cloneDescriptor(d1);\n      invariant(desc !== undefined);\n      if (IsDataDescriptor(this.$Realm, desc)) {\n        // Values may be different, i.e. values may be loop variant, so the widened value summarizes the entire loop\n        let d1Value = d1.value;\n        invariant(d1Value === undefined || d1Value instanceof Value);\n        let d2Value = d2.value;\n        invariant(d2Value === undefined || d2Value instanceof Value);\n        desc.value = Widen.widenValues(this.$Realm, d1Value, d2Value);\n      } else {\n        // In this case equalDescriptors guarantees exact equality betwee d1 and d2.\n        // Inlining the accessors will eventually bring in data properties if the accessors have loop variant behavior\n      }\n      return desc;\n    } else {\n      let hasProp = false;\n      let doesNotHaveProp = false;\n      let desc;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d === undefined) doesNotHaveProp = true;\n        else {\n          hasProp = true;\n          if (desc === undefined) {\n            desc = cloneDescriptor(d);\n            invariant(desc !== undefined);\n            if (!IsDataDescriptor(this.$Realm, d)) continue;\n          } else {\n            if (!equalDescriptors(d, desc)) {\n              AbstractValue.reportIntrospectionError(this, P);\n              throw new FatalError();\n            }\n            if (!IsDataDescriptor(this.$Realm, desc)) continue;\n            // values may be different\n            let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n            desc.value = Join.joinValuesAsConditional(this.$Realm, cond, d.value, desc.value);\n          }\n        }\n      }\n      if (hasProp && doesNotHaveProp) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return desc;\n    }\n  }\n\n  // ECMA262 9.1.6\n  $DefineOwnProperty(P: PropertyKeyValue, Desc: Descriptor): boolean {\n    if (P instanceof StringValue) P = P.value;\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$DefineOwnProperty(P, Desc);\n      }\n      invariant(false);\n    } else {\n      if (!IsDataDescriptor(this.$Realm, Desc)) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      let desc = {\n        value: \"value\" in Desc ? Desc.value : this.$Realm.intrinsics.undefined,\n        writable: \"writable\" in Desc ? Desc.writable : false,\n        enumerable: \"enumerable\" in Desc ? Desc.enumerable : false,\n        configurable: \"configurable\" in Desc ? Desc.configurable : false,\n      };\n      let new_val = desc.value;\n      invariant(new_val instanceof Value);\n      let sawTrue = false;\n      let sawFalse = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d !== undefined && !equalDescriptors(d, desc)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let dval = d === undefined || d.vale === undefined ? this.$Realm.intrinsics.empty : d.value;\n        invariant(dval instanceof Value);\n        let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n        desc.value = Join.joinValuesAsConditional(this.$Realm, cond, new_val, dval);\n        if (cv.$DefineOwnProperty(P, desc)) {\n          sawTrue = true;\n        } else sawFalse = true;\n      }\n      if (sawTrue && sawFalse) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return sawTrue;\n    }\n  }\n\n  // ECMA262 9.1.7\n  $HasProperty(P: PropertyKeyValue): boolean {\n    if (P instanceof StringValue) P = P.value;\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$HasProperty(P, cv);\n      }\n      invariant(false);\n    } else {\n      let hasProp = false;\n      let doesNotHaveProp = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        if (cv.$HasProperty(P)) hasProp = true;\n        else doesNotHaveProp = true;\n      }\n      if (hasProp && doesNotHaveProp) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return hasProp;\n    }\n  }\n\n  // ECMA262 9.1.8\n  $Get(P: PropertyKeyValue, Receiver: Value): Value {\n    if (P instanceof StringValue) P = P.value;\n    if (this.values.isTop()) {\n      let generateAbstractGet = () => {\n        let type = Value;\n        if (P === \"length\" && Value.isTypeCompatibleWith(this.getType(), ArrayValue)) type = NumberValue;\n        let object = this.kind === \"sentinel ToObject\" ? this.args[0] : this;\n        return AbstractValue.createTemporalFromBuildFunction(\n          this.$Realm,\n          type,\n          [object],\n          ([o]) => {\n            invariant(typeof P === \"string\");\n            return t.memberExpression(o, t.identifier(P));\n          },\n          {\n            skipInvariant: true,\n          }\n        );\n      };\n      if (this.isSimpleObject() && this.isIntrinsic()) {\n        return generateAbstractGet();\n      } else if (this.$Realm.isInPureScope()) {\n        // This object might have leaked to a getter.\n        Leak.leakValue(this.$Realm, this);\n        // The getter might throw anything.\n        return this.$Realm.evaluateWithPossibleThrowCompletion(\n          generateAbstractGet,\n          TypesDomain.topVal,\n          ValuesDomain.topVal\n        );\n      }\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$Get(P, Receiver);\n      }\n      invariant(false);\n    } else if (this.kind === \"conditional\") {\n      // this is the join of two concrete objects\n      // use this join condition for the join of the two property values\n      let [cond, ob1, ob2] = this.args;\n      invariant(cond instanceof AbstractValue);\n      invariant(ob1 instanceof ObjectValue);\n      invariant(ob2 instanceof ObjectValue);\n      let d1 = ob1.$GetOwnProperty(P);\n      let d1val =\n        d1 === undefined ? this.$Realm.intrinsics.undefined : IsDataDescriptor(this.$Realm, d1) ? d1.value : undefined;\n      let d2 = ob2.$GetOwnProperty(P);\n      let d2val =\n        d2 === undefined ? this.$Realm.intrinsics.undefined : IsDataDescriptor(this.$Realm, d2) ? d2.value : undefined;\n      if (d1val === undefined || d2val === undefined) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      invariant(d1val instanceof Value);\n      invariant(d2val instanceof Value);\n      return Join.joinValuesAsConditional(this.$Realm, cond, d1val, d2val);\n    } else {\n      let result;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        // We do not currently join property getters\n        if (d !== undefined && !IsDataDescriptor(this.$Realm, d)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let cvVal = d === undefined ? this.$Realm.intrinsics.undefined : d.value;\n        if (result === undefined) result = cvVal;\n        else {\n          let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n          result = Join.joinValuesAsConditional(this.$Realm, cond, cvVal, result);\n        }\n      }\n      invariant(result !== undefined);\n      return result;\n    }\n  }\n\n  $GetPartial(P: AbstractValue | PropertyKeyValue, Receiver: Value): Value {\n    if (!(P instanceof AbstractValue)) return this.$Get(P, Receiver);\n    invariant(this === Receiver, \"TODO #1021\");\n    if (this.values.isTop()) {\n      if (this.isSimpleObject() && this.isIntrinsic()) {\n        return AbstractValue.createTemporalFromBuildFunction(this.$Realm, Value, [this, P], ([o, p]) =>\n          t.memberExpression(o, p, true)\n        );\n      }\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        return cv.$GetPartial(P, cv);\n      }\n      invariant(false);\n    } else {\n      let result;\n      for (let cv of elements) {\n        let cvVal = cv.$GetPartial(P, cv);\n        if (result === undefined) result = cvVal;\n        else {\n          let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n          result = Join.joinValuesAsConditional(this.$Realm, cond, cvVal, result);\n        }\n      }\n      invariant(result !== undefined);\n      return result;\n    }\n  }\n\n  // ECMA262 9.1.9\n  $Set(P: PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    if (P instanceof StringValue) P = P.value;\n    invariant(this === Receiver, \"TODO #1021\");\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$Set(P, V, cv);\n      }\n      invariant(false);\n    } else {\n      let sawTrue = false;\n      let sawFalse = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d !== undefined && !IsDataDescriptor(this.$Realm, d)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let oldVal = d === undefined ? this.$Realm.intrinsics.empty : d.value;\n        let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n        let v = Join.joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n        if (cv.$Set(P, v, cv)) sawTrue = true;\n        else sawFalse = true;\n      }\n      if (sawTrue && sawFalse) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return sawTrue;\n    }\n  }\n\n  $SetPartial(P: AbstractValue | PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    if (!(P instanceof AbstractValue)) return this.$Set(P, V, Receiver);\n    invariant(this === Receiver, \"TODO #1021\");\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$SetPartial(P, V, cv);\n      }\n      invariant(false);\n    } else {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let oldVal = this.$GetPartial(P, Receiver);\n        let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n        let v = Join.joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n        cv.$SetPartial(P, v, cv);\n      }\n      return true;\n    }\n  }\n\n  // ECMA262 9.1.10\n  $Delete(P: PropertyKeyValue): boolean {\n    if (P instanceof StringValue) P = P.value;\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$Delete(P);\n      }\n      invariant(false);\n    } else {\n      let sawTrue = false;\n      let sawFalse = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d === undefined) continue;\n        if (!IsDataDescriptor(this.$Realm, d)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n        let v = Join.joinValuesAsConditional(this.$Realm, cond, this.$Realm.intrinsics.empty, d.value);\n        if (cv.$Set(P, v, cv)) sawTrue = true;\n        else sawFalse = true;\n      }\n      if (sawTrue && sawFalse) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return sawTrue;\n    }\n  }\n\n  $OwnPropertyKeys(): Array<PropertyKeyValue> {\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$OwnPropertyKeys();\n      }\n      invariant(false);\n    } else {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n  }\n}\n"]}