{"version":3,"sources":["../src/prepack-cli.js"],"names":["run","Object","Array","console","JSON","process","prepackStdin","prepackFileSync","FatalError","CompatibilityValues","fs","HELP_STR","map","v","join","args","from","argv","splice","inputFilenames","outputFilename","compatibility","mathRandomSeed","inputSourceMap","outputSourceMap","statsFileName","maxStackDepth","timeout","additionalFunctions","lazyObjectsRuntime","heapGraphFilePath","debugInFilePath","debugOutFilePath","reactOutput","flags","initializeMoreModules","trace","debugNames","omitInvariants","inlineExpressions","simpleClosures","abstractEffectsInAdditionalFunctions","logStatistics","logModules","delayInitializations","delayUnsupportedRequires","accelerateUnsupportedRequires","internalDebug","debugScopes","serialize","residual","check","profile","reactEnabled","length","arg","shift","startsWith","push","slice","includes","error","exit","value","isNaN","parseInt","seconds","line","split","log","keys","s","resolvedOptions","assign","inputSourceMapFilename","errorHandler","sourceMaps","heapGraphFormat","errors","Map","diagnostic","location","set","printDiagnostics","foundFatal","size","loc","sourceMessage","source","severity","start","column","errorCode","message","callStack","processSerializedCode","serialized","err","stack","code","writeFileSync","statistics","undefined","timingStats","stats","SerializerStatistics","TimingStatistics","MemoryStatistics","getHeapStatistics","stringify","heapGraph","__residual"],"mappings":"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","file":"prepack-cli.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\n/* eslint-disable no-shadow */\n\nimport { CompilerDiagnostic, type ErrorHandlerResult, FatalError } from \"./errors.js\";\nimport { type Compatibility, CompatibilityValues, type ReactOutputTypes, ReactOutputValues } from \"./options.js\";\nimport { type SerializedResult } from \"./serializer/types.js\";\nimport { prepackStdin, prepackFileSync } from \"./prepack-node.js\";\nimport type { BabelNodeSourceLocation } from \"babel-types\";\nimport fs from \"fs\";\nimport v8 from \"v8\";\nimport { version } from \"../package.json\";\nimport invariant from \"./invariant\";\n\n// Prepack helper\ndeclare var __residual: any;\n\nfunction run(\n  Object,\n  Array,\n  console,\n  JSON,\n  process,\n  prepackStdin,\n  prepackFileSync,\n  FatalError,\n  CompatibilityValues,\n  fs\n) {\n  let HELP_STR = `\n    input                    The name of the file to run Prepack over (for web please provide the single js bundle file)\n    --out                    The name of the output file\n    --compatibility          The target environment for Prepack [${CompatibilityValues.map(v => `\"${v}\"`).join(\", \")}]\n    --mathRandomSeed         If you want Prepack to evaluate Math.random() calls, please provide a seed.\n    --srcmapIn               The input sourcemap filename. If present, Prepack will output a sourcemap that maps from\n                             the original file (pre-input sourcemap) to Prepack's output\n    --srcmapOut              The output sourcemap filename.\n    --maxStackDepth          Specify the maximum call stack depth.\n    --timeout                The amount of time in seconds until Prepack should time out.\n    --additionalFunctions    Additional functions that should be prepacked (comma separated).\n    --abstractEffectsInAdditionalFunctions Experimental flag to allow abstract effectful function calls.\n    --lazyObjectsRuntime     Enable lazy objects feature and specify the JS runtime that support this feature.\n    --debugNames             Changes the output of Prepack so that for named functions and variables that get emitted into\n                             Prepack's output, the original name is appended as a suffix to Prepack's generated identifier.\n    --speculate              Enable speculative initialization of modules (for the module system Prepack has builtin\n                             knowledge about). Prepack will try to execute all factory functions it is able to.\n    --trace                  Traces the order of module initialization.\n    --serialize              Serializes the partially evaluated global environment as a program that recreates it.\n                             (default = true)\n    --check                  Check whole program for diagnostic messages. Do not serialize or produce residual code.\n    --residual               Produces the residual program that results after constant folding.\n    --profile                Enables console logging of profile information of different phases of prepack.\n    --statsFile              The name of the output file where statistics will be written to.\n    --heapGraphFilePath      The name of the output file where heap graph will be written to.\n    --inlineExpressions      When generating code, tells prepack to avoid naming expressions when they are only used once,\n                             and instead inline them where they are used.\n    --simpleClosures         When generating code, tells prepack to not defer initializing closures\n    --omitInvariants         When generating code, tells prepack to omit writing invariants. (Invariants generated by default.)\n    --version                Output the version number.\n  `;\n  let args = Array.from(process.argv);\n  args.splice(0, 2);\n  let inputFilenames = [];\n  let outputFilename;\n  let compatibility: Compatibility;\n  let mathRandomSeed;\n  let inputSourceMap;\n  let outputSourceMap;\n  let statsFileName;\n  let maxStackDepth: number;\n  let timeout: number;\n  let additionalFunctions: Array<string>;\n  let lazyObjectsRuntime: string;\n  let heapGraphFilePath: string;\n  let debugInFilePath: string;\n  let debugOutFilePath: string;\n  let reactOutput: ReactOutputTypes = \"create-element\";\n  let flags = {\n    initializeMoreModules: false,\n    trace: false,\n    debugNames: false,\n    omitInvariants: false,\n    inlineExpressions: false,\n    simpleClosures: false,\n    abstractEffectsInAdditionalFunctions: false,\n    logStatistics: false,\n    logModules: false,\n    delayInitializations: false,\n    delayUnsupportedRequires: false,\n    accelerateUnsupportedRequires: true,\n    internalDebug: false,\n    debugScopes: false,\n    serialize: false,\n    residual: false,\n    check: false,\n    profile: false,\n    reactEnabled: false,\n  };\n\n  while (args.length) {\n    let arg = args.shift();\n    if (!arg.startsWith(\"--\")) {\n      inputFilenames.push(arg);\n    } else {\n      arg = arg.slice(2);\n      switch (arg) {\n        case \"out\":\n          arg = args.shift();\n          outputFilename = arg;\n          break;\n        case \"compatibility\":\n          arg = args.shift();\n          if (!CompatibilityValues.includes(arg)) {\n            console.error(`Unsupported compatibility: ${arg}`);\n            process.exit(1);\n          }\n          compatibility = (arg: any);\n          break;\n        case \"mathRandomSeed\":\n          mathRandomSeed = args.shift();\n          break;\n        case \"srcmapIn\":\n          inputSourceMap = args.shift();\n          break;\n        case \"srcmapOut\":\n          outputSourceMap = args.shift();\n          break;\n        case \"statsFile\":\n          statsFileName = args.shift();\n          break;\n        case \"maxStackDepth\":\n          let value = args.shift();\n          if (isNaN(value)) {\n            console.error(\"Stack depth value must be a number\");\n            process.exit(1);\n          }\n          maxStackDepth = parseInt(value, 10);\n          break;\n        case \"timeout\":\n          let seconds = args.shift();\n          if (isNaN(seconds)) {\n            console.error(\"Timeout must be a number\");\n            process.exit(1);\n          }\n          timeout = parseInt(seconds, 10) * 1000;\n          break;\n        case \"additionalFunctions\":\n          let line = args.shift();\n          additionalFunctions = line.split(\",\");\n          break;\n        case \"debugInFilePath\":\n          debugInFilePath = args.shift();\n          break;\n        case \"debugOutFilePath\":\n          debugOutFilePath = args.shift();\n          break;\n        case \"lazyObjectsRuntime\":\n          lazyObjectsRuntime = args.shift();\n          break;\n        case \"heapGraphFilePath\":\n          heapGraphFilePath = args.shift();\n          break;\n        case \"reactOutput\":\n          arg = args.shift();\n          if (!ReactOutputValues.includes(arg)) {\n            console.error(`Unsupported reactOutput: ${arg}`);\n            process.exit(1);\n          }\n          reactOutput = (arg: any);\n          break;\n        case \"help\":\n          console.log(\n            \"Usage: prepack.js [ -- | input.js ] [ --out output.js ] [ --compatibility jsc ] [ --mathRandomSeed seedvalue ] [ --srcmapIn inputMap ] [ --srcmapOut outputMap ] [ --maxStackDepth depthValue ] [ --timeout seconds ] [ --additionalFunctions fnc1,fnc2,... ] [ --lazyObjectsRuntime lazyObjectsRuntimeName] [ --heapGraphFilePath heapGraphFilePath]\" +\n              Object.keys(flags).map(s => \"[ --\" + s + \"]\").join(\" \") +\n              \"\\n\" +\n              HELP_STR\n          );\n          return;\n        case \"version\":\n          console.log(version);\n          return;\n        default:\n          if (arg in flags) {\n            flags[arg] = true;\n          } else {\n            console.error(`Unknown option: ${arg}`);\n            process.exit(1);\n          }\n      }\n    }\n  }\n  if (!flags.serialize && !flags.residual) flags.serialize = true;\n  if (flags.check) {\n    flags.serialize = false;\n    flags.residual = false;\n  }\n\n  let resolvedOptions = Object.assign(\n    {},\n    {\n      compatibility,\n      mathRandomSeed,\n      inputSourceMapFilename: inputSourceMap,\n      errorHandler: errorHandler,\n      sourceMaps: !!outputSourceMap,\n      maxStackDepth: maxStackDepth,\n      timeout: timeout,\n      additionalFunctions: additionalFunctions,\n      lazyObjectsRuntime: lazyObjectsRuntime,\n      heapGraphFormat: \"DotLanguage\",\n      debugInFilePath: debugInFilePath,\n      debugOutFilePath: debugOutFilePath,\n      reactOutput: reactOutput,\n    },\n    flags\n  );\n  if (\n    lazyObjectsRuntime &&\n    (resolvedOptions.additionalFunctions || resolvedOptions.delayInitializations || resolvedOptions.inlineExpressions)\n  ) {\n    console.error(\n      \"lazy objects feature is incompatible with additionalFunctions, delayInitializations and inlineExpressions options\"\n    );\n    process.exit(1);\n  }\n\n  let errors: Map<BabelNodeSourceLocation, CompilerDiagnostic> = new Map();\n  function errorHandler(diagnostic: CompilerDiagnostic): ErrorHandlerResult {\n    if (diagnostic.location) errors.set(diagnostic.location, diagnostic);\n    return \"Recover\";\n  }\n\n  function printDiagnostics(): boolean {\n    let foundFatal = false;\n    if (errors.size > 0) {\n      console.error(\"Errors found while prepacking\");\n      for (let [loc, error] of errors) {\n        let sourceMessage = \"\";\n        switch (loc.source) {\n          case null:\n          case \"\":\n            sourceMessage = \"In an unknown source file\";\n            break;\n          case \"no-filename-specified\":\n            sourceMessage = \"In stdin\";\n            break;\n          default:\n            invariant(loc.source !== null);\n            sourceMessage = `In input file ${loc.source}`;\n            break;\n        }\n\n        foundFatal = foundFatal || error.severity === \"FatalError\";\n        console.error(\n          `${sourceMessage}(${loc.start.line}:${loc.start.column +\n            1}) ${error.severity} ${error.errorCode}: ${error.message}` +\n            ` (https://github.com/facebook/prepack/wiki/${error.errorCode})`\n        );\n        console.error(error.callStack || \"\");\n      }\n    }\n    return foundFatal;\n  }\n\n  try {\n    if (inputFilenames.length === 0) {\n      prepackStdin(resolvedOptions, processSerializedCode, printDiagnostics);\n      return;\n    }\n    let serialized = prepackFileSync(inputFilenames, resolvedOptions);\n    printDiagnostics();\n    if (resolvedOptions.serialize && serialized) processSerializedCode(serialized);\n  } catch (err) {\n    printDiagnostics();\n    //FatalErrors must have generated at least one CompilerDiagnostic.\n    if (err instanceof FatalError) {\n      invariant(errors.size > 0, \"FatalError must generate at least one CompilerDiagnostic\");\n    } else {\n      // if it is not a FatalError, it means prepack failed, and we should display the Prepack stack trace.\n      console.error(err.stack);\n      process.exit(1);\n    }\n  }\n\n  function processSerializedCode(serialized: SerializedResult) {\n    if (serialized.code === \"\") {\n      console.error(\"Prepack returned empty code.\");\n      return;\n    }\n    if (outputFilename) {\n      console.log(`Prepacked source code written to ${outputFilename}.`);\n      fs.writeFileSync(outputFilename, serialized.code);\n    } else {\n      console.log(serialized.code);\n    }\n    if (statsFileName) {\n      if (serialized.statistics === undefined || serialized.timingStats === undefined) {\n        return;\n      }\n      let stats = {\n        SerializerStatistics: serialized.statistics,\n        TimingStatistics: serialized.timingStats,\n        MemoryStatistics: v8.getHeapStatistics(),\n      };\n      fs.writeFileSync(statsFileName, JSON.stringify(stats));\n    }\n    if (outputSourceMap) {\n      fs.writeFileSync(outputSourceMap, serialized.map ? JSON.stringify(serialized.map) : \"\");\n    }\n    if (heapGraphFilePath) {\n      invariant(serialized.heapGraph);\n      fs.writeFileSync(heapGraphFilePath, serialized.heapGraph);\n    }\n  }\n\n  return true;\n}\n\nif (typeof __residual === \"function\") {\n  // If we're running inside of Prepack. This is the residual function we'll\n  // want to leave untouched in the final program.\n  __residual(\n    \"boolean\",\n    run,\n    Object,\n    Array,\n    console,\n    JSON,\n    process,\n    prepackStdin,\n    prepackFileSync,\n    FatalError,\n    CompatibilityValues,\n    fs\n  );\n} else {\n  run(Object, Array, console, JSON, process, prepackStdin, prepackFileSync, FatalError, CompatibilityValues, fs);\n}\n"]}