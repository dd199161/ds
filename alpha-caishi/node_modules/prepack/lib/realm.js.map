{"version":3,"sources":["../src/realm.js"],"names":["construct_empty_effects","t","Tracer","state","effects","F","thisArgument","argumentsList","newTarget","performCall","result","ExecutionContext","context","caller","isStrict","$Strict","function","loc","realm","value","oldReadOnly","isReadOnly","variableEnvironment","environmentRecord","lexicalEnvironment","intrinsics","undefined","empty","Map","Set","Realm","opts","contextStack","MOBILE_JSC_VERSION","objectCount","symbolCount","functionBodyUniqueTagSeed","nextGeneratorId","useAbstractInterpretation","serialize","residual","check","trackLeaks","abstractEffectsInAdditionalFunctions","isInPureTryStatement","mathRandomSeed","mathRandomGenerator","strictlyMonotonicDateNow","timeout","timeoutCounter","timeoutCounterThreshold","start","Date","now","compatibility","maxStackDepth","omitInvariants","$TemplateMap","preludeGenerator","debugNames","uniqueSuffix","pathConditions","setupTrackedPropertyAccessors","trackedPropertyNames","tracers","$GlobalObject","evaluators","Object","create","partialEvaluators","$GlobalEnv","react","classComponentMetadata","enabled","reactEnabled","output","reactOutput","symbols","currentOwner","hoistableReactElements","WeakMap","hoistableFunctions","fbLibraries","cx","fbt","idx","ix","reactRelay","errorHandler","globalSymbolRegistry","activeLexicalEnvironments","_abstractValuesDefined","key","globrec","dclrec","$DeclarativeRecord","HasBinding","GetBindingValue","e","readOnlyValue","forEach","ctx","setReadOnly","total","length","has","modifiedBindings","keys","b","bindings","name","delete","destroy","push","environment","$FunctionObject","c","pop","callback","pushContext","popContext","wrapInGlobalEnv","assignToGlobal","DeleteBinding","f","saved_createdObjectsTrackedForLeaks","createdObjectsTrackedForLeaks","thrownTypes","thrownValues","isInPureScope","diag","currentLocation","handleError","ast","strictCode","env","generatorName","evaluateForEffects","evaluateCompletionDeref","func","node","evaluateNodeForEffects","nodeAst","nodeIO","partialEval","partiallyEvaluateCompletionDeref","getAndResetModifiedMaps","savedBindings","savedProperties","saved_generator","generator","saved_createdObjects","createdObjects","saved_completion","savedCompletion","t1","beginEvaluateForEffects","GetValue","incorporateSavedCompletion","subsequentEffects","getCapturedEffects","stopEffectCaptureAndUndoEffects","updatePossiblyNormalCompletionWithSubsequentEffects","modifiedProperties","astGenerator","astBindings","astProperties","astCreatedObjects","restoreBindings","restoreProperties","t2","endEvaluateForEffects","savedHandler","diagnostic","d","applyEffects","resultVal","composeWithSavedCompletion","loopContinueTest","loopBody","effects1","effects2","test","containsEffects","gen","bindings2","pbindings2","_emitPropertAssignments","_emitLocalAssignments","widenEffects","tvalFor","binding","map","val","_buildNode","tval","derive","types","values","n","skipInvariant","set","phiNode","get","emitStatement","v","id","buildNode","expressionStatement","assignmentExpression","pbindings","isSelfReferential","pathNode","args","object","o","mightHaveBeenDeleted","inTest","binaryExpression","stringLiteral","addEmpty","conditionalExpression","logicalExpression","path","mightBeUndefined","lh","identifier","r","emptyTest","undefinedTest","unaryExpression","guard","deleteIt","ifStatement","p","priorEffects","pg","pb","pp","po","sc","sg","sb","sp","so","rb","rp","ro","composeGenerators","m","desc","propertyBinding","ob","a","add","consequent","consequentEffects","composeEffects","alternate","updateAbruptCompletions","alternateEffects","completion","savedPathConditions","captureEffects","composePossiblyNormalCompletions","pushInverseAndRefine","joinCondition","pushAndRefine","priorCompletion","savedEffects","g","leadingComment","properties","appendGenerator","realmModifiedBindings","realmModifiedProperties","size","realmCreatedObjects","method","emitConsoleLog","console","getString","res","next","shift","nextString","ToString","hasLeaked","reportObjectGetOwnProperties","reportPropertyAccess","getRunningContext","isNewObject","callReportPropertyAccess","descriptor","l","propertyValue","kind","absVal","find","isIntrinsic","intrinsicName","memberExpression","rebuildNestedProperties","abstractValue","isTop","template","getTemplate","intrinsicNameGenerated","ThrowIfMightHaveBeenDeleted","reportIntrospectionError","rebuildObjectProperty","nextContextLocation","setLocation","message","error","type","__IntrospectionError","realmGenerator","callStack","Error","stack","$Get","msg","errorCode","location","loc_start","loc_end","end","line","column","severity","log","warn","nameString"],"mappings":"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","file":"realm.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Intrinsics, PropertyBinding, Descriptor, DebugServerType, ClassComponentMetadata } from \"./types.js\";\nimport { CompilerDiagnostic, type ErrorHandlerResult, type ErrorHandler, FatalError } from \"./errors.js\";\nimport {\n  AbstractObjectValue,\n  AbstractValue,\n  ConcreteValue,\n  ECMAScriptSourceFunctionValue,\n  FunctionValue,\n  NativeFunctionValue,\n  ObjectValue,\n  ProxyValue,\n  StringValue,\n  SymbolValue,\n  UndefinedValue,\n  Value,\n} from \"./values/index.js\";\nimport type { TypesDomain, ValuesDomain } from \"./domains/index.js\";\nimport { LexicalEnvironment, Reference, GlobalEnvironmentRecord, DeclarativeEnvironmentRecord } from \"./environment.js\";\nimport type { Binding } from \"./environment.js\";\nimport { cloneDescriptor, Construct } from \"./methods/index.js\";\nimport { Completion, ThrowCompletion, AbruptCompletion, PossiblyNormalCompletion } from \"./completions.js\";\nimport type { Compatibility, RealmOptions, ReactOutputTypes } from \"./options.js\";\nimport invariant from \"./invariant.js\";\nimport seedrandom from \"seedrandom\";\nimport { Generator, PreludeGenerator } from \"./utils/generator.js\";\nimport { emptyExpression, voidExpression } from \"./utils/internalizer.js\";\nimport { Environment, Functions, Join, Properties, To, Widen, Path } from \"./singletons.js\";\nimport type { ReactSymbolTypes } from \"./react/utils.js\";\nimport type { BabelNode, BabelNodeSourceLocation, BabelNodeLVal, BabelNodeStatement } from \"babel-types\";\nimport * as t from \"babel-types\";\n\nexport type BindingEntry = { hasLeaked: boolean, value: void | Value };\nexport type Bindings = Map<Binding, BindingEntry>;\nexport type EvaluationResult = Completion | Reference | Value;\nexport type PropertyBindings = Map<PropertyBinding, void | Descriptor>;\n\nexport type CreatedObjects = Set<ObjectValue>;\nexport type Effects = [EvaluationResult, Generator, Bindings, PropertyBindings, CreatedObjects];\n\nexport class Tracer {\n  beginEvaluateForEffects(state: any) {}\n  endEvaluateForEffects(state: any, effects: void | Effects) {}\n  detourCall(\n    F: FunctionValue,\n    thisArgument: void | Value,\n    argumentsList: Array<Value>,\n    newTarget: void | ObjectValue,\n    performCall: () => Value\n  ): void | Value {}\n  beforeCall(\n    F: FunctionValue,\n    thisArgument: void | Value,\n    argumentsList: Array<Value>,\n    newTarget: void | ObjectValue\n  ) {}\n  afterCall(\n    F: FunctionValue,\n    thisArgument: void | Value,\n    argumentsList: Array<Value>,\n    newTarget: void | ObjectValue,\n    result: void | Reference | Value | AbruptCompletion\n  ) {}\n}\n\nexport class ExecutionContext {\n  function: ?FunctionValue;\n  caller: ?ExecutionContext;\n  loc: ?BabelNodeSourceLocation;\n  ScriptOrModule: any;\n  realm: Realm;\n  variableEnvironment: LexicalEnvironment;\n  lexicalEnvironment: LexicalEnvironment;\n  isReadOnly: boolean;\n  isStrict: boolean;\n\n  setCaller(context: ExecutionContext): void {\n    this.caller = context;\n  }\n\n  setFunction(F: null | FunctionValue) {\n    if (F instanceof ECMAScriptSourceFunctionValue) this.isStrict = F.$Strict;\n    this.function = F;\n  }\n\n  setLocation(loc: null | BabelNodeSourceLocation) {\n    if (!loc) return;\n    this.loc = loc;\n  }\n\n  setRealm(realm: Realm): void {\n    this.realm = realm;\n  }\n\n  /*\n   Read-only envs disallow:\n   - creating bindings in their scope\n   - creating or modifying objects when they are current running context\n  */\n  setReadOnly(value: boolean): boolean {\n    let oldReadOnly = this.isReadOnly;\n    if (this.variableEnvironment) this.variableEnvironment.environmentRecord.isReadOnly = value;\n    if (this.lexicalEnvironment) this.lexicalEnvironment.environmentRecord.isReadOnly = value;\n    this.isReadOnly = value;\n    return oldReadOnly;\n  }\n\n  suspend(): void {\n    // TODO #712: suspend\n  }\n\n  resume(): Value {\n    // TODO #712: resume\n    return this.realm.intrinsics.undefined;\n  }\n}\n\nexport function construct_empty_effects(realm: Realm): Effects {\n  return [realm.intrinsics.empty, new Generator(realm), new Map(), new Map(), new Set()];\n}\n\nexport class Realm {\n  constructor(opts: RealmOptions) {\n    this.isReadOnly = false;\n    this.useAbstractInterpretation = !!opts.serialize || !!opts.residual || !!opts.check;\n    this.trackLeaks = !!opts.abstractEffectsInAdditionalFunctions;\n    this.isInPureTryStatement = false;\n    if (opts.mathRandomSeed !== undefined) {\n      this.mathRandomGenerator = seedrandom(opts.mathRandomSeed);\n    }\n    this.strictlyMonotonicDateNow = !!opts.strictlyMonotonicDateNow;\n\n    this.timeout = opts.timeout;\n    if (this.timeout) {\n      // We'll call Date.now for every this.timeoutCounterThreshold'th AST node.\n      // The threshold is there to reduce the cost of the surprisingly expensive Date.now call.\n      this.timeoutCounter = this.timeoutCounterThreshold = 1024;\n    }\n\n    this.start = Date.now();\n    this.compatibility = opts.compatibility || \"browser\";\n    this.maxStackDepth = opts.maxStackDepth || 225;\n    this.omitInvariants = !!opts.omitInvariants;\n\n    this.$TemplateMap = [];\n\n    if (this.useAbstractInterpretation) {\n      this.preludeGenerator = new PreludeGenerator(opts.debugNames, opts.uniqueSuffix);\n      this.pathConditions = [];\n      ObjectValue.setupTrackedPropertyAccessors(ObjectValue.trackedPropertyNames);\n      ObjectValue.setupTrackedPropertyAccessors(NativeFunctionValue.trackedPropertyNames);\n      ObjectValue.setupTrackedPropertyAccessors(ProxyValue.trackedPropertyNames);\n    }\n\n    this.tracers = [];\n\n    // These get initialized in construct_realm to avoid the dependency\n    this.intrinsics = ({}: any);\n    this.$GlobalObject = (({}: any): ObjectValue);\n    this.evaluators = (Object.create(null): any);\n    this.partialEvaluators = (Object.create(null): any);\n    this.$GlobalEnv = ((undefined: any): LexicalEnvironment);\n\n    this.react = {\n      classComponentMetadata: new Map(),\n      enabled: opts.reactEnabled || false,\n      output: opts.reactOutput || \"create-element\",\n      symbols: new Map(),\n      currentOwner: undefined,\n      hoistableReactElements: new WeakMap(),\n      hoistableFunctions: new WeakMap(),\n    };\n\n    this.fbLibraries = {\n      cx: undefined,\n      fbt: undefined,\n      idx: undefined,\n      ix: undefined,\n      react: undefined,\n      reactRelay: undefined,\n    };\n\n    this.errorHandler = opts.errorHandler;\n\n    this.globalSymbolRegistry = [];\n    this.activeLexicalEnvironments = new Set();\n    this._abstractValuesDefined = new Set(); // A set of nameStrings to ensure abstract values have unique names\n    this.debugNames = opts.debugNames;\n  }\n\n  start: number;\n  isReadOnly: boolean;\n  isStrict: boolean;\n  useAbstractInterpretation: boolean;\n  trackLeaks: boolean;\n  debugNames: void | boolean;\n  isInPureTryStatement: boolean; // TODO(1264): Remove this once we implement proper exception handling in abstract calls.\n  timeout: void | number;\n  mathRandomGenerator: void | (() => number);\n  strictlyMonotonicDateNow: boolean;\n  maxStackDepth: number;\n  omitInvariants: boolean;\n\n  modifiedBindings: void | Bindings;\n  modifiedProperties: void | PropertyBindings;\n  createdObjects: void | CreatedObjects;\n  createdObjectsTrackedForLeaks: void | CreatedObjects;\n  reportObjectGetOwnProperties: void | (ObjectValue => void);\n  reportPropertyAccess: void | (PropertyBinding => void);\n  savedCompletion: void | PossiblyNormalCompletion;\n\n  activeLexicalEnvironments: Set<LexicalEnvironment>;\n\n  // A list of abstract conditions that are known to be true in the current execution path.\n  // For example, the abstract condition of an if statement is known to be true inside its true branch.\n  pathConditions: Array<AbstractValue>;\n\n  currentLocation: ?BabelNodeSourceLocation;\n  nextContextLocation: ?BabelNodeSourceLocation;\n  contextStack: Array<ExecutionContext> = [];\n  $GlobalEnv: LexicalEnvironment;\n  intrinsics: Intrinsics;\n\n  react: {\n    classComponentMetadata: Map<ECMAScriptSourceFunctionValue, ClassComponentMetadata>,\n    currentOwner?: ObjectValue,\n    enabled: boolean,\n    hoistableFunctions: WeakMap<FunctionValue, boolean>,\n    hoistableReactElements: WeakMap<ObjectValue, boolean>,\n    output?: ReactOutputTypes,\n    reactLibraryObject?: ObjectValue,\n    symbols: Map<ReactSymbolTypes, SymbolValue>,\n  };\n\n  fbLibraries: {\n    cx: void | ObjectValue,\n    fbt: void | ObjectValue,\n    idx: void | ObjectValue,\n    ix: void | ObjectValue,\n    react: void | ObjectValue,\n    reactRelay: void | ObjectValue,\n  };\n\n  $GlobalObject: ObjectValue | AbstractObjectValue;\n  compatibility: Compatibility;\n\n  $TemplateMap: Array<{ $Strings: Array<string>, $Array: ObjectValue }>;\n\n  generator: void | Generator;\n  preludeGenerator: void | PreludeGenerator;\n  timeoutCounter: number;\n  timeoutCounterThreshold: number;\n  evaluators: {\n    [key: string]: (\n      ast: BabelNode,\n      strictCode: boolean,\n      env: LexicalEnvironment,\n      realm: Realm,\n      metadata?: any\n    ) => Value | Reference,\n  };\n  partialEvaluators: {\n    [key: string]: (\n      ast: BabelNode,\n      strictCode: boolean,\n      env: LexicalEnvironment,\n      realm: Realm,\n      metadata?: any\n    ) => [Completion | Reference | Value, BabelNode, Array<BabelNodeStatement>],\n  };\n  simplifyAndRefineAbstractValue: AbstractValue => Value;\n  simplifyAndRefineAbstractCondition: AbstractValue => Value;\n\n  tracers: Array<Tracer>;\n\n  MOBILE_JSC_VERSION = \"jsc-600-1-4-17\";\n\n  errorHandler: ?ErrorHandler;\n  objectCount = 0;\n  symbolCount = 867501803871088;\n  // Unique tag for identifying function body ast node. It is neeeded\n  // instead of ast node itself because we may perform ast tree deep clone\n  // during serialization which changes the ast identity.\n  functionBodyUniqueTagSeed = 1;\n\n  globalSymbolRegistry: Array<{ $Key: string, $Symbol: SymbolValue }>;\n\n  debuggerInstance: DebugServerType | void;\n\n  nextGeneratorId: number = 0;\n  _abstractValuesDefined: Set<string>;\n\n  // to force flow to type the annotations\n  isCompatibleWith(compatibility: Compatibility): boolean {\n    return compatibility === this.compatibility;\n  }\n\n  // Checks if there is a let binding at global scope with the given name\n  // returning it if so\n  getGlobalLetBinding(key: string): void | Value {\n    let globrec = this.$GlobalEnv.environmentRecord;\n    // GlobalEnv should have a GlobalEnvironmentRecord\n    invariant(globrec instanceof GlobalEnvironmentRecord);\n    let dclrec = globrec.$DeclarativeRecord;\n\n    try {\n      return dclrec.HasBinding(key) ? dclrec.GetBindingValue(key, false) : undefined;\n    } catch (e) {\n      if (e instanceof FatalError) return undefined;\n      throw e;\n    }\n  }\n\n  /*\n   Read only realms disallow:\n   - using console.log\n   - creating bindings in any existing scopes\n   - modifying object properties in any existing scopes\n   Setting a realm read-only sets all contained environments to read-only, but\n   all new environments (e.g. new ExecutionContexts) will be writeable.\n   */\n  setReadOnly(readOnlyValue: boolean) {\n    this.isReadOnly = readOnlyValue;\n    this.$GlobalEnv.environmentRecord.isReadOnly = readOnlyValue;\n    this.contextStack.forEach(ctx => {\n      ctx.setReadOnly(readOnlyValue);\n    });\n  }\n\n  testTimeout() {\n    let timeout = this.timeout;\n    if (timeout && !--this.timeoutCounter) {\n      this.timeoutCounter = this.timeoutCounterThreshold;\n      let total = Date.now() - this.start;\n      if (total > timeout) {\n        throw new FatalError(\"Timed out\");\n      }\n    }\n  }\n\n  hasRunningContext(): boolean {\n    return this.contextStack.length !== 0;\n  }\n\n  getRunningContext(): ExecutionContext {\n    let context = this.contextStack[this.contextStack.length - 1];\n    invariant(context, \"There's no running execution context\");\n    return context;\n  }\n\n  // Call when a scope falls out of scope and should be destroyed.\n  // Clears the Bindings corresponding to the disappearing Scope from ModifiedBindings\n  onDestroyScope(lexicalEnvironment: LexicalEnvironment) {\n    invariant(this.activeLexicalEnvironments.has(lexicalEnvironment));\n    let modifiedBindings = this.modifiedBindings;\n    if (modifiedBindings) {\n      // Don't undo things to global scope because it's needed past its destruction point (for serialization)\n      let environmentRecord = lexicalEnvironment.environmentRecord;\n      if (environmentRecord instanceof DeclarativeEnvironmentRecord)\n        for (let b of modifiedBindings.keys())\n          if (environmentRecord.bindings[b.name] && environmentRecord.bindings[b.name] === b)\n            modifiedBindings.delete(b);\n    }\n\n    // Ensures if we call onDestroyScope too early, there will be a failure.\n    this.activeLexicalEnvironments.delete(lexicalEnvironment);\n    lexicalEnvironment.destroy();\n  }\n\n  pushContext(context: ExecutionContext): void {\n    if (this.contextStack.length >= this.maxStackDepth) {\n      throw new FatalError(\"Maximum stack depth exceeded\");\n    }\n    this.contextStack.push(context);\n  }\n\n  popContext(context: ExecutionContext): void {\n    if (context.function !== undefined) {\n      let modifiedBindings = this.modifiedBindings;\n      if (modifiedBindings !== undefined) {\n        for (let b of modifiedBindings.keys()) {\n          if (b.environment.$FunctionObject === context.function) modifiedBindings.delete(b);\n        }\n      }\n    }\n    let c = this.contextStack.pop();\n    invariant(c === context);\n  }\n\n  wrapInGlobalEnv<T>(callback: () => T): T {\n    let context = new ExecutionContext();\n    context.isStrict = this.isStrict;\n    context.lexicalEnvironment = this.$GlobalEnv;\n    context.variableEnvironment = this.$GlobalEnv;\n    context.realm = this;\n\n    this.pushContext(context);\n    try {\n      return callback();\n    } finally {\n      this.popContext(context);\n    }\n  }\n\n  assignToGlobal(name: BabelNodeLVal, value: Value) {\n    this.wrapInGlobalEnv(() => this.$GlobalEnv.assignToGlobal(name, value));\n  }\n\n  deleteGlobalBinding(name: string) {\n    this.$GlobalEnv.environmentRecord.DeleteBinding(name);\n  }\n\n  // Evaluate a context as if it won't have any side-effects outside of any objects\n  // that it created itself. This promises that any abstract functions inside of it\n  // also won't have effects on any objects or bindings that weren't created in this\n  // call.\n  evaluatePure<T>(f: () => T) {\n    if (!this.trackLeaks) {\n      return f();\n    }\n    let saved_createdObjectsTrackedForLeaks = this.createdObjectsTrackedForLeaks;\n    // Track all objects (including function closures) created during\n    // this call. This will be used to make the assumption that every\n    // *other* object is unchanged (pure). These objects are marked\n    // as leaked if they're passed to abstract functions.\n    this.createdObjectsTrackedForLeaks = new Set();\n    try {\n      return f();\n    } finally {\n      this.createdObjectsTrackedForLeaks = saved_createdObjectsTrackedForLeaks;\n    }\n  }\n\n  isInPureScope() {\n    return !!this.createdObjectsTrackedForLeaks;\n  }\n\n  // Evaluate some code that might generate temporal values knowing that it might end in an abrupt\n  // completion. We only need to support ThrowCompletion for now but this can be expanded to support other\n  // abrupt completions.\n  evaluateWithPossibleThrowCompletion(f: () => Value, thrownTypes: TypesDomain, thrownValues: ValuesDomain): Value {\n    // The cases when we need this are only when we might invoke unknown code such as abstract\n    // funtions, getters, custom coercion etc. It is possible we can use this in other cases\n    // where something might throw a built-in error but can never issue arbitrary code such as\n    // calling something that might not be a function. For now we only use it in pure functions.\n    invariant(this.isInPureScope(), \"only abstract abrupt completion in pure functions\");\n\n    // TODO(1264): We should create a new generator for this scope and wrap it in a try/catch.\n    // We could use the outcome of that as the join condition for a PossiblyNormalCompletion.\n    // We should then compose that with the saved completion and move on to the normal route.\n    // Currently we just issue a recoverable error instead if this might matter.\n    let value = f();\n    if (this.isInPureTryStatement) {\n      let diag = new CompilerDiagnostic(\n        \"Possible throw inside try/catch is not yet supported\",\n        this.currentLocation,\n        \"PP0021\",\n        \"RecoverableError\"\n      );\n      if (this.handleError(diag) !== \"Recover\") throw new FatalError();\n    }\n    return value;\n  }\n\n  // Evaluate the given ast in a sandbox and return the evaluation results\n  // in the form of a completion, a code generator, a map of changed variable\n  // bindings and a map of changed property bindings.\n  evaluateNodeForEffects(\n    ast: BabelNode,\n    strictCode: boolean,\n    env: LexicalEnvironment,\n    state?: any,\n    generatorName?: string\n  ): Effects {\n    return this.evaluateForEffects(() => env.evaluateCompletionDeref(ast, strictCode), state, generatorName);\n  }\n\n  evaluateAndRevertInGlobalEnv(func: () => Value): void {\n    this.wrapInGlobalEnv(() => this.evaluateForEffects(func));\n  }\n\n  evaluateNodeForEffectsInGlobalEnv(node: BabelNode, state?: any, generatorName?: string): Effects {\n    return this.wrapInGlobalEnv(() => this.evaluateNodeForEffects(node, false, this.$GlobalEnv, state, generatorName));\n  }\n\n  partiallyEvaluateNodeForEffects(\n    ast: BabelNode,\n    strictCode: boolean,\n    env: LexicalEnvironment\n  ): [Effects, BabelNode, Array<BabelNodeStatement>] {\n    let nodeAst, nodeIO;\n    function partialEval() {\n      let result;\n      [result, nodeAst, nodeIO] = env.partiallyEvaluateCompletionDeref(ast, strictCode);\n      return result;\n    }\n    let effects = this.evaluateForEffects(partialEval);\n    invariant(nodeAst !== undefined && nodeIO !== undefined);\n    return [effects, nodeAst, nodeIO];\n  }\n\n  evaluateForEffects(f: () => Completion | Value, state: any, generatorName: void | string): Effects {\n    // Save old state and set up empty state for ast\n    let [savedBindings, savedProperties] = this.getAndResetModifiedMaps();\n    let saved_generator = this.generator;\n    let saved_createdObjects = this.createdObjects;\n    let saved_completion = this.savedCompletion;\n    this.generator = new Generator(this, generatorName);\n    this.createdObjects = new Set();\n    this.savedCompletion = undefined; // while in this call, we only explore the normal path.\n\n    let result;\n    try {\n      for (let t1 of this.tracers) t1.beginEvaluateForEffects(state);\n\n      let c;\n      try {\n        try {\n          c = f();\n          if (c instanceof Reference) c = Environment.GetValue(this, c);\n        } catch (e) {\n          if (e instanceof AbruptCompletion) c = e;\n          else throw e;\n        }\n        // This is a join point for the normal branch of a PossiblyNormalCompletion.\n        if (c instanceof Value || c instanceof AbruptCompletion) c = Functions.incorporateSavedCompletion(this, c);\n        invariant(c !== undefined);\n        if (c instanceof PossiblyNormalCompletion) {\n          // The current state may have advanced since the time control forked into the various paths recorded in c.\n          // Update the normal path and restore the global state to what it was at the time of the fork.\n          let subsequentEffects = this.getCapturedEffects(c, c.value);\n          invariant(subsequentEffects !== undefined);\n          this.stopEffectCaptureAndUndoEffects(c);\n          Join.updatePossiblyNormalCompletionWithSubsequentEffects(this, c, subsequentEffects);\n          this.savedCompletion = undefined;\n        }\n\n        invariant(this.generator !== undefined);\n        invariant(this.modifiedBindings !== undefined);\n        invariant(this.modifiedProperties !== undefined);\n        invariant(this.createdObjects !== undefined);\n        let astGenerator = this.generator;\n        let astBindings = this.modifiedBindings;\n        let astProperties = this.modifiedProperties;\n        let astCreatedObjects = this.createdObjects;\n\n        // Return the captured state changes and evaluation result\n        result = [c, astGenerator, astBindings, astProperties, astCreatedObjects];\n        return result;\n      } finally {\n        // Roll back the state changes\n        if (this.savedCompletion !== undefined) this.stopEffectCaptureAndUndoEffects(this.savedCompletion);\n        if (result !== undefined) {\n          this.restoreBindings(result[2]);\n          this.restoreProperties(result[3]);\n        } else {\n          this.restoreBindings(this.modifiedBindings);\n          this.restoreProperties(this.modifiedProperties);\n        }\n        this.generator = saved_generator;\n        this.modifiedBindings = savedBindings;\n        this.modifiedProperties = savedProperties;\n        this.createdObjects = saved_createdObjects;\n        this.savedCompletion = saved_completion;\n      }\n    } finally {\n      for (let t2 of this.tracers) t2.endEvaluateForEffects(state, result);\n    }\n  }\n\n  evaluateWithUndoForDiagnostic(f: () => Value): CompilerDiagnostic | Value {\n    if (!this.useAbstractInterpretation) return f();\n    let savedHandler = this.errorHandler;\n    let diagnostic;\n    try {\n      this.errorHandler = d => {\n        diagnostic = d;\n        return \"Fail\";\n      };\n      let effects = this.evaluateForEffects(f);\n      this.applyEffects(effects);\n      let resultVal = effects[0];\n      if (resultVal instanceof AbruptCompletion) throw resultVal;\n      if (resultVal instanceof PossiblyNormalCompletion) {\n        // in this case one of the branches may complete abruptly, which means that\n        // not all control flow branches join into one flow at this point.\n        // Consequently we have to continue tracking changes until the point where\n        // all the branches come together into one.\n        resultVal = this.composeWithSavedCompletion(resultVal);\n      }\n      invariant(resultVal instanceof Value);\n      return resultVal;\n    } catch (e) {\n      if (diagnostic !== undefined) return diagnostic;\n      throw e;\n    } finally {\n      this.errorHandler = savedHandler;\n    }\n  }\n\n  evaluateForFixpointEffects(\n    loopContinueTest: () => Value,\n    loopBody: () => EvaluationResult\n  ): void | [Effects, Effects] {\n    try {\n      let effects1 = this.evaluateForEffects((loopBody: any));\n      while (true) {\n        this.restoreBindings(effects1[2]);\n        this.restoreProperties(effects1[3]);\n        let effects2 = this.evaluateForEffects(() => {\n          let test = loopContinueTest();\n          if (!(test instanceof AbstractValue)) throw new FatalError(\"loop terminates before fixed point\");\n          return (loopBody(): any);\n        });\n        this.restoreBindings(effects1[2]);\n        this.restoreProperties(effects1[3]);\n        if (Widen.containsEffects(effects1, effects2)) {\n          // effects1 includes every value present in effects2, so doing another iteration using effects2 will not\n          // result in any more values being added to abstract domains and hence a fixpoint has been reached.\n          // Generate code using effects2 because its expressions have not been widened away.\n          let [, gen, bindings2, pbindings2] = effects2;\n          this._emitPropertAssignments(gen, pbindings2);\n          this._emitLocalAssignments(gen, bindings2);\n          return [effects1, effects2];\n        }\n        effects1 = Widen.widenEffects(this, effects1, effects2);\n      }\n    } catch (e) {\n      return undefined;\n    }\n  }\n\n  // populate the loop body generator with assignments that will update the phiNodes\n  _emitLocalAssignments(gen: Generator, bindings: Bindings) {\n    let tvalFor: Map<any, AbstractValue> = new Map();\n    bindings.forEach((binding, key, map) => {\n      let val = binding.value;\n      if (val instanceof AbstractValue) {\n        invariant(val._buildNode !== undefined);\n        let tval = gen.derive(val.types, val.values, [val], ([n]) => n, {\n          skipInvariant: true,\n        });\n        tvalFor.set(key, tval);\n      }\n    });\n    bindings.forEach((binding, key, map) => {\n      let val = binding.value;\n      if (val instanceof AbstractValue) {\n        let phiNode = key.phiNode;\n        let tval = tvalFor.get(key);\n        invariant(tval !== undefined);\n        gen.emitStatement([tval], ([v]) => {\n          invariant(phiNode !== undefined);\n          let id = phiNode.buildNode([]);\n          return t.expressionStatement(t.assignmentExpression(\"=\", (id: any), v));\n        });\n      }\n    });\n  }\n\n  // populate the loop body generator with assignments that will update properties modified inside the loop\n  _emitPropertAssignments(gen: Generator, pbindings: PropertyBindings) {\n    function isSelfReferential(value: Value, pathNode: void | AbstractValue): boolean {\n      if (value === pathNode) return true;\n      if (value instanceof AbstractValue && pathNode !== undefined) {\n        for (let v of value.args) {\n          if (isSelfReferential(v, pathNode)) return true;\n        }\n      }\n      return false;\n    }\n\n    let tvalFor: Map<any, AbstractValue> = new Map();\n    pbindings.forEach((val, key, map) => {\n      let value = val && val.value;\n      if (value instanceof AbstractValue) {\n        invariant(value._buildNode !== undefined);\n        let tval = gen.derive(\n          value.types,\n          value.values,\n          [key.object, value],\n          ([o, n]) => {\n            invariant(value instanceof Value);\n            if (typeof key.key === \"string\" && value.mightHaveBeenDeleted() && isSelfReferential(value, key.pathNode)) {\n              let inTest = t.binaryExpression(\"in\", t.stringLiteral(key.key), o);\n              let addEmpty = t.conditionalExpression(inTest, n, emptyExpression);\n              n = t.logicalExpression(\"||\", n, addEmpty);\n            }\n            return n;\n          },\n          {\n            skipInvariant: true,\n          }\n        );\n        tvalFor.set(key, tval);\n      }\n    });\n    pbindings.forEach((val, key, map) => {\n      let path = key.pathNode;\n      let tval = tvalFor.get(key);\n      invariant(val !== undefined);\n      let value = val.value;\n      invariant(value instanceof Value);\n      let mightHaveBeenDeleted = value.mightHaveBeenDeleted();\n      let mightBeUndefined = value.mightBeUndefined();\n      if (typeof key.key === \"string\") {\n        gen.emitStatement([key.object, tval || value, this.intrinsics.empty], ([o, v, e]) => {\n          invariant(path !== undefined);\n          let lh = path.buildNode([o, t.identifier(key.key)]);\n          let r = t.expressionStatement(t.assignmentExpression(\"=\", (lh: any), v));\n          if (mightHaveBeenDeleted) {\n            // If v === __empty || (v === undefined  && !(key.key in o))  then delete it\n            let emptyTest = t.binaryExpression(\"===\", v, e);\n            let undefinedTest = t.binaryExpression(\"===\", v, voidExpression);\n            let inTest = t.unaryExpression(\"!\", t.binaryExpression(\"in\", t.stringLiteral(key.key), o));\n            let guard = t.logicalExpression(\"||\", emptyTest, t.logicalExpression(\"&&\", undefinedTest, inTest));\n            let deleteIt = t.expressionStatement(t.unaryExpression(\"delete\", (lh: any)));\n            return t.ifStatement(mightBeUndefined ? emptyTest : guard, deleteIt, r);\n          }\n          return r;\n        });\n      } else {\n        gen.emitStatement([key.object, key.key, tval || value, this.intrinsics.empty], ([o, p, v, e]) => {\n          invariant(path !== undefined);\n          let lh = path.buildNode([o, p]);\n          return t.expressionStatement(t.assignmentExpression(\"=\", (lh: any), v));\n        });\n      }\n    });\n  }\n\n  composeEffects(priorEffects: Effects, subsequentEffects: Effects): Effects {\n    let [, pg, pb, pp, po] = priorEffects;\n    let [sc, sg, sb, sp, so] = subsequentEffects;\n    let result = construct_empty_effects(this);\n    let [, , rb, rp, ro] = result;\n\n    result[0] = sc;\n\n    result[1] = Join.composeGenerators(this, pg || result[1], sg);\n\n    if (pb) {\n      pb.forEach((val, key, m) => rb.set(key, val));\n    }\n    sb.forEach((val, key, m) => rb.set(key, val));\n\n    if (pp) {\n      pp.forEach((desc, propertyBinding, m) => rp.set(propertyBinding, desc));\n    }\n    sp.forEach((val, key, m) => rp.set(key, val));\n\n    if (po) {\n      po.forEach((ob, a) => ro.add(ob));\n    }\n    so.forEach((ob, a) => ro.add(ob));\n\n    return result;\n  }\n\n  updateAbruptCompletions(priorEffects: Effects, c: PossiblyNormalCompletion) {\n    if (c.consequent instanceof AbruptCompletion) {\n      c.consequentEffects = this.composeEffects(priorEffects, c.consequentEffects);\n      let alternate = c.alternate;\n      if (alternate instanceof PossiblyNormalCompletion) this.updateAbruptCompletions(priorEffects, alternate);\n    } else {\n      invariant(c.alternate instanceof AbruptCompletion);\n      c.alternateEffects = this.composeEffects(priorEffects, c.alternateEffects);\n      let consequent = c.consequent;\n      if (consequent instanceof PossiblyNormalCompletion) this.updateAbruptCompletions(priorEffects, consequent);\n    }\n  }\n\n  composeWithSavedCompletion(completion: PossiblyNormalCompletion): Value {\n    if (this.savedCompletion === undefined) {\n      this.savedCompletion = completion;\n      this.savedCompletion.savedPathConditions = this.pathConditions;\n      this.captureEffects(completion);\n    } else {\n      this.savedCompletion = Join.composePossiblyNormalCompletions(this, this.savedCompletion, completion);\n    }\n    if (completion.consequent instanceof AbruptCompletion) {\n      Path.pushInverseAndRefine(completion.joinCondition);\n      if (completion.alternate instanceof PossiblyNormalCompletion) {\n        completion.alternate.pathConditions.forEach(Path.pushAndRefine);\n      }\n    } else if (completion.alternate instanceof AbruptCompletion) {\n      Path.pushAndRefine(completion.joinCondition);\n      if (completion.consequent instanceof PossiblyNormalCompletion) {\n        completion.consequent.pathConditions.forEach(Path.pushAndRefine);\n      }\n    }\n    return completion.value;\n  }\n\n  incorporatePriorSavedCompletion(priorCompletion: void | PossiblyNormalCompletion) {\n    if (priorCompletion === undefined) return;\n    if (this.savedCompletion === undefined) {\n      this.savedCompletion = priorCompletion;\n      this.captureEffects(priorCompletion);\n    } else {\n      invariant(priorCompletion.savedEffects !== undefined);\n      let savedEffects = this.savedCompletion.savedEffects;\n      invariant(savedEffects !== undefined);\n      this.restoreBindings(savedEffects[2]);\n      this.restoreProperties(savedEffects[3]);\n      Join.updatePossiblyNormalCompletionWithSubsequentEffects(this, priorCompletion, savedEffects);\n      this.restoreBindings(savedEffects[2]);\n      this.restoreProperties(savedEffects[3]);\n      invariant(this.savedCompletion !== undefined);\n      this.savedCompletion.savedEffects = undefined;\n      this.savedCompletion = Join.composePossiblyNormalCompletions(this, priorCompletion, this.savedCompletion);\n    }\n  }\n\n  captureEffects(completion: PossiblyNormalCompletion) {\n    if (completion.savedEffects !== undefined) {\n      // Already called captureEffects, just carry on\n      return;\n    }\n    completion.savedEffects = [\n      this.intrinsics.undefined,\n      (this.generator: any),\n      (this.modifiedBindings: any),\n      (this.modifiedProperties: any),\n      (this.createdObjects: any),\n    ];\n    this.generator = new Generator(this);\n    this.modifiedBindings = new Map();\n    this.modifiedProperties = new Map();\n    this.createdObjects = new Set();\n  }\n\n  getCapturedEffects(completion: PossiblyNormalCompletion, v?: Value): void | Effects {\n    if (completion.savedEffects === undefined) return undefined;\n    if (v === undefined) v = this.intrinsics.undefined;\n    invariant(this.generator !== undefined);\n    invariant(this.modifiedBindings !== undefined);\n    invariant(this.modifiedProperties !== undefined);\n    invariant(this.createdObjects !== undefined);\n    return [v, this.generator, this.modifiedBindings, this.modifiedProperties, this.createdObjects];\n  }\n\n  stopEffectCapture(completion: PossiblyNormalCompletion) {\n    let e = this.getCapturedEffects(completion);\n    if (e !== undefined) {\n      this.stopEffectCaptureAndUndoEffects(completion);\n      this.applyEffects(e);\n    }\n  }\n\n  stopEffectCaptureAndUndoEffects(completion: PossiblyNormalCompletion) {\n    // Roll back the state changes\n    this.restoreBindings(this.modifiedBindings);\n    this.restoreProperties(this.modifiedProperties);\n\n    // Restore saved state\n    if (completion.savedEffects !== undefined) {\n      let [c, g, b, p, o] = completion.savedEffects;\n      c;\n      completion.savedEffects = undefined;\n      this.generator = g;\n      this.modifiedBindings = b;\n      this.modifiedProperties = p;\n      this.createdObjects = o;\n    } else {\n      invariant(false);\n    }\n  }\n\n  // Apply the given effects to the global state\n  applyEffects(effects: Effects, leadingComment: string = \"\") {\n    let [, generator, bindings, properties, createdObjects] = effects;\n\n    // Add generated code for property modifications\n    this.appendGenerator(generator, leadingComment);\n\n    // Restore bindings\n    this.restoreBindings(bindings);\n    this.restoreProperties(properties);\n\n    // track bindings\n    let realmModifiedBindings = this.modifiedBindings;\n    if (realmModifiedBindings !== undefined) {\n      bindings.forEach((val, key, m) => {\n        invariant(realmModifiedBindings !== undefined);\n        if (!realmModifiedBindings.has(key)) {\n          realmModifiedBindings.set(key, val);\n        }\n      });\n    }\n    let realmModifiedProperties = this.modifiedProperties;\n    if (realmModifiedProperties !== undefined) {\n      properties.forEach((desc, propertyBinding, m) => {\n        invariant(realmModifiedProperties !== undefined);\n        if (!realmModifiedProperties.has(propertyBinding)) {\n          realmModifiedProperties.set(propertyBinding, desc);\n        }\n      });\n    }\n\n    // add created objects\n    if (createdObjects.size > 0) {\n      let realmCreatedObjects = this.createdObjects;\n      if (realmCreatedObjects === undefined) this.createdObjects = new Set(createdObjects);\n      else {\n        createdObjects.forEach((ob, a) => {\n          invariant(realmCreatedObjects !== undefined);\n          realmCreatedObjects.add(ob);\n        });\n      }\n    }\n  }\n\n  outputToConsole(method: \"log\" | \"warn\" | \"error\", args: Array<string | ConcreteValue>): void {\n    if (this.isReadOnly) {\n      // This only happens during speculative execution and is reported elsewhere\n      throw new FatalError(\"Trying to create console output in read-only realm\");\n    }\n    if (this.useAbstractInterpretation) {\n      invariant(this.generator !== undefined);\n      this.generator.emitConsoleLog(method, args);\n    } else {\n      console[method](getString(this, args));\n    }\n\n    function getString(realm: Realm, values: Array<string | ConcreteValue>) {\n      let res = \"\";\n      while (values.length) {\n        let next = values.shift();\n        let nextString = To.ToString(realm, next);\n        res += nextString;\n      }\n      return res;\n    }\n  }\n\n  // Record the current value of binding in this.modifiedBindings unless\n  // there is already an entry for binding.\n  recordModifiedBinding(binding: Binding): Binding {\n    if (binding.environment.isReadOnly) {\n      // This only happens during speculative execution and is reported elsewhere\n      throw new FatalError(\"Trying to modify a binding in read-only realm\");\n    }\n    if (this.modifiedBindings !== undefined && !this.modifiedBindings.has(binding))\n      this.modifiedBindings.set(binding, {\n        hasLeaked: binding.hasLeaked,\n        value: binding.value,\n      });\n    return binding;\n  }\n\n  callReportObjectGetOwnProperties(ob: ObjectValue): void {\n    if (this.reportObjectGetOwnProperties !== undefined) {\n      this.reportObjectGetOwnProperties(ob);\n    }\n  }\n\n  callReportPropertyAccess(binding: PropertyBinding): void {\n    if (this.reportPropertyAccess !== undefined) {\n      this.reportPropertyAccess(binding);\n    }\n  }\n\n  // Record the current value of binding in this.modifiedProperties unless\n  // there is already an entry for binding.\n  recordModifiedProperty(binding: void | PropertyBinding): void {\n    if (binding === undefined) return;\n    if (this.isReadOnly && (this.getRunningContext().isReadOnly || !this.isNewObject(binding.object))) {\n      // This only happens during speculative execution and is reported elsewhere\n      throw new FatalError(\"Trying to modify a property in read-only realm\");\n    }\n    this.callReportPropertyAccess(binding);\n    if (this.modifiedProperties !== undefined && !this.modifiedProperties.has(binding)) {\n      this.modifiedProperties.set(binding, cloneDescriptor(binding.descriptor));\n    }\n  }\n\n  isNewObject(object: AbstractObjectValue | ObjectValue): boolean {\n    if (object instanceof AbstractObjectValue) return false;\n    return this.createdObjects === undefined || this.createdObjects.has(object);\n  }\n\n  recordNewObject(object: ObjectValue): void {\n    if (this.createdObjects !== undefined) {\n      this.createdObjects.add(object);\n    }\n    if (this.createdObjectsTrackedForLeaks !== undefined) {\n      this.createdObjectsTrackedForLeaks.add(object);\n    }\n  }\n\n  // Returns the current values of modifiedBindings and modifiedProperties\n  // and then assigns new empty maps to them.\n  getAndResetModifiedMaps(): [void | Bindings, void | PropertyBindings] {\n    let result = [this.modifiedBindings, this.modifiedProperties];\n    this.modifiedBindings = new Map();\n    this.modifiedProperties = new Map();\n    return result;\n  }\n\n  // Restores each Binding in the given map to the value it\n  // had when it was entered into the map and updates the map to record\n  // the value the Binding had just before the call to this method.\n  restoreBindings(modifiedBindings: void | Bindings) {\n    if (modifiedBindings === undefined) return;\n    modifiedBindings.forEach(({ hasLeaked, value }, binding, m) => {\n      let l = binding.hasLeaked;\n      let v = binding.value;\n      binding.hasLeaked = hasLeaked;\n      binding.value = value;\n      m.set(binding, {\n        hasLeaked: l,\n        value: v,\n      });\n    });\n  }\n\n  // Restores each PropertyBinding in the given map to the value it\n  // had when it was entered into the map and updates the map to record\n  // the value the Binding had just before the call to this method.\n  restoreProperties(modifiedProperties: void | PropertyBindings) {\n    if (modifiedProperties === undefined) return;\n    modifiedProperties.forEach((desc, propertyBinding, m) => {\n      let d = propertyBinding.descriptor;\n      propertyBinding.descriptor = desc;\n      m.set(propertyBinding, d);\n    });\n  }\n\n  // Provide the realm with maps in which to track modifications.\n  // A map can be set to undefined if no tracking is required.\n  setModifiedMaps(modifiedBindings: void | Bindings, modifiedProperties: void | PropertyBindings) {\n    this.modifiedBindings = modifiedBindings;\n    this.modifiedProperties = modifiedProperties;\n  }\n\n  rebuildObjectProperty(object: Value, key: string, propertyValue: Value, path: string) {\n    if (!(propertyValue instanceof AbstractValue)) return;\n    if (propertyValue.kind === \"abstractConcreteUnion\") {\n      let absVal = propertyValue.args.find(e => e instanceof AbstractValue);\n      invariant(absVal instanceof AbstractValue);\n      propertyValue = absVal;\n    }\n    if (!propertyValue.isIntrinsic()) {\n      propertyValue.intrinsicName = `${path}.${key}`;\n      propertyValue.kind = \"rebuiltProperty\";\n      propertyValue.args = [object];\n      propertyValue._buildNode = ([node]) => t.memberExpression(node, t.identifier(key));\n      this.rebuildNestedProperties(propertyValue, propertyValue.intrinsicName);\n    }\n  }\n\n  rebuildNestedProperties(abstractValue: AbstractValue | UndefinedValue, path: string) {\n    if (!(abstractValue instanceof AbstractObjectValue)) return;\n    if (abstractValue.values.isTop()) return;\n    let template = abstractValue.getTemplate();\n    invariant(!template.intrinsicName || template.intrinsicName === path);\n    // TODO #882: We are using the concept of \"intrinsic values\" to mark the template\n    // object as intrinsic, so that we'll never emit code that creates it, as it instead is used\n    // to refer to an unknown but existing object.\n    // However, it's not really an intrinsic object, and it might not exist ahead of time, but only starting\n    // from this point on, which might be tied to some nested generator.\n    // Which we currently don't track, and that needs to get fixed.\n    // For now, we use intrinsicNameGenerated to mark this case.\n    template.intrinsicName = path;\n    template.intrinsicNameGenerated = true;\n    for (let [key, binding] of template.properties) {\n      if (binding === undefined || binding.descriptor === undefined) continue; // deleted\n      invariant(binding.descriptor !== undefined);\n      let value = binding.descriptor.value;\n      Properties.ThrowIfMightHaveBeenDeleted(value);\n      if (value === undefined) {\n        AbstractValue.reportIntrospectionError(abstractValue, key);\n        throw new FatalError();\n      }\n      invariant(value instanceof Value);\n      this.rebuildObjectProperty(abstractValue, key, value, path);\n    }\n  }\n\n  createExecutionContext(): ExecutionContext {\n    let context = new ExecutionContext();\n\n    let loc = this.nextContextLocation;\n    if (loc) {\n      context.setLocation(loc);\n      this.nextContextLocation = null;\n    }\n\n    return context;\n  }\n\n  setNextExecutionContextLocation(loc: ?BabelNodeSourceLocation) {\n    if (!loc) return;\n\n    //if (this.nextContextLocation) {\n    //  throw new ThrowCompletion(\n    //    Construct(this, this.intrinsics.TypeError, [new StringValue(this, \"Already have a context location that we haven't used yet\")])\n    //  );\n    //} else {\n    this.nextContextLocation = loc;\n    //}\n  }\n\n  reportIntrospectionError(message?: void | string | StringValue) {\n    if (message === undefined) message = \"\";\n    if (typeof message === \"string\") message = new StringValue(this, message);\n    invariant(message instanceof StringValue);\n    this.nextContextLocation = this.currentLocation;\n    let error = new CompilerDiagnostic(message.value, this.currentLocation, \"PP0001\", \"FatalError\");\n    this.handleError(error);\n  }\n\n  createErrorThrowCompletion(type: NativeFunctionValue, message?: void | string | StringValue): ThrowCompletion {\n    invariant(type !== this.intrinsics.__IntrospectionError);\n    if (message === undefined) message = \"\";\n    if (typeof message === \"string\") message = new StringValue(this, message);\n    invariant(message instanceof StringValue);\n    this.nextContextLocation = this.currentLocation;\n    return new ThrowCompletion(Construct(this, type, [message]), this.currentLocation);\n  }\n\n  appendGenerator(generator: Generator, leadingComment: string = \"\"): void {\n    let realmGenerator = this.generator;\n    if (realmGenerator === undefined) {\n      invariant(generator.empty());\n      return;\n    }\n    realmGenerator.appendGenerator(generator, leadingComment);\n  }\n\n  // Pass the error to the realm's error-handler\n  // Return value indicates whether the caller should try to recover from the\n  // error or not ('true' means recover if possible).\n  handleError(diagnostic: CompilerDiagnostic): ErrorHandlerResult {\n    if (!diagnostic.callStack && this.contextStack.length > 0) {\n      let error = Construct(this, this.intrinsics.Error);\n      let stack = error.$Get(\"stack\", error);\n      if (stack instanceof StringValue) diagnostic.callStack = stack.value;\n    }\n    // Default behaviour is to bail on the first error\n    let errorHandler = this.errorHandler;\n    if (!errorHandler) {\n      let msg = `${diagnostic.errorCode}: ${diagnostic.message}`;\n      if (diagnostic.location) {\n        let loc_start = diagnostic.location.start;\n        let loc_end = diagnostic.location.end;\n        msg += ` at ${loc_start.line}:${loc_start.column} to ${loc_end.line}:${loc_end.column}`;\n      }\n      try {\n        switch (diagnostic.severity) {\n          case \"Information\":\n            console.log(`Info: ${msg}`);\n            return \"Recover\";\n          case \"Warning\":\n            console.warn(`Warn: ${msg}`);\n            return \"Recover\";\n          case \"RecoverableError\":\n            console.error(`Error: ${msg}`);\n            return \"Fail\";\n          case \"FatalError\":\n            console.error(`Fatal Error: ${msg}`);\n            return \"Fail\";\n          default:\n            invariant(false, \"Unexpected error type\");\n        }\n      } finally {\n        console.log(diagnostic.callStack);\n      }\n    }\n    return errorHandler(diagnostic);\n  }\n\n  saveNameString(nameString: string): void {\n    this._abstractValuesDefined.add(nameString);\n  }\n\n  isNameStringUnique(nameString: string): boolean {\n    return !this._abstractValuesDefined.has(nameString);\n  }\n}\n"]}