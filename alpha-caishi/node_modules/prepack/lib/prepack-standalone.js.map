{"version":3,"sources":["../src/prepack-standalone.js"],"names":["InitializationError","prepackSources","prepackString","prepack","prepackFromAst","t","self","Error","Object","setPrototypeOf","prototype","sources","options","debugChannel","undefined","realmOptions","errorHandler","realm","additionalGlobals","check","generator","logger","internalDebug","modules","logModules","delayUnsupportedRequires","accelerateUnsupportedRequires","$GlobalEnv","executeSources","result","checkResidualFunctions","code","map","serialize","residual","serializer","serialized","init","sourceMaps","debuggerInstance","shutdown","residualSources","filePath","outputFilename","fileContents","sourceMapContents","JSON","stringify","executePartialEvaluator","filename","sourceMap","ast","type","file","loc","source","resolveInitializedModules","initializeMoreModules","prepackVersion"],"mappings":"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","file":"prepack-standalone.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\n/* APIs for running Prepack for code where a model of the environment is supplied as part of the code. */\n\nimport Serializer from \"./serializer/index.js\";\nimport construct_realm from \"./construct_realm.js\";\nimport initializeGlobals from \"./globals.js\";\nimport * as t from \"babel-types\";\nimport { getRealmOptions, getSerializerOptions } from \"./prepack-options\";\nimport { FatalError } from \"./errors.js\";\nimport type { SourceFile } from \"./types.js\";\nimport { AbruptCompletion } from \"./completions.js\";\nimport type { PrepackOptions } from \"./prepack-options\";\nimport { defaultOptions } from \"./options\";\nimport type { BabelNodeFile, BabelNodeProgram } from \"babel-types\";\nimport invariant from \"./invariant.js\";\nimport { version } from \"../package.json\";\nimport type { DebugChannel } from \"./debugger/server/channel/DebugChannel.js\";\nimport { type SerializedResult, SerializerStatistics } from \"./serializer/types.js\";\nimport { Modules } from \"./utils/modules.js\";\nimport { Logger } from \"./utils/logger.js\";\nimport { Generator } from \"./utils/generator.js\";\n\n// IMPORTANT: This function is now deprecated and will go away in a future release.\n// Please use FatalError instead.\nexport function InitializationError() {\n  let self = new Error(\"An error occurred while prepacking. See the error logs.\");\n  Object.setPrototypeOf(self, InitializationError.prototype);\n  return self;\n}\nObject.setPrototypeOf(InitializationError, Error);\nObject.setPrototypeOf(InitializationError.prototype, Error.prototype);\nObject.setPrototypeOf(FatalError.prototype, InitializationError.prototype);\n\nexport function prepackSources(\n  sources: Array<SourceFile>,\n  options: PrepackOptions = defaultOptions,\n  debugChannel: DebugChannel | void = undefined\n): SerializedResult {\n  let realmOptions = getRealmOptions(options);\n  realmOptions.errorHandler = options.errorHandler;\n  let realm = construct_realm(realmOptions, debugChannel);\n  initializeGlobals(realm);\n  if (typeof options.additionalGlobals === \"function\") {\n    options.additionalGlobals(realm);\n  }\n\n  if (options.check) {\n    realm.generator = new Generator(realm, \"main\");\n    let logger = new Logger(realm, !!options.internalDebug);\n    let modules = new Modules(\n      realm,\n      logger,\n      new SerializerStatistics(),\n      !!options.logModules,\n      !!options.delayUnsupportedRequires,\n      !!options.accelerateUnsupportedRequires\n    );\n    let [result] = realm.$GlobalEnv.executeSources(sources);\n    if (result instanceof AbruptCompletion) throw result;\n    checkResidualFunctions(modules);\n    return { code: \"\", map: undefined };\n  } else if (options.serialize || !options.residual) {\n    let serializer = new Serializer(realm, getSerializerOptions(options));\n    let serialized = serializer.init(sources, options.sourceMaps);\n\n    //Turn off the debugger if there is one\n    if (realm.debuggerInstance) {\n      realm.debuggerInstance.shutdown();\n    }\n\n    if (!serialized) {\n      throw new FatalError(\"serializer failed\");\n    }\n\n    if (!options.residual) return serialized;\n    let residualSources = [\n      {\n        filePath: options.outputFilename || \"unknown\",\n        fileContents: serialized.code,\n        sourceMapContents: serialized.map && JSON.stringify(serialized.map),\n      },\n    ];\n    realm = construct_realm(realmOptions, debugChannel);\n    initializeGlobals(realm);\n    if (typeof options.additionalGlobals === \"function\") {\n      options.additionalGlobals(realm);\n    }\n    realm.generator = new Generator(realm, \"main\");\n    let result = realm.$GlobalEnv.executePartialEvaluator(residualSources, options);\n    if (result instanceof AbruptCompletion) throw result;\n    return { ...result };\n  } else {\n    invariant(options.residual);\n    realm.generator = new Generator(realm, \"main\");\n    let result = realm.$GlobalEnv.executePartialEvaluator(sources, options);\n    if (result instanceof AbruptCompletion) throw result;\n    return { ...result };\n  }\n}\n\n/* deprecated: please use prepackSources instead. */\nexport function prepackString(\n  filename: string,\n  code: string,\n  sourceMap: string,\n  options: PrepackOptions = defaultOptions\n): SerializedResult {\n  return prepackSources([{ filePath: filename, fileContents: code, sourceMapContents: sourceMap }], options);\n}\n\n/* deprecated: please use prepackSources instead. */\nexport function prepack(code: string, options: PrepackOptions = defaultOptions): SerializedResult {\n  let filename = options.filename || \"unknown\";\n  let sources = [{ filePath: filename, fileContents: code }];\n\n  let realmOptions = getRealmOptions(options);\n  realmOptions.errorHandler = options.errorHandler;\n  let realm = construct_realm(realmOptions);\n  initializeGlobals(realm);\n\n  let serializer = new Serializer(realm, getSerializerOptions(options));\n  let serialized = serializer.init(sources, options.sourceMaps);\n  if (!serialized) {\n    throw new FatalError(\"serializer failed\");\n  }\n  return serialized;\n}\n\n/* deprecated: please use prepackSources instead. */\nexport function prepackFromAst(\n  ast: BabelNodeFile | BabelNodeProgram,\n  code: string,\n  options: PrepackOptions = defaultOptions\n): SerializedResult {\n  if (ast && ast.type === \"Program\") {\n    ast = t.file(ast, [], []);\n  }\n  invariant(ast && ast.type === \"File\");\n  let filename = options.filename || (ast.loc && ast.loc.source) || \"unknown\";\n  let sources = [{ filePath: filename, fileContents: code }];\n\n  let realm = construct_realm(getRealmOptions(options));\n  initializeGlobals(realm);\n  let serializer = new Serializer(realm, getSerializerOptions(options));\n  let serialized = serializer.init(sources, options.sourceMaps);\n  if (!serialized) {\n    throw new FatalError(\"serializer failed\");\n  }\n  return serialized;\n}\n\nfunction checkResidualFunctions(modules: Modules) {\n  modules.resolveInitializedModules();\n  modules.initializeMoreModules();\n  //todo: find residual functions and execute them for effects\n}\n\nexport const prepackVersion = version;\n"]}