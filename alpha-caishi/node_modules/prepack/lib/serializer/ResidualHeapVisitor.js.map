{"version":3,"sources":["../../src/serializer/ResidualHeapVisitor.js"],"names":["t","ResidualHeapVisitor","realm","logger","modules","additionalFunctionValuesAndEffects","useAbstractInterpretation","declarativeEnvironmentRecordsBindings","Map","globalBindings","functionInfos","classMethodInstances","functionInstances","values","generator","scope","commonScope","inspector","referencedDeclaredValues","Set","delayedVisitGeneratorEntries","shouldVisitReactLibrary","equivalenceSet","reactElementEquivalenceSet","additionalFunctionValueInfos","inAdditionalFunction","additionalRoots","inClass","f","oldScope","binding","desc","descriptor","undefined","obj","object","canIgnoreProperty","key","visitDescriptor","kind","symbols","symbol","propertyBinding","visitValue","properties","propertyBindingKey","propertyBindingValue","$FunctionKind","pathNode","visitObjectProperty","unknownProperty","val","value","visitObjectPropertiesWithComputedNames","visitObjectPrototype","visitConstructorPrototype","proto","$Prototype","getKind","intrinsics","$IsClassPrototype","null","func","prototype","getPropertyValue","originalConstructor","isDefaultPrototype","absVal","args","length","cond","P","V","earlier_props","visitEquivalentValue","consequent","alternate","joinCondition","descriptor1","descriptor2","get","set","visitObjectProperties","lenProperty","ToLength","entries","$MapData","$WeakMapData","len","i","entry","$Key","$Value","$SetData","$WeakSetData","parentScope","isClass","add","homeObject","$HomeObject","$BoundTargetFunction","$BoundThis","$BoundArguments","boundArg","constructor","formalParameters","$FormalParameters","code","$ECMAScriptCode","functionInfo","residualFunctionBindings","initializationStatements","functionValue","scopeInstances","unbound","modified","usesArguments","usesThis","state","tryQuery","bind","file","program","expressionStatement","functionExpression","isResidual","size","isUnsafeResidual","logError","loc","Object","keys","join","additionalFunctionEffects","_visitAdditionalFunction","_withScope","innerName","residualBinding","visitBinding","has","_visitClass","name","createBinding","residualFunctionBinding","doesNotMatter","reference","ResolveBinding","$Environment","getFromMap","map","defaultFn","IsUnresolvableReference","base","getGlobalLetBinding","declarativeEnvironmentRecord","referencedBase","referencedName","bindings","deletable","initialized","classFunc","classPrototype","visitClassMethod","propertyNameOrSymbol","methodFunc","methodType","isStatic","_visitClassMethod","propertyName","method","$HasEmptyConstructor","visitClassProperty","constructorFunc","classSuperNode","classMethodIsStatic","classMethodKeyNode","classMethodComputed","$HasComputedName","dateValue","$DateValue","buf","$ViewedArrayBuffer","visitValueMap","visitValueSet","$ParameterMap","react","enabled","fbLibraries","$Description","$ProxyTarget","$ProxyHandler","n","_mark","scopes","equivalentValue","preProcessValue","visitAbstractValue","postProcessValue","equivalentReactElementValue","visitValueObject","refuseSerialization","isIntrinsic","isTemplate","isLeaf","visitValueArray","visitValueProxy","visitValueFunction","visitValueSymbol","visitValues","visitGenerator","canSkip","recordDeclaration","recordDelayedEntry","push","visit","createGeneratorVisitCallbacks","additionalEffects","funcInstance","prevCommonScope","oldReactElementEquivalenceSet","oldInAdditionalFunction","prevReVisit","_visitAdditionalFunctionEffects","effects","result","modifiedBindings","modifiedProperties","createdObjects","applyEffects","modifiedBindingInfo","visitPropertiesAndBindings","intrinsicName","additionalBinding","previousValue","modifiedBinding","newValue","additionalFunctionOverridesValue","captures","instance","filter","x","restoreBindings","restoreProperties","evaluateAndRevertInGlobalEnv","adjustRoots","initializedModules","moduleValue","_visitReactLibrary","oldDelayedEntries","entryGenerator","visitEntry","firstGenerator","getParent","commonAncestor","reduce","y","appendRoots","reactLibraryObject","output","throwError","createElement","reactCreateElement"],"mappings":"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","file":"ResidualHeapVisitor.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { GlobalEnvironmentRecord, DeclarativeEnvironmentRecord } from \"../environment.js\";\nimport { FatalError } from \"../errors.js\";\nimport { Realm } from \"../realm.js\";\nimport type { Descriptor, PropertyBinding, ObjectKind } from \"../types.js\";\nimport { HashSet, IsArray, Get } from \"../methods/index.js\";\nimport {\n  BoundFunctionValue,\n  ProxyValue,\n  SymbolValue,\n  AbstractValue,\n  EmptyValue,\n  ECMAScriptSourceFunctionValue,\n  FunctionValue,\n  Value,\n  ObjectValue,\n  AbstractObjectValue,\n  NativeFunctionValue,\n  UndefinedValue,\n} from \"../values/index.js\";\nimport { describeLocation } from \"../intrinsics/ecma262/Error.js\";\nimport * as t from \"babel-types\";\nimport type { BabelNodeBlockStatement } from \"babel-types\";\nimport { Generator } from \"../utils/generator.js\";\nimport type { GeneratorEntry, VisitEntryCallbacks } from \"../utils/generator.js\";\nimport traverse from \"babel-traverse\";\nimport invariant from \"../invariant.js\";\nimport type {\n  ResidualFunctionBinding,\n  FunctionInfo,\n  AdditionalFunctionInfo,\n  FunctionInstance,\n  ClassMethodInstance,\n  AdditionalFunctionEffects,\n} from \"./types.js\";\nimport { ClosureRefVisitor } from \"./visitors.js\";\nimport { Logger } from \"../utils/logger.js\";\nimport { Modules } from \"../utils/modules.js\";\nimport { ResidualHeapInspector } from \"./ResidualHeapInspector.js\";\nimport {\n  commonAncestorOf,\n  getSuggestedArrayLiteralLength,\n  getOrDefault,\n  ClassPropertiesToIgnore,\n  withDescriptorValue,\n  canIgnoreClassLengthProperty,\n} from \"./utils.js\";\nimport { Environment, To } from \"../singletons.js\";\nimport { isReactElement, valueIsReactLibraryObject } from \"../react/utils.js\";\nimport { canHoistReactElement } from \"../react/hoisting.js\";\nimport ReactElementSet from \"../react/ReactElementSet.js\";\n\nexport type Scope = FunctionValue | Generator;\n\n/* This class visits all values that are reachable in the residual heap.\n   In particular, this \"filters out\" values that are:\n   - captured by a DeclarativeEnvironmentRecord, but not actually used by any closure.\n   - Unmodified prototype objects\n   TODO #680: Figure out minimal set of values that need to be kept alive for WeakSet and WeakMap instances.\n*/\nexport class ResidualHeapVisitor {\n  constructor(\n    realm: Realm,\n    logger: Logger,\n    modules: Modules,\n    additionalFunctionValuesAndEffects: Map<FunctionValue, AdditionalFunctionEffects>\n  ) {\n    invariant(realm.useAbstractInterpretation);\n    this.realm = realm;\n    this.logger = logger;\n    this.modules = modules;\n\n    this.declarativeEnvironmentRecordsBindings = new Map();\n    this.globalBindings = new Map();\n    this.functionInfos = new Map();\n    this.classMethodInstances = new Map();\n    this.functionInstances = new Map();\n    this.values = new Map();\n    let generator = this.realm.generator;\n    invariant(generator);\n    this.scope = this.commonScope = generator;\n    this.inspector = new ResidualHeapInspector(realm, logger);\n    this.referencedDeclaredValues = new Set();\n    this.delayedVisitGeneratorEntries = [];\n    this.shouldVisitReactLibrary = false;\n    this.additionalFunctionValuesAndEffects = additionalFunctionValuesAndEffects;\n    this.equivalenceSet = new HashSet();\n    this.reactElementEquivalenceSet = new ReactElementSet(realm, this.equivalenceSet);\n    this.additionalFunctionValueInfos = new Map();\n    this.inAdditionalFunction = false;\n    this.additionalRoots = new Set();\n    this.inClass = false;\n  }\n\n  realm: Realm;\n  logger: Logger;\n  modules: Modules;\n\n  // Caches that ensure one ResidualFunctionBinding exists per (record, name) pair\n  declarativeEnvironmentRecordsBindings: Map<DeclarativeEnvironmentRecord, Map<string, ResidualFunctionBinding>>;\n  globalBindings: Map<string, ResidualFunctionBinding>;\n\n  functionInfos: Map<BabelNodeBlockStatement, FunctionInfo>;\n  scope: Scope;\n  // Either the realm's generator or the FunctionValue of an additional function to serialize\n  commonScope: Scope;\n  values: Map<Value, Set<Scope>>;\n  inspector: ResidualHeapInspector;\n  referencedDeclaredValues: Set<AbstractValue>;\n  delayedVisitGeneratorEntries: Array<{| commonScope: Scope, generator: Generator, entry: GeneratorEntry |}>;\n  additionalFunctionValuesAndEffects: Map<FunctionValue, AdditionalFunctionEffects>;\n  functionInstances: Map<FunctionValue, FunctionInstance>;\n  additionalFunctionValueInfos: Map<FunctionValue, AdditionalFunctionInfo>;\n  equivalenceSet: HashSet<AbstractValue>;\n  classMethodInstances: Map<FunctionValue, ClassMethodInstance>;\n  shouldVisitReactLibrary: boolean;\n  reactElementEquivalenceSet: ReactElementSet;\n\n  // We only want to add to additionalRoots when we're in an additional function\n  inAdditionalFunction: boolean;\n  // Tracks objects + functions that were visited from inside additional functions that need to be serialized in a\n  // parent scope of the additional function (e.g. functions/objects only used from additional functions that were\n  // declared outside the additional function need to be serialized in the additional function's parent scope for\n  // identity to work).\n  additionalRoots: Set<ObjectValue>;\n  inClass: boolean;\n\n  _withScope(scope: Scope, f: () => void) {\n    let oldScope = this.scope;\n    this.scope = scope;\n    f();\n    this.scope = oldScope;\n  }\n\n  visitObjectProperty(binding: PropertyBinding) {\n    let desc = binding.descriptor;\n    if (desc === undefined) return; //deleted\n    let obj = binding.object;\n    if (obj instanceof AbstractObjectValue || !this.inspector.canIgnoreProperty(obj, binding.key)) {\n      this.visitDescriptor(desc);\n    }\n  }\n\n  visitObjectProperties(obj: ObjectValue, kind?: ObjectKind): void {\n    // visit properties\n    if (kind !== \"ReactElement\") {\n      for (let [symbol, propertyBinding] of obj.symbols) {\n        invariant(propertyBinding);\n        let desc = propertyBinding.descriptor;\n        if (desc === undefined) continue; //deleted\n        this.visitDescriptor(desc);\n        this.visitValue(symbol);\n      }\n    }\n\n    // visit properties\n    for (let [propertyBindingKey, propertyBindingValue] of obj.properties) {\n      // we don't want to the $$typeof or _owner/_store properties\n      // as this is contained within the JSXElement, otherwise\n      // they we be need to be emitted during serialization\n      if (\n        kind === \"ReactElement\" &&\n        (propertyBindingKey === \"$$typeof\" || propertyBindingKey === \"_owner\" || propertyBindingKey === \"_store\")\n      ) {\n        continue;\n      }\n      // we don't want to visit these as we handle the serialization ourselves\n      // via a different logic route for classes\n      if (\n        obj.$FunctionKind === \"classConstructor\" &&\n        (propertyBindingKey === \"arguments\" ||\n          propertyBindingKey === \"length\" ||\n          propertyBindingKey === \"name\" ||\n          propertyBindingKey === \"caller\")\n      ) {\n        continue;\n      }\n      if (propertyBindingKey.pathNode !== undefined) continue; // property is written to inside a loop\n      invariant(propertyBindingValue);\n      this.visitObjectProperty(propertyBindingValue);\n    }\n\n    // inject properties with computed names\n    if (obj.unknownProperty !== undefined) {\n      let desc = obj.unknownProperty.descriptor;\n      if (desc !== undefined) {\n        let val = desc.value;\n        invariant(val instanceof AbstractValue);\n        this.visitObjectPropertiesWithComputedNames(val);\n      }\n    }\n\n    // prototype\n    if (kind !== \"ReactElement\") {\n      // we don't want to the ReactElement prototype visited\n      // as this is contained within the JSXElement, otherwise\n      // they we be need to be emitted during serialization\n      this.visitObjectPrototype(obj);\n    }\n    if (obj instanceof FunctionValue) this.visitConstructorPrototype(obj);\n  }\n\n  visitObjectPrototype(obj: ObjectValue) {\n    let proto = obj.$Prototype;\n\n    let kind = obj.getKind();\n    if (proto === this.realm.intrinsics[kind + \"Prototype\"]) return;\n\n    if (!obj.$IsClassPrototype || proto !== this.realm.intrinsics.null) {\n      this.visitValue(proto);\n    }\n  }\n\n  visitConstructorPrototype(func: FunctionValue) {\n    // If the original prototype object was mutated,\n    // request its serialization here as this might be observable by\n    // residual code.\n    let prototype = ResidualHeapInspector.getPropertyValue(func, \"prototype\");\n    if (\n      prototype instanceof ObjectValue &&\n      prototype.originalConstructor === func &&\n      !this.inspector.isDefaultPrototype(prototype)\n    ) {\n      this.visitValue(prototype);\n    }\n  }\n\n  visitObjectPropertiesWithComputedNames(absVal: AbstractValue): void {\n    if (absVal.kind === \"widened property\") return;\n    invariant(absVal.args.length === 3);\n    let cond = absVal.args[0];\n    invariant(cond instanceof AbstractValue);\n    if (cond.kind === \"template for property name condition\") {\n      let P = cond.args[0];\n      invariant(P instanceof AbstractValue);\n      let V = absVal.args[1];\n      let earlier_props = absVal.args[2];\n      if (earlier_props instanceof AbstractValue) this.visitObjectPropertiesWithComputedNames(earlier_props);\n      this.visitValue(P);\n      this.visitValue(V);\n    } else {\n      // conditional assignment\n      absVal.args[0] = this.visitEquivalentValue(cond);\n      let consequent = absVal.args[1];\n      invariant(consequent instanceof AbstractValue);\n      let alternate = absVal.args[2];\n      invariant(alternate instanceof AbstractValue);\n      this.visitObjectPropertiesWithComputedNames(consequent);\n      this.visitObjectPropertiesWithComputedNames(alternate);\n    }\n  }\n\n  visitDescriptor(desc: Descriptor): void {\n    invariant(desc.value === undefined || desc.value instanceof Value);\n    if (desc.joinCondition !== undefined) {\n      desc.joinCondition = this.visitEquivalentValue(desc.joinCondition);\n      if (desc.descriptor1 !== undefined) this.visitDescriptor(desc.descriptor1);\n      if (desc.descriptor2 !== undefined) this.visitDescriptor(desc.descriptor2);\n      return;\n    }\n    if (desc.value !== undefined) desc.value = this.visitEquivalentValue(desc.value);\n    if (desc.get !== undefined) this.visitValue(desc.get);\n    if (desc.set !== undefined) this.visitValue(desc.set);\n  }\n\n  visitValueArray(val: ObjectValue): void {\n    this.visitObjectProperties(val);\n    const realm = this.realm;\n    let lenProperty = Get(realm, val, \"length\");\n    if (\n      lenProperty instanceof AbstractValue ||\n      To.ToLength(realm, lenProperty) !== getSuggestedArrayLiteralLength(realm, val)\n    ) {\n      this.visitValue(lenProperty);\n    }\n  }\n\n  visitValueMap(val: ObjectValue): void {\n    let kind = val.getKind();\n\n    let entries;\n    if (kind === \"Map\") {\n      entries = val.$MapData;\n    } else {\n      invariant(kind === \"WeakMap\");\n      entries = val.$WeakMapData;\n    }\n    invariant(entries !== undefined);\n    let len = entries.length;\n\n    for (let i = 0; i < len; i++) {\n      let entry = entries[i];\n      let key = entry.$Key;\n      let value = entry.$Value;\n      if (key === undefined || value === undefined) continue;\n      this.visitValue(key);\n      this.visitValue(value);\n    }\n  }\n\n  visitValueSet(val: ObjectValue): void {\n    let kind = val.getKind();\n\n    let entries;\n    if (kind === \"Set\") {\n      entries = val.$SetData;\n    } else {\n      invariant(kind === \"WeakSet\");\n      entries = val.$WeakSetData;\n    }\n    invariant(entries !== undefined);\n    let len = entries.length;\n\n    for (let i = 0; i < len; i++) {\n      let entry = entries[i];\n      if (entry === undefined) continue;\n      this.visitValue(entry);\n    }\n  }\n\n  visitValueFunction(val: FunctionValue, parentScope: Scope): void {\n    let isClass = false;\n\n    if (this.inAdditionalFunction && !this.inClass) {\n      this.additionalRoots.add(val);\n    }\n    if (val.$FunctionKind === \"classConstructor\") {\n      invariant(val instanceof ECMAScriptSourceFunctionValue);\n      let homeObject = val.$HomeObject;\n      if (homeObject instanceof ObjectValue && homeObject.$IsClassPrototype) {\n        isClass = true;\n        this.inClass = true;\n      }\n    }\n    this.visitObjectProperties(val);\n    if (isClass && this.inClass) {\n      this.inClass = false;\n    }\n\n    if (val instanceof BoundFunctionValue) {\n      this.visitValue(val.$BoundTargetFunction);\n      this.visitValue(val.$BoundThis);\n      for (let boundArg of val.$BoundArguments) this.visitValue(boundArg);\n      return;\n    }\n\n    invariant(!(val instanceof NativeFunctionValue), \"all native function values should be intrinsics\");\n\n    invariant(val instanceof ECMAScriptSourceFunctionValue);\n    invariant(val.constructor === ECMAScriptSourceFunctionValue);\n    let formalParameters = val.$FormalParameters;\n    let code = val.$ECMAScriptCode;\n\n    let functionInfo = this.functionInfos.get(code);\n    let residualFunctionBindings = new Map();\n    this.functionInstances.set(val, {\n      residualFunctionBindings,\n      initializationStatements: [],\n      functionValue: val,\n      scopeInstances: new Map(),\n    });\n\n    if (!functionInfo) {\n      functionInfo = {\n        unbound: new Set(),\n        modified: new Set(),\n        usesArguments: false,\n        usesThis: false,\n      };\n      let state = {\n        tryQuery: this.logger.tryQuery.bind(this.logger),\n        val,\n        functionInfo,\n        realm: this.realm,\n      };\n\n      traverse(\n        t.file(t.program([t.expressionStatement(t.functionExpression(null, formalParameters, code))])),\n        ClosureRefVisitor,\n        null,\n        state\n      );\n      this.functionInfos.set(code, functionInfo);\n\n      if (val.isResidual && functionInfo.unbound.size) {\n        if (!val.isUnsafeResidual) {\n          this.logger.logError(\n            val,\n            `residual function ${describeLocation(this.realm, val, undefined, code.loc) ||\n              \"(unknown)\"} refers to the following identifiers defined outside of the local scope: ${Object.keys(\n              functionInfo.unbound\n            ).join(\", \")}`\n          );\n        }\n      }\n    }\n\n    let additionalFunctionEffects = this.additionalFunctionValuesAndEffects.get(val);\n    if (additionalFunctionEffects) {\n      this._visitAdditionalFunction(val, additionalFunctionEffects, parentScope);\n    } else {\n      this._withScope(val, () => {\n        invariant(functionInfo);\n        for (let innerName of functionInfo.unbound) {\n          let residualBinding = this.visitBinding(val, innerName);\n          invariant(residualBinding !== undefined);\n          residualFunctionBindings.set(innerName, residualBinding);\n          if (functionInfo.modified.has(innerName)) {\n            residualBinding.modified = true;\n          }\n        }\n      });\n    }\n    if (isClass && val.$HomeObject instanceof ObjectValue) {\n      this._visitClass(val, val.$HomeObject);\n    }\n    this.functionInstances.set(val, {\n      residualFunctionBindings,\n      initializationStatements: [],\n      functionValue: val,\n      scopeInstances: new Map(),\n    });\n  }\n\n  // Visits a binding, if createBinding is true, will always return a ResidualFunctionBinding\n  // otherwise visits + returns the binding only if one already exists.\n  visitBinding(val: FunctionValue, name: string, createBinding: boolean = true): ResidualFunctionBinding | void {\n    let residualFunctionBinding;\n    let doesNotMatter = true;\n    let reference = this.logger.tryQuery(\n      () => Environment.ResolveBinding(this.realm, name, doesNotMatter, val.$Environment),\n      undefined,\n      false /* The only reason `ResolveBinding` might fail is because the global object is partial. But in that case, we know that we are dealing with the common scope. */\n    );\n    let getFromMap = createBinding ? getOrDefault : (map, key, defaultFn) => map.get(key);\n    if (\n      reference === undefined ||\n      Environment.IsUnresolvableReference(this.realm, reference) ||\n      reference.base instanceof GlobalEnvironmentRecord\n    ) {\n      // Global Binding\n      residualFunctionBinding = getFromMap(\n        this.globalBindings,\n        name,\n        () =>\n          ({\n            value: this.realm.getGlobalLetBinding(name),\n            modified: true,\n            declarativeEnvironmentRecord: null,\n          }: ResidualFunctionBinding)\n      );\n    } else {\n      // DeclarativeEnvironmentRecord binding\n      invariant(!Environment.IsUnresolvableReference(this.realm, reference));\n      let referencedBase = reference.base;\n      let referencedName: string = (reference.referencedName: any);\n      if (typeof referencedName !== \"string\") {\n        throw new FatalError(\"TODO: do not know how to visit reference with symbol\");\n      }\n      invariant(referencedBase instanceof DeclarativeEnvironmentRecord);\n      let residualFunctionBindings = getOrDefault(\n        this.declarativeEnvironmentRecordsBindings,\n        referencedBase,\n        () => new Map()\n      );\n      residualFunctionBinding = getFromMap(residualFunctionBindings, referencedName, (): ResidualFunctionBinding => {\n        invariant(referencedBase instanceof DeclarativeEnvironmentRecord);\n        let binding = referencedBase.bindings[referencedName];\n        invariant(!binding.deletable);\n        return {\n          value: (binding.initialized && binding.value) || this.realm.intrinsics.undefined,\n          modified: false,\n          declarativeEnvironmentRecord: referencedBase,\n        };\n      });\n    }\n    if (residualFunctionBinding && residualFunctionBinding.value) {\n      residualFunctionBinding.value = this.visitEquivalentValue(residualFunctionBinding.value);\n    }\n    return residualFunctionBinding;\n  }\n\n  _visitClass(classFunc: ECMAScriptSourceFunctionValue, classPrototype: ObjectValue): void {\n    let visitClassMethod = (propertyNameOrSymbol, methodFunc, methodType, isStatic) => {\n      if (methodFunc instanceof ECMAScriptSourceFunctionValue) {\n        // if the method does not have a $HomeObject, it's not a class method\n        if (methodFunc.$HomeObject !== undefined) {\n          if (methodFunc !== classFunc) {\n            this._visitClassMethod(methodFunc, methodType, classPrototype, !!isStatic);\n          }\n        }\n      }\n    };\n    for (let [propertyName, method] of classPrototype.properties) {\n      withDescriptorValue(propertyName, method.descriptor, visitClassMethod);\n    }\n    for (let [symbol, method] of classPrototype.symbols) {\n      withDescriptorValue(symbol, method.descriptor, visitClassMethod);\n    }\n    if (classPrototype.properties.has(\"constructor\")) {\n      let constructor = classPrototype.properties.get(\"constructor\");\n\n      invariant(constructor !== undefined);\n      // check if the constructor was deleted, as it can't really be deleted\n      // it just gets set to empty (the default again)\n      if (constructor.descriptor === undefined) {\n        classFunc.$HasEmptyConstructor = true;\n      } else {\n        let visitClassProperty = (propertyNameOrSymbol, methodFunc, methodType) => {\n          visitClassMethod(propertyNameOrSymbol, methodFunc, methodType, true);\n        };\n        // check if we have any static methods we need to include\n        let constructorFunc = Get(this.realm, classPrototype, \"constructor\");\n        invariant(constructorFunc instanceof ObjectValue);\n        for (let [propertyName, method] of constructorFunc.properties) {\n          if (\n            !ClassPropertiesToIgnore.has(propertyName) &&\n            method.descriptor !== undefined &&\n            !(\n              propertyName === \"length\" && canIgnoreClassLengthProperty(constructorFunc, method.descriptor, this.logger)\n            )\n          ) {\n            withDescriptorValue(propertyName, method.descriptor, visitClassProperty);\n          }\n        }\n      }\n    }\n    this.classMethodInstances.set(classFunc, {\n      classPrototype,\n      methodType: \"constructor\",\n      classSuperNode: undefined,\n      classMethodIsStatic: false,\n      classMethodKeyNode: undefined,\n      classMethodComputed: false,\n    });\n  }\n\n  _visitClassMethod(\n    methodFunc: ECMAScriptSourceFunctionValue,\n    methodType: \"get\" | \"set\" | \"value\",\n    classPrototype: ObjectValue,\n    isStatic: boolean\n  ): void {\n    this.classMethodInstances.set(methodFunc, {\n      classPrototype,\n      methodType: methodType === \"value\" ? \"method\" : methodType,\n      classSuperNode: undefined,\n      classMethodIsStatic: isStatic,\n      classMethodKeyNode: undefined,\n      classMethodComputed: !!methodFunc.$HasComputedName,\n    });\n  }\n\n  visitValueObject(val: ObjectValue): void {\n    if (this.inAdditionalFunction && !this.inClass) this.additionalRoots.add(val);\n    let kind = val.getKind();\n    this.visitObjectProperties(val, kind);\n\n    // If this object is a prototype object that was implicitly created by the runtime\n    // for a constructor, then we can obtain a reference to this object\n    // in a special way that's handled alongside function serialization.\n    let constructor = val.originalConstructor;\n    if (constructor !== undefined) {\n      this.visitValue(constructor);\n      return;\n    }\n\n    switch (kind) {\n      case \"RegExp\":\n      case \"Number\":\n      case \"String\":\n      case \"Boolean\":\n      case \"ArrayBuffer\":\n        return;\n      case \"ReactElement\":\n        this.shouldVisitReactLibrary = true;\n        // check we can hoist a React Element\n        canHoistReactElement(this.realm, val, this);\n        return;\n      case \"Date\":\n        let dateValue = val.$DateValue;\n        invariant(dateValue !== undefined);\n        this.visitValue(dateValue);\n        return;\n      case \"Float32Array\":\n      case \"Float64Array\":\n      case \"Int8Array\":\n      case \"Int16Array\":\n      case \"Int32Array\":\n      case \"Uint8Array\":\n      case \"Uint16Array\":\n      case \"Uint32Array\":\n      case \"Uint8ClampedArray\":\n      case \"DataView\":\n        let buf = val.$ViewedArrayBuffer;\n        invariant(buf !== undefined);\n        this.visitValue(buf);\n        return;\n      case \"Map\":\n      case \"WeakMap\":\n        this.visitValueMap(val);\n        return;\n      case \"Set\":\n      case \"WeakSet\":\n        this.visitValueSet(val);\n        return;\n      default:\n        if (kind !== \"Object\") this.logger.logError(val, `Object of kind ${kind} is not supported in residual heap.`);\n        if (this.$ParameterMap !== undefined) {\n          this.logger.logError(val, `Arguments object is not supported in residual heap.`);\n        }\n        if (this.realm.react.enabled && valueIsReactLibraryObject(this.realm, val, this.logger)) {\n          this.realm.fbLibraries.react = val;\n        }\n        return;\n    }\n  }\n\n  visitValueSymbol(val: SymbolValue): void {\n    if (val.$Description) this.visitValue(val.$Description);\n  }\n\n  visitValueProxy(val: ProxyValue): void {\n    this.visitValue(val.$ProxyTarget);\n    this.visitValue(val.$ProxyHandler);\n  }\n\n  visitAbstractValue(val: AbstractValue): void {\n    if (val.kind === \"sentinel member expression\")\n      this.logger.logError(val, \"expressions of type o[p] are not yet supported for partially known o and unknown p\");\n    if (val.kind === \"sentinel ToObject\") this.logger.logError(val, \"Unknown object cannot be coerced to Object\");\n    for (let i = 0, n = val.args.length; i < n; i++) {\n      val.args[i] = this.visitEquivalentValue(val.args[i]);\n    }\n  }\n\n  // Overridable hook for pre-visiting the value.\n  // Return false will tell visitor to skip visiting children of this node.\n  preProcessValue(val: Value): boolean {\n    return this._mark(val);\n  }\n\n  // Overridable hook for post-visiting the value.\n  postProcessValue(val: Value) {}\n\n  _mark(val: Value): boolean {\n    let scopes = this.values.get(val);\n    if (scopes === undefined) this.values.set(val, (scopes = new Set()));\n    if (scopes.has(this.scope)) return false;\n    scopes.add(this.scope);\n    return true;\n  }\n\n  visitEquivalentValue<T: Value>(val: T): T {\n    if (val instanceof AbstractValue) {\n      let equivalentValue = this.equivalenceSet.add(val);\n      if (this.preProcessValue(equivalentValue)) this.visitAbstractValue(equivalentValue);\n      this.postProcessValue(equivalentValue);\n      return (equivalentValue: any);\n    }\n    if (val instanceof ObjectValue && isReactElement(val)) {\n      let equivalentReactElementValue = this.reactElementEquivalenceSet.add(val);\n      if (this._mark(equivalentReactElementValue)) this.visitValueObject(equivalentReactElementValue);\n      return (equivalentReactElementValue: any);\n    }\n    this.visitValue(val);\n    return val;\n  }\n\n  visitValue(val: Value): void {\n    invariant(!val.refuseSerialization);\n    if (val instanceof AbstractValue) {\n      if (this.preProcessValue(val)) this.visitAbstractValue(val);\n    } else if (val.isIntrinsic()) {\n      // All intrinsic values exist from the beginning of time...\n      // ...except for a few that come into existence as templates for abstract objects (TODO #882).\n      if (val.isTemplate) this.preProcessValue(val);\n      else\n        this._withScope(this.commonScope, () => {\n          this.preProcessValue(val);\n        });\n    } else if (val instanceof EmptyValue) {\n      this.preProcessValue(val);\n    } else if (ResidualHeapInspector.isLeaf(val)) {\n      this.preProcessValue(val);\n    } else if (IsArray(this.realm, val)) {\n      invariant(val instanceof ObjectValue);\n      if (this.preProcessValue(val)) this.visitValueArray(val);\n    } else if (val instanceof ProxyValue) {\n      if (this.preProcessValue(val)) this.visitValueProxy(val);\n    } else if (val instanceof FunctionValue) {\n      // Function declarations should get hoisted in common scope so that instances only get allocated once\n      let parentScope = this.scope;\n      this._withScope(this.commonScope, () => {\n        invariant(val instanceof FunctionValue);\n        if (this.preProcessValue(val)) this.visitValueFunction(val, parentScope);\n      });\n    } else if (val instanceof SymbolValue) {\n      if (this.preProcessValue(val)) this.visitValueSymbol(val);\n    } else {\n      invariant(val instanceof ObjectValue);\n\n      // Prototypes are reachable via function declarations, and those get hoisted, so we need to move\n      // prototype initialization to the common scope code as well.\n      if (val.originalConstructor !== undefined) {\n        this._withScope(this.commonScope, () => {\n          invariant(val instanceof ObjectValue);\n          if (this.preProcessValue(val)) this.visitValueObject(val);\n        });\n      } else {\n        if (this.preProcessValue(val)) this.visitValueObject(val);\n      }\n    }\n    this.postProcessValue(val);\n  }\n\n  createGeneratorVisitCallbacks(generator: Generator, commonScope: Scope): VisitEntryCallbacks {\n    return {\n      visitValues: (values: Array<Value>) => {\n        for (let i = 0, n = values.length; i < n; i++) values[i] = this.visitEquivalentValue(values[i]);\n      },\n      visitGenerator: this.visitGenerator.bind(this),\n      canSkip: (value: AbstractValue): boolean => {\n        return !this.referencedDeclaredValues.has(value) && !this.values.has(value);\n      },\n      recordDeclaration: (value: AbstractValue) => {\n        this.referencedDeclaredValues.add(value);\n      },\n      recordDelayedEntry: (entry: GeneratorEntry) => {\n        this.delayedVisitGeneratorEntries.push({ commonScope, generator, entry });\n      },\n    };\n  }\n\n  visitGenerator(generator: Generator): void {\n    this._withScope(generator, () => {\n      generator.visit(this.createGeneratorVisitCallbacks(generator, this.commonScope));\n    });\n  }\n\n  _visitAdditionalFunction(\n    functionValue: FunctionValue,\n    additionalEffects: AdditionalFunctionEffects,\n    parentScope: Scope\n  ) {\n    // Get Instance + Info\n    invariant(functionValue instanceof ECMAScriptSourceFunctionValue);\n    let code = functionValue.$ECMAScriptCode;\n    let functionInfo = this.functionInfos.get(code);\n    invariant(functionInfo !== undefined);\n    let funcInstance = this.functionInstances.get(functionValue);\n    invariant(funcInstance !== undefined);\n\n    // Set Visitor state\n    // Allows us to emit function declarations etc. inside of this additional\n    // function instead of adding them at global scope\n    let prevCommonScope = this.commonScope;\n    this.commonScope = functionValue;\n    let oldReactElementEquivalenceSet = this.reactElementEquivalenceSet;\n    this.reactElementEquivalenceSet = new ReactElementSet(this.realm, this.equivalenceSet);\n    let oldInAdditionalFunction = this.inAdditionalFunction;\n    this.inAdditionalFunction = true;\n    let prevReVisit = this.additionalRoots;\n    this.additionalRoots = new Set();\n\n    let _visitAdditionalFunctionEffects = () => {\n      let { effects } = additionalEffects;\n      let [\n        result,\n        generator,\n        modifiedBindings,\n        modifiedProperties: Map<PropertyBinding, void | Descriptor>,\n        createdObjects,\n      ] = effects;\n      // result -- ignore TODO: return the result from the function somehow\n      // Generator -- visit all entries\n      // Bindings -- (modifications to named variables) only need to serialize bindings if they're\n      //             captured by a residual function\n      //          -- need to apply them and maybe need to revisit functions in ancestors to make sure\n      //             we don't overwrite anything they capture\n      //          -- TODO: deal with these properly\n      // PropertyBindings -- (property modifications) visit any property bindings to pre-existing objects\n      // CreatedObjects -- should take care of itself\n      this.realm.applyEffects([\n        result,\n        new Generator(this.realm),\n        modifiedBindings,\n        modifiedProperties,\n        createdObjects,\n      ]);\n      let modifiedBindingInfo = new Map();\n      let visitPropertiesAndBindings = () => {\n        for (let propertyBinding of modifiedProperties.keys()) {\n          let binding: PropertyBinding = ((propertyBinding: any): PropertyBinding);\n          let object = binding.object;\n          if (object instanceof ObjectValue && createdObjects.has(object)) continue; // Created Object's binding\n          if (object.refuseSerialization) continue; // modification to internal state\n          if (object.intrinsicName === \"global\") continue; // Avoid double-counting\n          this.visitObjectProperty(binding);\n        }\n        // Handing of ModifiedBindings\n        for (let [additionalBinding, previousValue] of modifiedBindings) {\n          let modifiedBinding = additionalBinding;\n          let residualBinding;\n          this._withScope(functionValue, () => {\n            // Also visit the original value of the binding\n            residualBinding = this.visitBinding(functionValue, modifiedBinding.name);\n            invariant(residualBinding !== undefined);\n            // Fixup the binding to have the correct value\n            // No previousValue means this is a binding for a nested function\n            if (previousValue && previousValue.value)\n              residualBinding.value = this.visitEquivalentValue(previousValue.value);\n            invariant(functionInfo !== undefined);\n            if (functionInfo.modified.has(modifiedBinding.name)) residualBinding.modified;\n          });\n          invariant(residualBinding !== undefined);\n          invariant(funcInstance !== undefined);\n          funcInstance.residualFunctionBindings.set(modifiedBinding.name, residualBinding);\n          let newValue = modifiedBinding.value;\n          invariant(newValue);\n          this.visitValue(newValue);\n          residualBinding.modified = true;\n          // This should be enforced by checkThatFunctionsAreIndependent\n          invariant(\n            !residualBinding.additionalFunctionOverridesValue,\n            \"We should only have one additional function value modifying any given residual binding\"\n          );\n          if (previousValue && previousValue.value) residualBinding.additionalFunctionOverridesValue = functionValue;\n          modifiedBindingInfo.set(modifiedBinding, residualBinding);\n        }\n        invariant(result instanceof Value);\n        if (!(result instanceof UndefinedValue)) this.visitValue(result);\n      };\n      invariant(funcInstance !== undefined);\n      invariant(functionInfo !== undefined);\n      this.additionalFunctionValueInfos.set(functionValue, {\n        functionValue,\n        captures: functionInfo.unbound,\n        modifiedBindings: modifiedBindingInfo,\n        instance: funcInstance,\n      });\n      this.visitGenerator(generator);\n      // All modified properties and bindings should be accessible\n      // from its containing additional function scope.\n      this._withScope(functionValue, visitPropertiesAndBindings);\n\n      // Remove any modifications to CreatedObjects -- these are fine being serialized inside the additional function\n      this.additionalRoots = new Set([...this.additionalRoots].filter(x => !createdObjects.has(x)));\n      this.realm.restoreBindings(modifiedBindings);\n      this.realm.restoreProperties(modifiedProperties);\n      return this.realm.intrinsics.undefined;\n    };\n    this.realm.evaluateAndRevertInGlobalEnv(_visitAdditionalFunctionEffects);\n\n    // Cleanup\n    this.commonScope = prevCommonScope;\n    this.reactElementEquivalenceSet = oldReactElementEquivalenceSet;\n    this._withScope(\n      parentScope,\n      // Re-visit any bindings corresponding to unbound values or values closed over from outside additional function\n      // they're serialized in the correct scope\n      () => {\n        invariant(functionInfo !== undefined);\n        invariant(funcInstance !== undefined);\n        for (let value of this.additionalRoots) {\n          // Populate old additionalRoots because we switched them out\n          prevReVisit.add(value);\n          this.visitValue(value);\n        }\n        for (let innerName of functionInfo.unbound) {\n          let residualBinding = this.visitBinding(functionValue, innerName, false);\n          if (residualBinding) {\n            residualBinding.modified = true;\n            funcInstance.residualFunctionBindings.set(innerName, residualBinding);\n          }\n        }\n        this.additionalRoots = prevReVisit;\n      }\n    );\n    this.inAdditionalFunction = oldInAdditionalFunction;\n  }\n\n  visitRoots(adjustRoots?: boolean): void {\n    let generator = this.realm.generator;\n    invariant(generator);\n    this.visitGenerator(generator);\n    for (let moduleValue of this.modules.initializedModules.values()) this.visitValue(moduleValue);\n    if (this.realm.react.enabled && this.shouldVisitReactLibrary) {\n      this._visitReactLibrary();\n    }\n\n    // Do a fixpoint over all pure generator entries to make sure that we visit\n    // arguments of only BodyEntries that are required by some other residual value\n    let oldDelayedEntries = [];\n    while (oldDelayedEntries.length !== this.delayedVisitGeneratorEntries.length) {\n      oldDelayedEntries = this.delayedVisitGeneratorEntries;\n      this.delayedVisitGeneratorEntries = [];\n      for (let { commonScope, generator: entryGenerator, entry } of oldDelayedEntries) {\n        this.commonScope = commonScope;\n        this._withScope(entryGenerator, () => {\n          entryGenerator.visitEntry(entry, this.createGeneratorVisitCallbacks(entryGenerator, commonScope));\n        });\n      }\n    }\n\n    // Artificially add additionalRoots to generators so that they can get serialized in parent scopes of additionalFunctions\n    // if necessary.\n    if (adjustRoots) {\n      for (let value of this.additionalRoots) {\n        let scopes = this.values.get(value);\n        invariant(scopes);\n        scopes = [...scopes];\n        invariant(scopes.length > 0);\n        invariant(scopes[0]);\n        const firstGenerator = scopes[0] instanceof Generator ? scopes[0] : scopes[0].getParent();\n        let commonAncestor = scopes.reduce((x, y) => commonAncestorOf(x, y), firstGenerator);\n        invariant(commonAncestor instanceof Generator); // every scope is either the root, or a descendant\n        commonAncestor.appendRoots([value]);\n      }\n    }\n  }\n\n  _visitReactLibrary() {\n    // find and visit the React library\n    let reactLibraryObject = this.realm.fbLibraries.react;\n    if (this.realm.react.output === \"jsx\") {\n      // React might not be defined in scope, i.e. another library is using JSX\n      // we don't throw an error as we should support JSX stand-alone\n      if (reactLibraryObject !== undefined) {\n        this.visitValue(reactLibraryObject);\n      }\n    } else if (this.realm.react.output === \"create-element\") {\n      function throwError() {\n        throw new FatalError(\"unable to visit createElement due to React not being referenced in scope\");\n      }\n      // createElement output needs React in scope\n      if (reactLibraryObject === undefined) {\n        throwError();\n      }\n      invariant(reactLibraryObject instanceof ObjectValue);\n      let createElement = reactLibraryObject.properties.get(\"createElement\");\n      if (createElement === undefined || createElement.descriptor === undefined) {\n        throwError();\n      }\n      let reactCreateElement = Get(this.realm, reactLibraryObject, \"createElement\");\n      this.visitValue(reactCreateElement);\n    }\n  }\n}\n"]}