{"version":3,"sources":["../../src/serializer/factorify.js"],"names":["factorifyObjects","t","isLiteral","node","type","operator","argument","isSameNode","left","right","name","value","getObjectKeys","obj","keys","properties","prop","key","push","computed","indexOf","join","body","factoryNameGenerator","signatures","Object","create","declarations","declar","init","initializerAstNodeName","declars","expr","expression","signatureKey","length","split","rootFactoryParams","rootFactoryProps","keyIndex","id","identifier","keyNode","isValidIdentifier","stringLiteral","objectProperty","rootFactoryId","generate","rootFactoryBody","blockStatement","returnStatement","objectExpression","rootFactory","functionDeclaration","unshift","args","callExpression","seen","Set","has","common","Map","mostSharedArgsLength","declar2","initializerAstNodeName2","sharedArgs","i","arguments","Math","max","set","sharedPairs","entries","pair","highestPairArgs","highestPairCount","pairArgs","declarsSub","concat","removeArgs","subFactoryArgs","subFactoryParams","arg","subFactoryId","subFactoryBody","subFactory","declarSub","add","call","callee","filter","val"],"mappings":"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","file":"factorify.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport * as t from \"babel-types\";\nimport type { BabelNodeStatement, BabelNodeObjectExpression, BabelNodeLVal } from \"babel-types\";\nimport { NameGenerator } from \"../utils/generator.js\";\n\nfunction isLiteral(node) {\n  switch (node.type) {\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n      return true;\n    case \"UnaryExpression\":\n      return node.operator === \"void\" && isLiteral(node.argument);\n    default:\n      return false;\n  }\n}\n\nfunction isSameNode(left, right) {\n  let type = left.type;\n\n  if (type !== right.type) {\n    return false;\n  }\n\n  if (type === \"Identifier\") {\n    return left.name === right.name;\n  }\n\n  if (type === \"NullLiteral\") {\n    return true;\n  }\n\n  if (type === \"BooleanLiteral\" || type === \"StringLiteral\" || type === \"NumericLiteral\") {\n    return left.value === right.value;\n  }\n\n  if (type === \"UnaryExpression\") {\n    return (\n      left.operator === \"void\" && right.operator === \"void\" && isLiteral(left.argument) && isLiteral(right.argument)\n    );\n  }\n\n  return false;\n}\n\nfunction getObjectKeys(obj: BabelNodeObjectExpression): string | false {\n  let keys = [];\n\n  for (let prop of obj.properties) {\n    if (prop.type !== \"ObjectProperty\") return false;\n\n    let key = prop.key;\n    if (key.type === \"StringLiteral\") {\n      keys.push(key.value);\n    } else if (key.type === \"Identifier\") {\n      if (prop.computed) return false;\n      keys.push(key.name);\n    } else {\n      return false;\n    }\n  }\n\n  for (let key of keys) {\n    if (key.indexOf(\"|\") >= 0) return false;\n  }\n\n  return keys.join(\"|\");\n}\n\n// This function looks for recurring initialization patterns in the code of the form\n//   var x = { a: literal1, b: literal2 }\n//   var y = { a: literal1, b: literal3 }\n// and transforms them into something like\n//   function factory(b) { return { a: literal1, b } }\n//   var x = factory(literal2);\n//   var y = factory(literal3);\n// TODO #884: Right now, the visitor below only looks into top-level variable declaration\n// with a flat object literal initializer.\n// It should also look into conditional control flow, residual functions, and nested object literals.\nexport function factorifyObjects(body: Array<BabelNodeStatement>, factoryNameGenerator: NameGenerator) {\n  let signatures = Object.create(null);\n\n  for (let node of body) {\n    switch (node.type) {\n      case \"VariableDeclaration\":\n        for (let declar of node.declarations) {\n          let { init } = declar;\n          if (!init) continue;\n          if (init.type !== \"ObjectExpression\") continue;\n\n          let keys = getObjectKeys(init);\n          if (!keys) continue;\n\n          let initializerAstNodeName = \"init\";\n          let declars = (signatures[keys] = signatures[keys] || []);\n          declars.push({ declar, initializerAstNodeName });\n        }\n        break;\n\n      case \"ExpressionStatement\":\n        const expr = node.expression;\n        if (expr.type !== \"AssignmentExpression\") {\n          break;\n        }\n        const { right } = expr;\n        if (right.type !== \"ObjectExpression\") {\n          break;\n        }\n\n        let keys = getObjectKeys(right);\n        if (!keys) continue;\n\n        let initializerAstNodeName = \"right\";\n        let declars = (signatures[keys] = signatures[keys] || []);\n        declars.push({ declar: node.expression, initializerAstNodeName });\n        break;\n\n      default:\n        // Continue to next node.\n        break;\n    }\n  }\n\n  for (let signatureKey in signatures) {\n    let declars = signatures[signatureKey];\n    if (declars.length < 5) continue;\n\n    let keys = signatureKey.split(\"|\");\n\n    //\n    let rootFactoryParams: Array<BabelNodeLVal> = [];\n    let rootFactoryProps = [];\n    for (let keyIndex = 0; keyIndex < keys.length; keyIndex++) {\n      let key = keys[keyIndex];\n      let id = t.identifier(`__${keyIndex}`);\n      rootFactoryParams.push(id);\n      let keyNode = t.isValidIdentifier(key) ? t.identifier(key) : t.stringLiteral(key);\n      rootFactoryProps.push(t.objectProperty(keyNode, id));\n    }\n\n    let rootFactoryId = t.identifier(factoryNameGenerator.generate(\"root\"));\n    let rootFactoryBody = t.blockStatement([t.returnStatement(t.objectExpression(rootFactoryProps))]);\n    let rootFactory = t.functionDeclaration(rootFactoryId, rootFactoryParams, rootFactoryBody);\n    body.unshift(rootFactory);\n\n    //\n    for (let { declar, initializerAstNodeName } of declars) {\n      let args = [];\n      for (let prop of declar[initializerAstNodeName].properties) {\n        args.push(prop.value);\n      }\n\n      declar[initializerAstNodeName] = t.callExpression(rootFactoryId, args);\n    }\n\n    //\n    let seen = new Set();\n    for (let { declar, initializerAstNodeName } of declars) {\n      if (seen.has(declar)) continue;\n\n      // build up a map containing the arguments that are shared\n      let common = new Map();\n      let mostSharedArgsLength = 0;\n      for (let { declar: declar2, initializerAstNodeName: initializerAstNodeName2 } of declars) {\n        if (seen.has(declar2)) continue;\n        if (declar === declar2) continue;\n\n        let sharedArgs = [];\n        for (let i = 0; i < keys.length; i++) {\n          if (isSameNode(declar[initializerAstNodeName].arguments[i], declar2[initializerAstNodeName2].arguments[i])) {\n            sharedArgs.push(i);\n          }\n        }\n        if (!sharedArgs.length) continue;\n\n        mostSharedArgsLength = Math.max(mostSharedArgsLength, sharedArgs.length);\n        common.set(declar2, sharedArgs);\n      }\n\n      // build up a mapping of the argument positions that are shared so we can pick the top one\n      let sharedPairs = Object.create(null);\n      for (let [declar2, args] of common.entries()) {\n        if (args.length === mostSharedArgsLength) {\n          args = args.join(\",\");\n          let pair = (sharedPairs[args] = sharedPairs[args] || []);\n          pair.push(declar2);\n        }\n      }\n\n      // get the highest pair\n      let highestPairArgs;\n      let highestPairCount;\n      for (let pairArgs in sharedPairs) {\n        let pair = sharedPairs[pairArgs];\n        if (!highestPairArgs || pair.length > highestPairCount) {\n          highestPairCount = pair.length;\n          highestPairArgs = pairArgs;\n        }\n      }\n      if (!highestPairArgs) continue;\n\n      //\n      let declarsSub = sharedPairs[highestPairArgs].concat(declar);\n      let removeArgs = highestPairArgs.split(\",\");\n\n      let subFactoryArgs = [];\n      let subFactoryParams = [];\n      let sharedArgs = declarsSub[0][initializerAstNodeName].arguments;\n      for (let i = 0; i < sharedArgs.length; i++) {\n        let arg = sharedArgs[i];\n        if (removeArgs.indexOf(i + \"\") >= 0) {\n          subFactoryArgs.push(arg);\n        } else {\n          let id = t.identifier(`__${i}`);\n          subFactoryArgs.push(id);\n          subFactoryParams.push(id);\n        }\n      }\n\n      let subFactoryId = t.identifier(factoryNameGenerator.generate(\"sub\"));\n      let subFactoryBody = t.blockStatement([t.returnStatement(t.callExpression(rootFactoryId, subFactoryArgs))]);\n      let subFactory = t.functionDeclaration(subFactoryId, subFactoryParams, subFactoryBody);\n      body.unshift(subFactory);\n\n      for (let declarSub of declarsSub) {\n        seen.add(declarSub);\n\n        let call = declarSub[initializerAstNodeName];\n        call.callee = subFactoryId;\n        call.arguments = call.arguments.filter(function(val, i) {\n          return removeArgs.indexOf(i + \"\") < 0;\n        });\n      }\n    }\n  }\n}\n"]}